{"version":3,"sources":["Data/Characters/Traveler/data.ts","Data/Characters/formula.ts","Data/Weapons/formula.ts","Data/formula.ts","Data/Artifacts/formula.ts","Data/Artifacts/Adventurer/data.ts","Data/Artifacts/EmblemOfSeveredFate/data.ts","Data/Artifacts/OceanHuedClam/data.ts","Data/Artifacts/TravelingDoctor/data.ts","Data/Weapons/Sword/AquilaFavonia/data.ts","Data/Weapons/Sword/CinnabarSpindle/data.ts","Data/Weapons/Sword/FilletBlade/data.ts","Data/Weapons/Sword/PrimordialJadeCutter/data.ts","Data/Weapons/Sword/SkywardBlade/data.ts","Data/Weapons/Sword/SwordOfDescension/data.ts","Data/Weapons/Sword/TheBlackSword/data.ts","Data/Weapons/Sword/TheFlute/data.ts","Data/Weapons/Sword/TravelersHandySword/data.ts","Data/Weapons/Polearm/CrescentPike/data.ts","Data/Weapons/Polearm/DragonspineSpear/data.ts","Data/Weapons/Polearm/EngulfingLightning/data.ts","Data/Weapons/Polearm/Halberd/data.ts","Data/Weapons/Polearm/SkywardSpine/data.ts","Data/Weapons/Polearm/StaffOfHoma/data.ts","Data/Weapons/Claymore/DebateClub/data.ts","Data/Weapons/Claymore/LuxuriousSeaLord/data.ts","Data/Weapons/Claymore/PrototypeArchaic/data.ts","Data/Weapons/Claymore/RedhornStonethresher/data.ts","Data/Weapons/Claymore/SkywardPride/data.ts","Data/Weapons/Claymore/SnowTombedStarsilver/data.ts","Data/Weapons/Claymore/TheBell/data.ts","Data/Weapons/Claymore/WhiteIronGreatsword/data.ts","Data/Weapons/Catalyst/EverlastingMoonglow/data.ts","Data/Weapons/Catalyst/EyeOfPerception/data.ts","Data/Weapons/Catalyst/Frostbearer/data.ts","Data/Weapons/Catalyst/OtherworldlyStory/data.ts","Data/Weapons/Catalyst/PrototypeAmber/data.ts","Data/Weapons/Catalyst/SkywardAtlas/data.ts","Data/Weapons/Bow/Messenger/data.ts","Data/Weapons/Bow/RecurveBow/data.ts","Data/Weapons/Bow/SkywardHarp/data.ts","Data/Weapons/Bow/TheViridescentHunt/data.ts"],"names":["data","anemo","geo","electro","formula","Albedo","Aloy","Amber","AratakiItto","Barbara","Beidou","Bennett","Chongyun","Diluc","Diona","Eula","Fischl","Ganyu","Gorou","HuTao","Jean","KaedeharaKazuha","Kaeya","KamisatoAyaka","Keqing","Klee","KujouSara","Lisa","Mona","Ningguang","Noelle","Qiqi","RaidenShogun","Razor","Rosaria","SangonomiyaKokomi","Sayu","Sucrose","Tartaglia","Thoma","Traveler","Venti","Xiao","Xiangling","Xingqiu","Xinyan","YaeMiko","Yanfei","Yoimiya","Zhongli","sword","AquilaFavonia","CinnabarSpindle","FilletBlade","PrimordialJadeCutter","SkywardBlade","SwordOfDescension","TheBlackSword","TheFlute","TravelersHandySword","polearm","CrescentPike","DragonspineSpear","EngulfingLightning","Halberd","SkywardSpine","StaffOfHoma","catalyst","EverlastingMoonglow","EyeOfPerception","Frostbearer","OtherworldlyStory","PrototypeAmber","SkywardAtlas","claymore","DebateClub","LuxuriousSeaLord","PrototypeArchaic","RedhornStonethresher","SkywardPride","SnowTombedStarsilver","TheBell","WhiteIronGreatsword","bow","Messenger","RecurveBow","SkywardHarp","TheViridescentHunt","character","weapon","artifact","Adventurer","EmblemOfSeveredFate","OceanHuedClam","TravelingDoctor","crawlObject","f","keys","regen","stats","basicHealingFormula","s4","s","Math","min","premod","enerRech_","dmg","physical_enemyRes_multi","heal","basicDMGFormula","refineIndex","hp","finalATK","heal_multi","defConv","skill","val","statKey","getTalentStatKey","finalDEF","hp_atk","bonus","modStats","finalHP","dmg_","vals","dmgc","enerRechConv","enerRechMax","conv","hp_atk_add","esj","esjadd","normal","charged","shield","hpMulti","shield_","hp_conv","norm"],"mappings":"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","file":"static/js/5.8b12d0e2.chunk.js","sourcesContent":["\r\nimport anemo from './anemo/data'\r\nimport geo from './geo/data'\r\nimport electro from './electro/data'\r\n\r\nconst data = {\r\n  anemo,\r\n  geo,\r\n  electro,\r\n}\r\nexport default data","import Albedo from './Albedo/data'\r\nimport Aloy from './Aloy/data'\r\nimport Amber from './Amber/data'\r\nimport AratakiItto from './AratakiItto/data'\r\nimport Barbara from './Barbara/data'\r\nimport Beidou from './Beidou/data'\r\nimport Bennett from './Bennett/data'\r\nimport Chongyun from './Chongyun/data'\r\nimport Diluc from './Diluc/data'\r\nimport Diona from './Diona/data'\r\nimport Eula from './Eula/data'\r\nimport Fischl from './Fischl/data'\r\nimport Ganyu from './Ganyu/data'\r\nimport Gorou from './Gorou/data'\r\nimport HuTao from './HuTao/data'\r\nimport Jean from './Jean/data'\r\nimport KaedeharaKazuha from './KaedeharaKazuha/data'\r\nimport Kaeya from './Kaeya/data'\r\nimport KamisatoAyaka from './KamisatoAyaka/data'\r\nimport Keqing from './Keqing/data'\r\nimport Klee from './Klee/data'\r\nimport KujouSara from './KujouSara/data'\r\nimport Lisa from './Lisa/data'\r\nimport Mona from './Mona/data'\r\nimport Ningguang from './Ningguang/data'\r\nimport Noelle from './Noelle/data'\r\nimport Qiqi from './Qiqi/data'\r\nimport RaidenShogun from './RaidenShogun/data'\r\nimport Razor from './Razor/data'\r\nimport Rosaria from './Rosaria/data'\r\nimport SangonomiyaKokomi from './SangonomiyaKokomi/data'\r\nimport Sayu from './Sayu/data'\r\nimport Sucrose from './Sucrose/data'\r\nimport Tartaglia from './Tartaglia/data'\r\nimport Thoma from './Thoma/data'\r\nimport Traveler from './Traveler/data'\r\nimport Venti from './Venti/data'\r\nimport Xiao from './Xiao/data'\r\nimport Xiangling from './Xiangling/data'\r\nimport Xingqiu from './Xingqiu/data'\r\nimport Xinyan from './Xinyan/data'\r\nimport YaeMiko from './YaeMiko/data'\r\nimport Yanfei from './Yanfei/data'\r\nimport Yoimiya from './Yoimiya/data'\r\nimport Zhongli from './Zhongli/data'\r\nimport { IFormulaSheet } from '../../Types/character'\r\nimport { CharacterKey, ElementKey } from '../../Types/consts'\r\ntype IFormulaSheets = StrictDict<CharacterKey, IFormulaSheet | Dict<ElementKey, IFormulaSheet>>\r\nconst formula: IFormulaSheets = {\r\n  Albedo,\r\n  Aloy,\r\n  Amber,\r\n  AratakiItto,\r\n  Barbara,\r\n  Beidou,\r\n  Bennett,\r\n  Chongyun,\r\n  Diluc,\r\n  Diona,\r\n  Eula,\r\n  Fischl,\r\n  Ganyu,\r\n  Gorou,\r\n  HuTao,\r\n  Jean,\r\n  KaedeharaKazuha,\r\n  Kaeya,\r\n  KamisatoAyaka,\r\n  Keqing,\r\n  Klee,\r\n  KujouSara,\r\n  Lisa,\r\n  Mona,\r\n  Ningguang,\r\n  Noelle,\r\n  Qiqi,\r\n  RaidenShogun,\r\n  Razor,\r\n  Rosaria,\r\n  SangonomiyaKokomi,\r\n  Sayu,\r\n  Sucrose,\r\n  Tartaglia,\r\n  Thoma,\r\n  Traveler,\r\n  Venti,\r\n  Xiao,\r\n  Xiangling,\r\n  Xingqiu,\r\n  Xinyan,\r\n  YaeMiko,\r\n  Yanfei,\r\n  Yoimiya,\r\n  Zhongli\r\n};\r\nexport default formula\r\n","import AquilaFavonia from './Sword/AquilaFavonia/data'\r\n// import BlackcliffLongsword from './Sword/BlackcliffLongsword/data'\r\nimport CinnabarSpindle from './Sword/CinnabarSpindle/data'\r\n// import CoolSteel from './Sword/CoolSteel/data'\r\n// import DarkIronSword from './Sword/DarkIronSword/data'\r\n// import DullBlade from './Sword/DullBlade/data'\r\n// import FavoniusSword from './Sword/FavoniusSword/data'\r\n// import FesteringDesire from './Sword/FesteringDesire/data'\r\nimport FilletBlade from './Sword/FilletBlade/data'\r\n// import FreedomSworn from './Sword/FreedomSworn/data'\r\n// import HarbingerOfDawn from './Sword/HarbingerOfDawn/data'\r\n// import IronSting from './Sword/IronSting/data'\r\n// import LionsRoar from './Sword/LionsRoar/data'\r\nimport PrimordialJadeCutter from './Sword/PrimordialJadeCutter/data'\r\n// import PrototypeRancour from './Sword/PrototypeRancour/data'\r\n// import RoyalLongsword from './Sword/RoyalLongsword/data'\r\n// import SacrificialSword from './Sword/SacrificialSword/data'\r\n// import SilverSword from './Sword/SilverSword/data'\r\n// import SkyriderSword from './Sword/SkyriderSword/data'\r\nimport SkywardBlade from './Sword/SkywardBlade/data'\r\n// import SummitShaper from './Sword/SummitShaper/data'\r\nimport SwordOfDescension from './Sword/SwordOfDescension/data'\r\n// import TheAlleyFlash from './Sword/TheAlleyFlash/data'\r\nimport TheBlackSword from './Sword/TheBlackSword/data'\r\nimport TheFlute from './Sword/TheFlute/data'\r\nimport TravelersHandySword from './Sword/TravelersHandySword/data'\r\n\r\n// import BeginnersProtector from './Polearm/BeginnersProtector/data'\r\n// import BlackcliffPole from './Polearm/BlackcliffPole/data'\r\n// import BlackTassel from './Polearm/BlackTassel/data'\r\nimport CrescentPike from './Polearm/CrescentPike/data'\r\n// import Deathmatch from './Polearm/Deathmatch/data'\r\n// import DragonsBane from './Polearm/DragonsBane/data'\r\nimport DragonspineSpear from './Polearm/DragonspineSpear/data'\r\nimport EngulfingLightning from './Polearm/EngulfingLightning/data'\r\n// import FavoniusLance from './Polearm/FavoniusLance/data'\r\nimport Halberd from './Polearm/Halberd/data'\r\n// import IronPoint from './Polearm/IronPoint/data'\r\n// import LithicSpear from './Polearm/LithicSpear/data'\r\n// import PrimordialJadeWingedSpear from './Polearm/PrimordialJadeWingedSpear/data'\r\n// import PrototypeStarglitter from './Polearm/PrototypeStarglitter/data'\r\n// import RoyalSpear from './Polearm/RoyalSpear/data'\r\nimport SkywardSpine from './Polearm/SkywardSpine/data'\r\nimport StaffOfHoma from './Polearm/StaffOfHoma/data'\r\n// import VortexVanquisher from './Polearm/VortexVanquisher/data'\r\n// import WhiteTassel from './Polearm/WhiteTassel/data'\r\n\r\n// import BlackcliffSlasher from './Claymore/BlackcliffSlasher/data'\r\n// import BloodtaintedGreatsword from './Claymore/BloodtaintedGreatsword/data'\r\nimport DebateClub from './Claymore/DebateClub/data'\r\n// import FavoniusGreatsword from './Claymore/FavoniusGreatsword/data'\r\n// import FerrousShadow from './Claymore/FerrousShadow/data'\r\n// import LithicBlade from './Claymore/LithicBlade/data'\r\nimport LuxuriousSeaLord from './Claymore/LuxuriousSeaLord/data'\r\n// import OldMercsPal from './Claymore/OldMercsPal/data'\r\nimport PrototypeArchaic from './Claymore/PrototypeArchaic/data'\r\n// import Quartz from './Claymore/Quartz/data'\r\n// import Rainslasher from './Claymore/Rainslasher/data'\r\nimport RedhornStonethresher from './Claymore/RedhornStonethresher/data'\r\n// import RoyalGreatsword from './Claymore/RoyalGreatsword/data'\r\n// import SacrificialGreatsword from './Claymore/SacrificialGreatsword/data'\r\n// import SerpentSpine from './Claymore/SerpentSpine/data'\r\n// import SkyriderGreatsword from './Claymore/SkyriderGreatsword/data'\r\nimport SkywardPride from './Claymore/SkywardPride/data'\r\nimport SnowTombedStarsilver from './Claymore/SnowTombedStarsilver/data'\r\n// import SongOfBrokenPines from './Claymore/SongOfBrokenPines/data'\r\nimport TheBell from './Claymore/TheBell/data'\r\n// import TheUnforged from './Claymore/TheUnforged/data'\r\n// import WasterGreatsword from './Claymore/WasterGreatsword/data'\r\n// import Whiteblind from './Claymore/Whiteblind/data'\r\nimport WhiteIronGreatsword from './Claymore/WhiteIronGreatsword/data'\r\n// import WolfsGravestone from './Claymore/WolfsGravestone/data'\r\n\r\n// import ApprenticesNotes from './Catalyst/ApprenticesNotes/data'\r\n// import BlackcliffAgate from './Catalyst/BlackcliffAgate/data'\r\n// import DodocoTales from './Catalyst/DodocoTales/data'\r\n// import EmeraldOrb from './Catalyst/EmeraldOrb/data'\r\nimport EverlastingMoonglow from './Catalyst/EverlastingMoonglow/data'\r\nimport EyeOfPerception from './Catalyst/EyeOfPerception/data'\r\n// import FavoniusCodex from './Catalyst/FavoniusCodex/data'\r\nimport Frostbearer from './Catalyst/Frostbearer/data'\r\n// import LostPrayerToTheSacredWinds from './Catalyst/LostPrayerToTheSacredWinds/data'\r\n// import MagicGuide from './Catalyst/MagicGuide/data'\r\n// import MappaMare from './Catalyst/MappaMare/data'\r\n// import MemoryOfDust from './Catalyst/MemoryOfDust/data'\r\nimport OtherworldlyStory from './Catalyst/OtherworldlyStory/data'\r\n// import PocketGrimoire from './Catalyst/PocketGrimoire/data'\r\nimport PrototypeAmber from './Catalyst/PrototypeAmber/data'\r\n// import RoyalGrimoire from './Catalyst/RoyalGrimoire/data'\r\n// import SacrificialFragments from './Catalyst/SacrificialFragments/data'\r\nimport SkywardAtlas from './Catalyst/SkywardAtlas/data'\r\n// import SolarPearl from './Catalyst/SolarPearl/data'\r\n// import TheWidsith from './Catalyst/TheWidsith/data'\r\n// import ThrillingTalesOfDragonSlayers from './Catalyst/ThrillingTalesOfDragonSlayers/data'\r\n// import TwinNephrite from './Catalyst/TwinNephrite/data'\r\n// import WineAndSong from './Catalyst/WineAndSong/data'\r\n\r\n// import AlleyHunter from './Bow/AlleyHunter/data'\r\n// import AmosBow from './Bow/AmosBow/data'\r\n// import BlackcliffWarbow from './Bow/BlackcliffWarbow/data'\r\n// import CompoundBow from './Bow/CompoundBow/data'\r\n// import EbonyBow from './Bow/EbonyBow/data'\r\n// import ElegyForTheEnd from './Bow/ElegyForTheEnd/data'\r\n// import FavoniusWarbow from './Bow/FavoniusWarbow/data'\r\n// import HuntersBow from './Bow/HuntersBow/data'\r\nimport Messenger from './Bow/Messenger/data'\r\n// import MitternachtsWaltz from './Bow/MitternachtsWaltz/data'\r\n// import PrototypeCrescent from './Bow/PrototypeCrescent/data'\r\n// import RavenBow from './Bow/RavenBow/data'\r\nimport RecurveBow from './Bow/RecurveBow/data'\r\n// import RoyalBow from './Bow/RoyalBow/data'\r\n// import Rust from './Bow/Rust/data'\r\n// import SacrificialBow from './Bow/SacrificialBow/data'\r\n// import SeasonedHuntersBow from './Bow/SeasonedHuntersBow/data'\r\n// import SharpshootersOath from './Bow/SharpshootersOath/data'\r\nimport SkywardHarp from './Bow/SkywardHarp/data'\r\n// import Slingshot from './Bow/Slingshot/data'\r\n// import TheStringless from './Bow/TheStringless/data'\r\nimport TheViridescentHunt from './Bow/TheViridescentHunt/data'\r\n// import WindblumeOde from './Bow/WindblumeOde/data'\r\n\r\nconst sword = {\r\n  AquilaFavonia,\r\n  // BlackcliffLongsword,\r\n  CinnabarSpindle,\r\n  // CoolSteel,\r\n  // DarkIronSword,\r\n  // DullBlade,\r\n  // FavoniusSword,\r\n  // FesteringDesire,\r\n  FilletBlade,\r\n  // FreedomSworn,\r\n  // HarbingerOfDawn,\r\n  // IronSting,\r\n  // LionsRoar,\r\n  PrimordialJadeCutter,\r\n  // PrototypeRancour,\r\n  // RoyalLongsword,\r\n  // SacrificialSword,\r\n  // SilverSword,\r\n  // SkyriderSword,\r\n  SkywardBlade,\r\n  // SummitShaper,\r\n  SwordOfDescension,\r\n  // TheAlleyFlash,\r\n  TheBlackSword,\r\n  TheFlute,\r\n  TravelersHandySword,\r\n}\r\n\r\nconst polearm = {\r\n  // BeginnersProtector,\r\n  // BlackcliffPole,\r\n  // BlackTassel,\r\n  CrescentPike,\r\n  // Deathmatch,\r\n  // DragonsBane,\r\n  DragonspineSpear,\r\n  EngulfingLightning,\r\n  // FavoniusLance,\r\n  Halberd,\r\n  // IronPoint,\r\n  // LithicSpear,\r\n  // PrimordialJadeWingedSpear,\r\n  // PrototypeStarglitter,\r\n  // RoyalSpear,\r\n  SkywardSpine,\r\n  StaffOfHoma,\r\n  // VortexVanquisher,\r\n  // WhiteTassel,\r\n}\r\n\r\nconst catalyst = {\r\n  // ApprenticesNotes,\r\n  // BlackcliffAgate,\r\n  // DodocoTales,\r\n  // EmeraldOrb,\r\n  EverlastingMoonglow,\r\n  EyeOfPerception,\r\n  // FavoniusCodex,\r\n  Frostbearer,\r\n  // LostPrayerToTheSacredWinds,\r\n  // MagicGuide,\r\n  // MappaMare,\r\n  // MemoryOfDust,\r\n  OtherworldlyStory,\r\n  // PocketGrimoire,\r\n  PrototypeAmber,\r\n  // RoyalGrimoire,\r\n  // SacrificialFragments,\r\n  SkywardAtlas,\r\n  // SolarPearl,\r\n  // TheWidsith,\r\n  // ThrillingTalesOfDragonSlayers,\r\n  // TwinNephrite,\r\n  // WineAndSong,\r\n}\r\n\r\nconst claymore = {\r\n  // BlackcliffSlasher,\r\n  // BloodtaintedGreatsword,\r\n  DebateClub,\r\n  // FavoniusGreatsword,\r\n  // FerrousShadow,\r\n  // LithicBlade,\r\n  LuxuriousSeaLord,\r\n  // OldMercsPal,\r\n  PrototypeArchaic,\r\n  // Quartz,\r\n  // Rainslasher,\r\n  RedhornStonethresher,\r\n  // RoyalGreatsword,\r\n  // SacrificialGreatsword,\r\n  // SerpentSpine,\r\n  // SkyriderGreatsword,\r\n  SkywardPride,\r\n  SnowTombedStarsilver,\r\n  // SongOfBrokenPines,\r\n  TheBell,\r\n  // TheUnforged,\r\n  // WasterGreatsword,\r\n  // Whiteblind,\r\n  WhiteIronGreatsword,\r\n  // WolfsGravestone,\r\n}\r\n\r\nconst bow = {\r\n  // AlleyHunter,\r\n  // AmosBow,\r\n  // BlackcliffWarbow,\r\n  // CompoundBow,\r\n  // EbonyBow,\r\n  // ElegyForTheEnd,\r\n  // FavoniusWarbow,\r\n  // HuntersBow,\r\n  Messenger,\r\n  // MitternachtsWaltz,\r\n  // PrototypeCrescent,\r\n  // RavenBow,\r\n  RecurveBow,\r\n  // RoyalBow,\r\n  // Rust,\r\n  // SacrificialBow,\r\n  // SeasonedHuntersBow,\r\n  // SharpshootersOath,\r\n  SkywardHarp,\r\n  // Slingshot,\r\n  // TheStringless,\r\n  TheViridescentHunt,\r\n  // WindblumeOde,\r\n}\r\n\r\nconst formula = {\r\n  ...sword,\r\n  ...bow,\r\n  ...polearm,\r\n  ...catalyst,\r\n  ...claymore,\r\n}\r\nexport default formula","import { FormulaItem } from '../Types/character'\r\nimport { Path } from '../Util/KeyPathUtil'\r\nimport { crawlObject } from '../Util/Util'\r\nimport character from './Characters/formula'\r\nimport weapon from './Weapons/formula'\r\nimport artifact from './Artifacts/formula'\r\nconst formula = {\r\n  character,\r\n  weapon,\r\n  artifact,\r\n}\r\n\r\ncrawlObject(formula, [], f => typeof f === \"function\", (formula, keys) => formula.keys = keys)\r\n\r\nexport default formula\r\nexport type FormulaPath = Path<typeof formula, FormulaItem>\r\nexport type FormulaPathBase = typeof formula","import Adventurer from './Adventurer/data'\r\n// import ArchaicPetra from './ArchaicPetra/data'\r\n// import Berserker from './Berserker/data'\r\n// import BlizzardStrayer from './BlizzardStrayer/data'\r\n// import BloodstainedChivalry from './BloodstainedChivalry/data'\r\n// import BraveHeart from './BraveHeart/data'\r\n// import CrimsonWitchOfFlames from './CrimsonWitchOfFlames/data'\r\n// import DefendersWill from './DefendersWill/data'\r\nimport EmblemOfSeveredFate from './EmblemOfSeveredFate/data'\r\n// import Gambler from './Gambler/data'\r\n// import GladiatorsFinale from './GladiatorsFinale/data'\r\n// import HeartOfDepth from './HeartOfDepth/data'\r\n// import Instructor from './Instructor/data'\r\n// import Lavawalker from './Lavawalker/data'\r\n// import LuckyDog from './LuckyDog/data'\r\n// import MaidenBeloved from './MaidenBeloved/data'\r\n// import MartialArtist from './MartialArtist/data'\r\n// import NoblesseOblige from './NoblesseOblige/data'\r\nimport OceanHuedClam from './OceanHuedClam/data'\r\n// import PaleFlame from './PaleFlame/data'\r\n// import PrayersForDestiny from './PrayersForDestiny/data'\r\n// import PrayersForIllumination from './PrayersForIllumination/data'\r\n// import PrayersForWisdom from './PrayersForWisdom/data'\r\n// import PrayersToSpringtime from './PrayersToSpringtime/data'\r\n// import ResolutionOfSojourner from './ResolutionOfSojourner/data'\r\n// import RetracingBolide from './RetracingBolide/data'\r\n// import Scholar from './Scholar/data'\r\n// import ShimenawasReminiscence from './ShimenawasReminiscence/data'\r\n// import TenacityOfTheMillelith from './TenacityOfTheMillelith/data'\r\n// import TheExile from './TheExile/data'\r\n// import ThunderingFury from './ThunderingFury/data'\r\n// import Thundersoother from './Thundersoother/data'\r\n// import TinyMiracle from './TinyMiracle/data'\r\nimport TravelingDoctor from './TravelingDoctor/data'\r\n// import ViridescentVenerer from './ViridescentVenerer/data'\r\n// import WanderersTroupe from './WanderersTroupe/data'\r\n// import { IArtifactSheets } from '../../Types/artifact/data'\r\nconst artifacts = {\r\n  Adventurer,\r\n  // ArchaicPetra,\r\n  // Berserker,\r\n  // BlizzardStrayer,\r\n  // BloodstainedChivalry,\r\n  // BraveHeart,\r\n  // CrimsonWitchOfFlames,\r\n  // DefendersWill,\r\n  EmblemOfSeveredFate,\r\n  // Gambler,\r\n  // GladiatorsFinale,\r\n  // HeartOfDepth,\r\n  // Instructor,\r\n  // Lavawalker,\r\n  // LuckyDog,\r\n  // MaidenBeloved,\r\n  // MartialArtist,\r\n  // NoblesseOblige,\r\n  OceanHuedClam,\r\n  // PaleFlame,\r\n  // PrayersForDestiny,\r\n  // PrayersForIllumination,\r\n  // PrayersForWisdom,\r\n  // PrayersToSpringtime,\r\n  // ResolutionOfSojourner,\r\n  // RetracingBolide,\r\n  // Scholar,\r\n  // ShimenawasReminiscence,\r\n  // TenacityOfTheMillelith,\r\n  // TheExile,\r\n  // ThunderingFury,\r\n  // Thundersoother,\r\n  // TinyMiracle,\r\n  TravelingDoctor,\r\n  // ViridescentVenerer,\r\n  // WanderersTroupe,\r\n} as const\r\nexport default artifacts","import { ISubFormula } from \"../../../Types/character\"\r\nimport { basicHealingFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst formula: ISubFormula = {\r\n  regen: stats => basicHealingFormula(30, \"finalHP\")\r\n} as const\r\nexport default formula","import { ISubFormula } from \"../../../Types/character\"\r\n\r\nconst formula: ISubFormula = {\r\n  s4: stats => [s => Math.min((s.premod?.enerRech_ ?? s.enerRech_), 300) * 0.25, [\"enerRech_\"]]\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../Types/character\"\r\n\r\nconst formula: ISubFormula = {\r\n  dmg: stats => [s => 30000 * 0.9 * s.physical_enemyRes_multi, [\"physical_enemyRes_multi\"]]\r\n} as const\r\nexport default formula","import { ISubFormula } from \"../../../Types/character\"\r\nimport { basicHealingFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst formula: ISubFormula = {\r\n  regen: stats => basicHealingFormula(30, \"finalHP\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  heal: [100, 115, 130, 145, 160],\r\n  dmg: [200, 230, 260, 290, 320]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\"),\r\n  heal: stats => {\r\n    const hp = data.heal[stats.weapon.refineIndex] / 100\r\n    return [s => (hp * s.finalATK) * s.heal_multi, [\"finalATK\", \"heal_multi\"]]\r\n  },\r\n}\r\nexport default formula","import { getTalentStatKey } from \"../../../../Build/Build\";\r\nimport { ISubFormula } from \"../../../../Types/character\";\r\nexport const data = {\r\n  defConv: [40, 50, 60, 70, 80],\r\n} as const\r\n\r\nconst formula: ISubFormula = {\r\n  skill: stats => {\r\n    const val = data.defConv[stats.weapon.refineIndex] / 100\r\n    const statKey = getTalentStatKey(\"skill\", stats) + \"_multi\"\r\n    return [s => val * s.finalDEF * s[statKey], ['finalDEF', statKey]]\r\n  },\r\n} as const\r\nexport default formula\r\n","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [240, 280, 320, 360, 400]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nexport const data = {\r\n  hp_atk: [1.2, 1.5, 1.8, 2.1, 2.4]\r\n}\r\n\r\nconst formula: ISubFormula = {\r\n  bonus: stats => [s => (s.modStats?.finalHP ?? s.finalHP) * data.hp_atk[stats.weapon.refineIndex] / 100, ['finalHP']],\r\n}\r\nexport default formula\r\n","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [20, 25, 30, 35, 40]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(200, stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\n\r\nexport const data = {\r\n  dmg_: [20, 25, 30, 35, 40],\r\n  heal: [60, 70, 80, 90, 100]\r\n}\r\nconst formula: ISubFormula = {\r\n  regen: stats => {\r\n    const hp = data.heal[stats.weapon.refineIndex] / 100\r\n    return [s => (hp * s.finalATK) * s.heal_multi, [\"finalATK\", \"heal_multi\"]]\r\n  },\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  vals: [100, 125, 150, 175, 200]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.vals[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\n\r\nexport const data = {\r\n  heal: [1, 1.25, 1.5, 1.75, 2]\r\n}\r\nconst formula: ISubFormula = {\r\n  heal: stats => {\r\n    const hp = data.heal[stats.weapon.refineIndex] / 100\r\n    return [s => (hp * s.finalHP) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n  },\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [20, 25, 30, 35, 40]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [80, 95, 110, 125, 140],\r\n  dmgc: [200, 240, 280, 320, 360]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\"),\r\n  dmgc: stats => basicDMGFormula(data.dmgc[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nexport const data = {\r\n  enerRechConv: [28, 35, 42, 49, 56],\r\n  enerRechMax: [80, 90, 100, 110, 120]\r\n} as const\r\n\r\nconst formula: ISubFormula = {\r\n  conv: stats => [s => Math.min(((s.premod?.enerRech_ ?? s.enerRech_) - 100) * data.enerRechConv[stats.weapon.refineIndex] / 100, data.enerRechMax[stats.weapon.refineIndex]), ['enerRech_']],\r\n} as const\r\nexport default formula\r\n","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [160, 200, 240, 280, 320]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg:  [40, 55, 70, 85, 100]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nexport const data = {\r\n  hp_atk: [0.8, 1, 1.2, 1.4, 1.6],\r\n  hp_atk_add: [1, 1.2, 1.4, 1.6, 1.8]\r\n}\r\n\r\nconst formula: ISubFormula = {\r\n  esj: stats => [s => (s.modStats?.finalHP ?? s.finalHP) * data.hp_atk[stats.weapon.refineIndex] / 100, ['finalHP']],\r\n  esjadd: stats => [s => (s.modStats?.finalHP ?? s.finalHP) * data.hp_atk_add[stats.weapon.refineIndex] / 100, ['finalHP']],\r\n}\r\nexport default formula\r\n","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [60, 75, 90, 105, 120]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [100, 125, 150, 175, 200],\r\n} as const\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\"),\r\n} as const\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [240, 300, 360, 420, 480]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { getTalentStatKey } from \"../../../../Build/Build\";\r\nimport { ISubFormula } from \"../../../../Types/character\";\r\nexport const data = {\r\n  defConv: [40, 50, 60, 70, 80],\r\n} as const\r\n\r\nconst formula: ISubFormula = {\r\n  normal: stats => {\r\n    const val = data.defConv[stats.weapon.refineIndex] / 100\r\n    const statKey = getTalentStatKey(\"normal\", stats) + \"_multi\"\r\n    return [s => val * s.finalDEF * s[statKey], ['finalDEF', statKey]]\r\n  },\r\n  charged: stats => {\r\n    const val = data.defConv[stats.weapon.refineIndex] / 100\r\n    const statKey = getTalentStatKey(\"charged\", stats) + \"_multi\"\r\n    return [s => val * s.finalDEF * s[statKey], ['finalDEF', statKey]]\r\n  },\r\n} as const\r\nexport default formula\r\n","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [80, 100, 120, 140, 160]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [80, 95, 110, 125, 140],\r\n  dmgc: [200, 240, 280, 320, 360]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\"),\r\n  dmgc: stats => basicDMGFormula(data.dmgc[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\n\r\nexport const data = {\r\n  shield: [20, 23, 26, 29, 32]\r\n}\r\nconst formula: ISubFormula = {\r\n  shield: stats => {\r\n    const hpMulti = data.shield[stats.weapon.refineIndex] / 100\r\n    return [s => hpMulti * s.finalHP * (1 + s.shield_ / 100) * 1.5, [\"finalHP\", \"shield_\"]]\r\n  }\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\n\r\nexport const data = {\r\n  heal: [8, 10, 12, 14, 16]\r\n}\r\nconst formula: ISubFormula = {\r\n  heal: stats => {\r\n    const hp = data.heal[stats.weapon.refineIndex] / 100\r\n    return [s => (hp * s.finalHP) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n  },\r\n}\r\nexport default formula","import { getTalentStatKey } from \"../../../../Build/Build\";\r\nimport { ISubFormula } from \"../../../../Types/character\";\r\nexport const data = {\r\n  hp_conv: [1, 1.5, 2, 2.5, 3]\r\n} as const\r\n\r\nconst formula: ISubFormula = {\r\n  norm: stats => {\r\n    const val = data.hp_conv[stats.weapon.refineIndex] / 100\r\n    const statKey = getTalentStatKey(\"elemental\", stats) + \"_multi\"\r\n    return [s => val * s.finalHP * s[statKey], ['finalHP', statKey]]\r\n  },\r\n} as const\r\nexport default formula\r\n","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [240, 270, 300, 330, 360]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [80, 95, 110, 125, 140],\r\n  dmgc: [200, 240, 280, 320, 360]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\"),\r\n  dmgc: stats => basicDMGFormula(data.dmgc[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\n\r\nexport const data = {\r\n  heal: [1, 1.25, 1.5, 1.75, 2]\r\n}\r\nconst formula: ISubFormula = {\r\n  heal: stats => {\r\n    const hp = data.heal[stats.weapon.refineIndex] / 100\r\n    return [s => (hp * s.finalHP) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n  },\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\n\r\nexport const data = {\r\n  heal: [4, 4.5, 5, 5.5, 6]\r\n}\r\nconst formula: ISubFormula = {\r\n  heal: stats => {\r\n    const hp = data.heal[stats.weapon.refineIndex] / 100\r\n    return [s => (hp * s.finalHP) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n  },\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [160, 200, 240, 280, 320]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [100, 125, 150, 175, 200]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\n\r\nexport const data = {\r\n  heal: [8, 10, 12, 14, 16]\r\n}\r\nconst formula: ISubFormula = {\r\n  heal: stats => {\r\n    const hp = data.heal[stats.weapon.refineIndex] / 100\r\n    return [s => (hp * s.finalHP) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n  },\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(125, stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  vals: [40, 50, 60, 70, 80]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.vals[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula"],"sourceRoot":""}