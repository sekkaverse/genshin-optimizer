{"version":3,"sources":["Conditional/Resonance.tsx","Components/Character/LocationName.tsx","Components/ToggleButton/WeaponToggle.tsx","ReactHooks/useWeapon.tsx","Util/SortByFilters.ts","Components/SortByButton.tsx","Artifact/RollProbability.ts","Artifact/PercentBadge.tsx","Components/Weapon/WeaponSelectionModal.tsx","Weapon/WeaponCard.tsx","Artifact/ArtifactCard.tsx","ReactHooks/useArtifact.tsx","Components/Character/CharacterSelectionModal.tsx","Util/CharacterSort.ts","Weapon/WeaponStatsCard.tsx","Weapon/WeaponDisplayCard.tsx","Components/SolidColoredToggleButton.tsx","Components/ToggleButton/ElementToggle.tsx","Components/FormulaCalcCard.tsx","Character/CharacterDisplay/CharacterArtifactPane.tsx","Character/CharacterDisplay/CharacterOverviewPane.tsx","Character/CharacterDisplay/CharacterTalentPane.tsx","Character/CharacterDisplay/CharacterTeamBuffsPane.tsx","Character/CharacterDisplayCard.tsx"],"names":["tr","strKey","ns","key18","resonanceSheets","header","title","action","StatIcon","anemo","geo","pyro","hydro","cryo","electro","description","canShow","stats","Set","teamStats","map","t","characterEle","filter","e","size","conditionals","key","partyBuff","maxStack","Object","fromEntries","allElements","ele","length","atk_","fields","text","value","unit","incHeal_","name","critRate_","staminaDec_","moveSPD_","skillCDRed_","shield_","dmg_","geo_enemyRes_","sgt","LocationName","location","useTranslation","characterSheet","usePromise","CharacterSheet","get","component","nameWIthIcon","sx","verticalAlign","WeaponToggle","onChange","props","cb","useCallback","newVal","exclusive","allWeaponTypeKeys","wt","src","Assets","weaponTypes","useWeapon","weaponID","database","useContext","DatabaseContext","useState","_getWeapon","weapon","setWeapon","useEffect","followWeapon","undefined","sortFunction","sortby","ascending","configs","Sort","a","b","config","aV","getValue","bV","localeCompare","filterOption","diff","tieBreaker","filterFunction","filterOptions","filterConfigs","obj","entries","every","optionKey","optionVal","SortByButton","sortKeys","onChangeAsc","i18nKey","selected","disabled","onClick","startIcon","icon","faSortAmountDownAlt","faSortAmountUp","className","allWeights","fWeight","hp","atk","def","hp_","def_","eleMas","enerRech_","critDMG_","pFillerSeq","populatePFillerSeq","prefix","prob","sumProb","current","i","layeredAssignment","3","4","6","cnr","Array","fill","_","n","result","r","push","pNExtra","last","next","forEach","x","array","accu","reduce","probability","artifact","_target","rarity","NaN","level","substats","target","required","keys","numFillerSlots","mainStatKey","maxLevel","ArtifactMainStatsData","delete","has","numUpgradeRolls","Artifact","rollsRemaining","Math","max","ceil","maxSubstatValues","minTotalUpgrades","targetEntries","filler","minUpgrade","reverse","additionalUpgradeRolls","targetIndex","m","M","rolls","extra","pExtra","_remaining","remaining","parseInt","pRolls","pow","index","mainStat","mainStatRatio","pFillerRolls","numUnusedSubstats","pSuffixFillerSeq","ratio","requiredCount","total","crawlObject","path","currentCount","sum","calculatePFillerRolls","values","PercentBadge","valid","clamp","floor","toFixed","badgeColor","color","WeaponSelectionModal","show","onHide","onSelect","propWeaponFilter","weaponFilter","weaponSheets","WeaponSheet","getAll","setWeaponfilter","weaponIdList","allWeaponKeys","wKey","weaponType","sort","open","onClose","py","container","item","flexGrow","spacing","weaponKey","weaponSheet","lg","md","height","display","img","width","px","variant","stars","colored","large","WeaponCard","weaponId","onEdit","onDelete","canEquip","cs","weaponTypeKey","actionWrapperFunc","children","equipOnChar","charKey","setWeaponLocation","ascension","refinement","id","lock","weaponMainVal","getMainStatValue","Stat","fixedUnit","weaponSubKey","getSubStatKey","weaponSubVal","getSubStatValue","statMap","passiveName","imgAwaken","fallback","minHeight","condition","wrapper","flexDirection","avatar","fontSize","titleTypographyProps","updateWeapon","flexWrap","pl","ascensionMaxLevel","maxWidth","alignContent","mt","statKey","statVal","getStatUnit","getStatName","xs","flexShrink","noUnselect","inventory","mr","faEdit","faTrashAlt","allSubstatFilter","allSubstats","ArtifactCard","artifactId","artifactObj","mainStatAssumptionLevel","effFilter","probabilityFilter","databaseArtifact","artifactID","_getArt","setArtifact","followArt","useArtifact","sheet","ArtifactSheet","setKey","editable","localDatabase","art","slotKey","exclude","mainStatLevel","min","levelVariant","mainStatVal","valueStringWithUnit","mainStatValue","getArtifactEfficiency","currentEfficiency","maxEfficiency","artifactValid","slotName","getSlotName","slotDesc","getSlotDesc","slotDescTooltip","BootstrapTooltip","placement","Typography","faInfoCircle","setEffects","setDescTooltip","setNumKey","SqBadge","setNum","setEffectDesc","Skeleton","CardLight","CardContent","pt","pb","pr","Box","alignItems","Chip","label","IconButton","updateArt","Lock","LockOpen","Grid","mb","alignSelf","CardMedia","image","slotIcons","stat","numRolls","rollColor","efficiency","effOpacity","statName","opacity","my","CardActions","CharacterDropdownButton","setArtLocation","ButtonGroup","Button","Tooltip","arrow","faBan","faChartLine","defaultSortKeys","CharacterSelectionModal","newFirst","useMemo","sortBy","setsortBy","setascending","elementalFilter","setelementalFilter","setweaponFilter","characterSheets","sortConfigs","characterSortConfigs","characterFilterConfigs","characterKeyList","allCharacterKeys","cKey","_getChar","element","characterKey","CharacterBtn","sheets","useSheets","character","Character","calculateBuild","thumbImg","elementKey","getLevelString","constellation","tlvl","auto","skillBoost","skill","burstBoost","burst","characterSortKeys","new","ck","WeaponStatsCard","statsVals","s","statsToFields","CardDark","FieldDisplay","field","WeaponDisplayCard","propWeaponId","charData","footer","buildContextObj","buildContext","weaponDispatch","newWeapon","setLevel","findIndex","ascenML","setAscension","lowerAscension","build","newBuild","equippedBuild","refineIndex","ws","initialWeaponFilter","showModal","setshowModal","k","DropdownButton","MenuItem","Divider","bgcolor","palette","contentLight","main","CustomNumberInput","startAdornment","inputProps","textAlign","ambiguousLevel","milestoneLevels","lv","as","lvlstr","CloseButton","SwapBtn","onChangeId","substatKey","weaponDisplayMainVal","weaponDisplaySubVal","weaponPassiveName","weaponBonusStats","sections","document","gap","minWidth","borderRadius","process","gutterBottom","passiveDescription","Provider","compareBuild","setCompareBuild","DocumentDisplay","setShow","close","clickHandler","weapons","dbWeapon","SwapHoriz","ModalWrapper","ImgIcon","sm","SolidColoredToggleButton","styled","ToggleButton","shouldForwardProp","prop","theme","baseColor","selectedColor","backgroundColor","contrastText","dark","ElementToggle","ToggleButtonGroup","lineHeight","uncoloredEleIcons","FormulaCalcCard","expanded","setexpanded","toggle","ExpandButton","expand","aria-expanded","aria-label","ExpandMore","Collapse","in","timeout","unmountOnExit","CalculationDisplay","displayStatKeys","getDisplayStatKeys","sectionKey","getFormulaTargetsDisplayHeading","CardHeader","fieldIndex","isArray","FormulaCalculationField","fieldKeys","subFormulaKeys","getPrintableFormulaStatKeyList","GetDependencies","modifiers","Boolean","Accordion","AccordionSummary","expandIcon","printStat","AccordionDetails","subKey","formula","Formula","formulaField","fieldText","getTalentFieldValue","fieldVariant","fieldFormulaText","fieldFixed","fieldUnit","fieldFormula","fieldFormulaDependency","fieldValue","CharacterArtifactPane","history","useHistory","statKeys","edit","artid","pathname","artToEditId","artifactSheets","useForceUpdate","followAnyArt","equipArts","window","confirm","equippedArtifacts","equipArtifacts","unequipArts","objectFromKeyMap","allSlotKeys","StatDisplayComponent","statsDisplayKeys","SolidToggleButtonGroup","v","Card","p","warning","setToSlots","setNumKeyArr","SetEffectDisplay","CharacterOverviewPane","characterDispatch","useCharacterReducer","cardImg","tKey","Badge","badgeContent","overlap","anchorOrigin","vertical","horizontal","padding","getTalentOfKey","constellationName","cursor","equippedWeapon","MainStatsCards","additionalKeys","editStatKeys","otherStatKeys","allElementsWithPhy","miscStatkeys","resetString","statBreakpoint","specializedStatKey","getSpecializedStat","specializedStatVal","getSpecializedStatVal","specializedStatUnit","displayNewBuildProps","TeamBuffDisplay","StatDisplayCard","content","columnSpacing","rowSpacing","StatDisplay","justifyContent","editContent","characterStatKeys","defVal","round","getBase","StatInput","placeholder","getStatNameRaw","bonusStats","defaultValue","percent","onValueChange","type","onReset","getStatNameWithPercent","setedit","faSave","CharacterTalentPane","ReactionDisplay","tText","SkillDisplayCard","talentKey","subtitle","asc","enabled","style","onClickTitle","ReactionComponents","superconduct_hit","sKey","electrocharged_hit","overloaded_hit","pyro_swirl_hit","swirlEleToDisplay","setele","shattered_hit","information","faQuestionCircle","crystalize_hit","crystalizeEleToDisplay","charEleKey","eleInterArr","ElementToReactionKeys","includes","Ele","talentLimits","talent","actionWrapeprFunc","CardActionArea","levelBoost","talentLvlKey","fullWidth","newTalentLevelKey","talentSheet","ConditionalWrapper","CharacterTeamBuffsPane","team","ResonanceDisplay","tStats","TeammateDisplay","doc","cond","ConditionalDisplay","conditional","val","conditionalValues","onClickHandler","useCharSelectionCallback","condCharStats","unSelectText","unSelectIcon","PersonAdd","CharacterCard","onClickHeader","artifactChildren","CharArtifactCondDisplay","weaponChildren","CharWeaponCondDisplay","CharTalentCondDisplay","artSetKey","slotkeys","Conditional","partyConditionals","flatMap","conds","c","condCharKey","condCharKeyHashed","charConds","condKey","TabPanel","other","role","hidden","aria-labelledby","CharacterDisplayCard","propNewBuild","tabName","isFlex","propCompareBuild","useCharacter","dbDirty","setDbDirty","teammate1","teammate2","teammate3","followChar","newChar","initialCharacter","updateChar","defaultInitialWeapon","createWeapon","deepCloneStats","tab","settab","onTab","CharSelectDropdown","Tabs","Tab","setCharacter","HeaderIconDisplay","ThumbSide","thumbImgSide","contentDark","talents","eleKey"],"mappings":"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","file":"static/js/19.f5f3c6f9.chunk.js","sourcesContent":["import StatIcon from \"../Components/StatIcon\"\r\nimport { Translate } from \"../Components/Translate\"\r\nimport { sgt } from \"../Data/Characters/SheetUtil\"\r\nimport { allElements } from \"../Types/consts\"\r\nimport IConditional from \"../Types/IConditional\"\r\nimport { BasicStats } from \"../Types/stats\"\r\nconst tr = (strKey: string) => <Translate ns=\"resonance_gen\" key18={strKey} />\r\n\r\ntype resonanceDoc = {\r\n  header: IConditional[\"header\"],\r\n  description: Displayable,\r\n  canShow: (stats: BasicStats) => boolean,\r\n  conditionals: IConditional[]\r\n}\r\nconst resonanceSheets: resonanceDoc[] = [{// Protective Canopy\r\n  header: {\r\n    title: tr(\"ProtectiveCanopy.name\"),\r\n    action: <span>{StatIcon.anemo} {StatIcon.geo} {StatIcon.pyro} {StatIcon.hydro} {StatIcon.cryo} {StatIcon.electro} x4</span>\r\n  },\r\n  description: tr(\"ProtectiveCanopy.desc\"),\r\n  canShow: stats => (new Set([...stats.teamStats.map(t => t?.characterEle ?? \"\"), stats.characterEle].filter(e => e))).size === 4,\r\n  conditionals: [{\r\n    key: \"pc\",\r\n    partyBuff: \"partyAll\",\r\n    canShow: stats => (new Set([...stats.teamStats.map(t => t?.characterEle ?? \"\"), stats.characterEle])).size === 4,\r\n    maxStack: 0,\r\n    stats: Object.fromEntries([...allElements, \"physical\"].map(ele => [`${ele}_res_`, 15]))\r\n  }]\r\n}, {// Fervent Flames\r\n  header: {\r\n    title: tr(\"FerventFlames.name\"),\r\n    action: <span>{StatIcon.pyro} {StatIcon.pyro}</span>,\r\n  },\r\n  description: tr(\"FerventFlames.desc\"),\r\n  canShow: stats => [...stats.teamStats.map(t => t?.characterEle ?? \"\"), stats.characterEle].filter(e => e === \"pyro\").length >= 2,\r\n  conditionals: [{\r\n    key: \"ff\",\r\n    partyBuff: \"partyAll\",\r\n    canShow: stats => [...stats.teamStats.map(t => t?.characterEle ?? \"\"), stats.characterEle].filter(e => e === \"pyro\").length >= 2,\r\n    maxStack: 0,\r\n    stats: {\r\n      atk_: 25,\r\n    },\r\n    fields: [{\r\n      text: \"Cryo affect Duration\",\r\n      value: -40,\r\n      unit: \"%\"\r\n    }]\r\n  }]\r\n}, {// Soothing Waters\r\n  header: {\r\n    title: tr(\"SoothingWater.name\"),\r\n    action: <span>{StatIcon.hydro} {StatIcon.hydro}</span>,\r\n  },\r\n  canShow: stats => [...stats.teamStats.map(t => t?.characterEle ?? \"\"), stats.characterEle].filter(e => e === \"hydro\").length >= 2,\r\n  description: tr(\"SoothingWater.desc\"),\r\n  conditionals: [{\r\n    key: \"sw\",\r\n    maxStack: 0,\r\n    canShow: stats => [...stats.teamStats.map(t => t?.characterEle ?? \"\"), stats.characterEle].filter(e => e === \"hydro\").length >= 2,\r\n    partyBuff: \"partyAll\",\r\n    stats: {\r\n      incHeal_: 30,\r\n    },\r\n    fields: [{\r\n      text: \"Pyro affect Duration\",\r\n      value: -40,\r\n      unit: \"%\"\r\n    }]\r\n  }]\r\n}, {\r\n  header: {\r\n    title: tr(\"ShatteringIce.name\"),\r\n    action: <span>{StatIcon.cryo} {StatIcon.cryo}</span>,\r\n  },\r\n  canShow: stats => [...stats.teamStats.map(t => t?.characterEle ?? \"\"), stats.characterEle].filter(e => e === \"cryo\").length >= 2,\r\n  description: tr(\"ShatteringIce.desc\"),\r\n  conditionals: [{\r\n    key: \"si\",// Shattering Ice\r\n    name: \"Against enemies that are Frozen or affected by Cryo\",\r\n    canShow: stats => [...stats.teamStats.map(t => t?.characterEle ?? \"\"), stats.characterEle].filter(e => e === \"cryo\").length >= 2,\r\n    partyBuff: \"partyAll\",\r\n    stats: {\r\n      critRate_: 15,\r\n    },\r\n    fields: [{\r\n      text: \"Electro affect Duration\",\r\n      value: -40,\r\n      unit: \"%\"\r\n    }]\r\n  },]\r\n}, {\r\n  header: {// High Voltage\r\n    title: tr(\"HighVoltage.name\"),\r\n    action: <span>{StatIcon.electro} {StatIcon.electro}</span>,\r\n  },\r\n  description: tr(\"HighVoltage.desc\"),\r\n  canShow: stats => [...stats.teamStats.map(t => t?.characterEle ?? \"\"), stats.characterEle].filter(e => e === \"electro\").length >= 2,\r\n  conditionals: [{\r\n    key: \"hv\",\r\n    partyBuff: \"partyAll\",\r\n    maxStack: 0,\r\n    canShow: stats => [...stats.teamStats.map(t => t?.characterEle ?? \"\"), stats.characterEle].filter(e => e === \"electro\").length >= 2,\r\n    fields: [{\r\n      text: \"Hydro affect Duration\",\r\n      value: -40,\r\n      unit: \"%\"\r\n    }]\r\n  }]\r\n}, {\r\n  header: {// Impetuous Winds\r\n    title: tr(\"ImpetuousWinds.name\"),\r\n    action: <span>{StatIcon.anemo} {StatIcon.anemo}</span>,\r\n  },\r\n  description: tr(\"ImpetuousWinds.desc\"),\r\n  canShow: stats => [...stats.teamStats.map(t => t?.characterEle ?? \"\"), stats.characterEle].filter(e => e === \"anemo\").length >= 2,\r\n  conditionals: [{\r\n    key: \"iw\",\r\n    partyBuff: \"partyAll\",\r\n    canShow: stats => [...stats.teamStats.map(t => t?.characterEle ?? \"\"), stats.characterEle].filter(e => e === \"anemo\").length >= 2,\r\n    maxStack: 0,\r\n    stats: {\r\n      staminaDec_: 15,\r\n      moveSPD_: 10,\r\n      skillCDRed_: 5,\r\n    }\r\n  }]\r\n}, {\r\n  header: {\r\n    title: tr(\"EnduringRock.name\"),\r\n    action: <span>{StatIcon.geo} {StatIcon.geo}</span>,\r\n  },\r\n  description: tr(\"EnduringRock.desc\"),\r\n  canShow: stats => [...stats.teamStats.map(t => t?.characterEle ?? \"\"), stats.characterEle].filter(e => e === \"geo\").length >= 2,\r\n  conditionals: [{\r\n    key: \"er\", // Enduring Rock\r\n    name: \"Increases shield strength\",\r\n    canShow: stats => [...stats.teamStats.map(t => t?.characterEle ?? \"\"), stats.characterEle].filter(e => e === \"geo\").length >= 2,\r\n    partyBuff: \"partyAll\",\r\n    stats: {\r\n      shield_: 15,\r\n    }\r\n  }, {\r\n    key: \"ers\", // Enduring Rock\r\n    name: \"characters protected by a shield\",\r\n    canShow: stats => [...stats.teamStats.map(t => t?.characterEle ?? \"\"), stats.characterEle].filter(e => e === \"geo\").length >= 2,\r\n    partyBuff: \"partyAll\",\r\n    stats: {\r\n      dmg_: 15,\r\n    }\r\n  }, {\r\n    key: \"erd\", // Enduring Rock\r\n    name: \"characters protected by a shield: dealing DMG to enemies\",\r\n    canShow: stats => [...stats.teamStats.map(t => t?.characterEle ?? \"\"), stats.characterEle].filter(e => e === \"geo\").length >= 2,\r\n    partyBuff: \"partyAll\",\r\n    stats: {\r\n      geo_enemyRes_: -20,\r\n    },\r\n    fields: [{\r\n      text: sgt(\"duration\"),\r\n      value: 15,\r\n      unit: \"s\"\r\n    }],\r\n  }]\r\n}]\r\n\r\n\r\nexport default resonanceSheets\r\n","import { BusinessCenter } from \"@mui/icons-material\";\r\nimport { Typography } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CharacterSheet from \"../../Character/CharacterSheet\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\n\r\nexport default function LocationName({ location }) {\r\n  const { t } = useTranslation(\"ui\");\r\n  const characterSheet = usePromise(CharacterSheet.get(location ?? \"\"), [location])\r\n  return <Typography component=\"span\">\r\n    {characterSheet?.name ? characterSheet.nameWIthIcon : <span><BusinessCenter sx={{ verticalAlign: \"text-bottom\" }} /> {t`inventory`}</span>}\r\n  </Typography>\r\n\r\n}","import { ToggleButton } from \"@mui/material\";\r\nimport { useCallback } from \"react\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport { allWeaponTypeKeys, WeaponTypeKey } from \"../../Types/consts\";\r\nimport ImgIcon from \"../Image/ImgIcon\";\r\nimport SolidToggleButtonGroup, { SolidToggleButtonGroupProps } from \"../SolidToggleButtonGroup\";\r\ntype WeaponToggleProps = Omit<SolidToggleButtonGroupProps, \"onChange\" | \"value\"> & {\r\n  onChange: (value: WeaponTypeKey | \"\") => void\r\n  value: WeaponTypeKey | \"\"\r\n}\r\nexport default function WeaponToggle({ value, onChange, ...props }: WeaponToggleProps) {\r\n  const cb = useCallback((e, newVal) => onChange(newVal || \"\"), [onChange])\r\n  return <SolidToggleButtonGroup exclusive onChange={cb} value={value || allWeaponTypeKeys} {...props}>\r\n    {allWeaponTypeKeys.map(wt => <ToggleButton key={wt} value={wt}>\r\n      <ImgIcon src={Assets.weaponTypes?.[wt]} size={2} />\r\n    </ToggleButton>)}\r\n  </SolidToggleButtonGroup>\r\n}","import { useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\n\r\nexport default function useWeapon(weaponID: string | undefined = \"\") {\r\n  const database = useContext(DatabaseContext)\r\n  const [weapon, setWeapon] = useState(database._getWeapon(weaponID))\r\n  useEffect(() => setWeapon(database._getWeapon(weaponID)), [database, weaponID])\r\n  useEffect(() =>\r\n    weaponID ? database.followWeapon(weaponID, setWeapon) : undefined,\r\n    [weaponID, setWeapon, database])\r\n  return weapon\r\n}","type SortConfig<T> = {\r\n  getValue: (id: T) => number | string\r\n  tieBreaker?: string\r\n}\r\nexport type SortConfigs<Keys extends string, T> = Record<Keys, SortConfig<T>>\r\n\r\nexport function sortFunction<Keys extends string, T>(sortby: string, ascending: boolean, configs: SortConfigs<Keys, T>) {\r\n  function Sort(a: T, b: T, ascending: boolean, config: SortConfig<T>) {\r\n    const aV = config.getValue(a)\r\n    const bV = config.getValue(b)\r\n    let diff = 0\r\n    if (typeof aV === \"string\" && typeof bV === \"string\")\r\n      diff = aV.localeCompare(bV)\r\n    else\r\n      diff = ((bV as number) - (aV as number))\r\n    return (ascending ? -1 : 1) * diff\r\n  }\r\n  return (a: T, b: T) => {\r\n    if (!configs[sortby]) return 0\r\n    const filterOption = configs[sortby]\r\n    let diff = Sort(a, b, ascending, filterOption)\r\n    if (!diff && filterOption.tieBreaker && configs[filterOption.tieBreaker])\r\n      diff = Sort(a, b, ascending, configs[filterOption.tieBreaker])\r\n    return diff\r\n  }\r\n}\r\n\r\ntype FilterConfig<T> = (obj: T, filter: any) => boolean\r\nexport type FilterConfigs<Keys extends string, T> = Record<Keys, FilterConfig<T>>\r\nexport function filterFunction<Keys extends string, T>(filterOptions: Record<Keys, any>, filterConfigs: FilterConfigs<Keys, T>) {\r\n  return (obj: T) => Object.entries(filterOptions).every(([optionKey, optionVal]) => filterConfigs[optionKey as any](obj, optionVal))\r\n}","import { faSortAmountDownAlt, faSortAmountUp } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Button, ButtonGroup, ButtonGroupProps, MenuItem } from \"@mui/material\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\nimport DropdownButton from \"./DropdownMenu/DropdownButton\";\r\n\r\ntype SortByButtonProps = ButtonGroupProps & {\r\n  sortKeys: string[]\r\n  value: string\r\n  onChange: (value: string) => void\r\n  ascending: boolean\r\n  onChangeAsc: (value: boolean) => void\r\n}\r\n// Assumes that all the sortKeys has corresponding translations in ui.json sortMap\r\nexport default function SortByButton({ sortKeys, value, onChange, ascending, onChangeAsc, ...props }: SortByButtonProps) {\r\n  const { t } = useTranslation(\"ui\")\r\n  return <ButtonGroup {...props} >\r\n    <DropdownButton title={<Trans t={t} i18nKey=\"sortByFormat\" value={t(`sortMap.${value}`) as any}>Sort By: {{ value: t(`sortMap.${value}`) }}</Trans>}>\r\n      {sortKeys.map(key =>\r\n        <MenuItem key={key} selected={value === key} disabled={value === key} onClick={() => onChange(key)}>{t(`sortMap.${key}`) as any}</MenuItem>)}\r\n    </DropdownButton>\r\n    <Button onClick={() => onChangeAsc(!ascending)} startIcon={<FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />}>\r\n      {ascending ? <Trans t={t} i18nKey=\"ascending\" >Ascending</Trans> : <Trans t={t} i18nKey=\"descending\" >Descending</Trans>}\r\n    </Button>\r\n  </ButtonGroup>\r\n}","import { IArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact'\r\nimport { crawlObject, layeredAssignment } from '../Util/Util'\r\nimport Artifact from './Artifact'\r\nimport ArtifactMainStatsData from './artifact_main_gen.json'\r\n\r\n// We separate rolls into \"filler rolls\" that occurs when there are less than 4 substats,\r\n// and \"upgrade rolls\" that occurs when all 4 substats are added. They have different\r\n// probability distribution and require separate consideration.\r\n\r\n// Notations for the remainder of this file.\r\n//\r\n// i, j, k := substat\r\n// E(i) := Extra substat that rolls into substat i\r\n// T(i) := Targetted (extra) substat for substat i\r\n// Nf(i) := # of filler roll into substat i (0 <= Nfi <= 1)\r\n// Nu(i) := # of upgrade rolls into substat i\r\n//\r\n// E := { E1, E2, ... }\r\n// T := { T1, T2, ... }\r\n// N(i) := Nf(i) + Nu(i)\r\n// Nf := Nf(1) + Nf(2) + ...\r\n// Nu := Nu(1) + Nu(2) + ...\r\n//\r\n// For example, if the artifact has 14 atk, and the target atk is 30,\r\n// in a scenario where we roll 2 rolls of 16 and 18 into atk, then\r\n// \r\n// i = atk, E(atk) = 16 + 18, T(atk) = 30 - 14, Nf(atk) = 0 roll, Nu(atk) = 2 rolls\r\n\r\nconst allWeights = [3, 4, 6] as const\r\ntype Weight = typeof allWeights[number]\r\n\r\n/**\r\n * Weight used when rolling a filler roll. Each roll will choose from available\r\n * substats (excluding main stat and existing substats) with these weights.\r\n */\r\nconst fWeight: StrictDict<SubstatKey, Weight> = {\r\n  hp: 6, atk: 6, def: 6,\r\n  hp_: 4, atk_: 4, def_: 4, eleMas: 4, enerRech_: 4,\r\n  critRate_: 3, critDMG_: 3\r\n}\r\n\r\n/**\r\n * Probability of observing a filler sequence with particular weights\r\n * \r\n * pFillerSeq[w0][w1][w2][...] = Pr [ fWeight[main stat] = w0, fWeight[substat1] = w1, fWeight[substat2] = w2, ... ]\r\n */\r\nconst pFillerSeq: Dict<0 | Weight, Dict<Weight, Dict<Weight, Dict<Weight, Dict<Weight, number>>>>> = {}\r\nfunction populatePFillerSeq(prefix: (0 | Weight)[], prob: { [key in Weight]: number }, sumProb: number, current: number) {\r\n  if (prefix.length === 5) {\r\n    layeredAssignment(pFillerSeq, prefix as any, current)\r\n    return\r\n  }\r\n\r\n  for (const i of allWeights)\r\n    if (prob[i] > 0)\r\n      populatePFillerSeq([...prefix, i], { ...prob, [i]: prob[i] - i }, sumProb - i, current * prob[i] / sumProb)\r\n}\r\npopulatePFillerSeq([0], { 3: 6, 4: 20, 6: 18 }, 44, 1)\r\n\r\npopulatePFillerSeq([3], { 3: 3, 4: 20, 6: 18 }, 41, 1)\r\npopulatePFillerSeq([4], { 3: 6, 4: 16, 6: 18 }, 40, 1)\r\npopulatePFillerSeq([6], { 3: 6, 4: 20, 6: 12 }, 38, 1)\r\n\r\n/**\r\n * cnr[n][r] = C(n, r) = n! / (r!(n-r)!)\r\n * \r\n * 0 <= n <= 5; 0 <= r <= n\r\n */\r\nconst cnr = Array(6).fill(0).map((_, n) => {\r\n  const result = [1]\r\n  let r = 0, value = 1\r\n  while (++r <= n) {\r\n    value *= n - r + 1\r\n    value /= r\r\n    result.push(value)\r\n  }\r\n\r\n  return result\r\n})\r\n\r\n/** \r\n * pNExtra[n][i] = Pr[ E(k) >= (i - 7n) * alpha(i) | N(k) = n ]\r\n *               = Pr[ (E(k) / alpha(k)) - 7n >= i | N(k) = n ]\r\n * \r\n * 0 <= n <= 5; 0 <= i < 3*n + 1\r\n */\r\nconst pNExtra = [[1]]\r\nwhile (pNExtra.length < 6) {\r\n  const last = pNExtra[pNExtra.length - 1]\r\n  const next = Array(last.length + 3).fill(0)\r\n  last.forEach((value, i) => {\r\n    for (const j of [0, 1, 2, 3]) {\r\n      next[i + j] += value\r\n    }\r\n  })\r\n\r\n  pNExtra.push(next.map(x => x / 4))\r\n}\r\nfor (const array of pNExtra) {\r\n  let accu = array.reduce((a, b) => a + b)\r\n  array.forEach((x, i, array) => {\r\n    array[i] = accu\r\n    accu -= x\r\n  })\r\n}\r\n\r\n/** Probability that `artifact` will have at least `target` stats at max level */\r\nfunction probability(artifact: IArtifact, _target: { [key in SubstatKey]?: number }): number {\r\n  if (artifact.rarity <= 2) return NaN // Doesn't work with 1* and 2* should we decide to add them\r\n\r\n  const { rarity, level, substats } = artifact\r\n\r\n  // `target = target - mainstat - substat` to find the extra substats we need\r\n  // Also count filler rolls (4 - # of substats) while we're at it\r\n  const target = { ..._target }, required = new Set(Object.keys(target))\r\n  let numFillerSlots = 0\r\n  {\r\n    const key = artifact.mainStatKey\r\n    if (key in target) {\r\n      const maxLevel = rarity * 4 // Note: this formula doesn't work with 1* and 2* artifacts\r\n      const maxLevelMainStat = ArtifactMainStatsData[rarity][key][maxLevel]\r\n      if (maxLevelMainStat < target[key]!) return 0 // Main stat won't meet the target\r\n\r\n      delete target[key]\r\n      required.delete(key as SubstatKey)\r\n    }\r\n  }\r\n  for (const { key, value } of substats) {\r\n    if (key) {\r\n      if (required.has(key)) {\r\n        required.delete(key)\r\n        if (target[key]! > value)\r\n          target[key]! -= value\r\n        else delete target[key] // Requirement already met\r\n      }\r\n    } else numFillerSlots += 1\r\n  }\r\n  numFillerSlots += 4 - substats.length\r\n\r\n  if (required.size > numFillerSlots || Object.keys(target).length > 4) return 0 // Not enough filler rolls\r\n\r\n  const numUpgradeRolls = Artifact.rollsRemaining(level, rarity) - numFillerSlots\r\n\r\n  // normalize `target`\r\n  for (const [key, value] of Object.entries(target))\r\n    target[key] = Math.max(Math.ceil(10 * value / Artifact.maxSubstatValues(key, rarity)), 1)\r\n\r\n  let minTotalUpgrades = 0\r\n  const targetEntries = Object.entries(target).map(([key, target]) => {\r\n    const filler = required.has(key) ? 1 : 0 // Nf(i)\r\n    const minUpgrade = Math.ceil(target / 10) - filler // Minimum # of upgrade rolls to ensure E(i) > T(i)\r\n    minTotalUpgrades += minUpgrade\r\n    return { target, filler, minUpgrade }\r\n  }).reverse()\r\n\r\n  if (minTotalUpgrades > numUpgradeRolls) return 0 // Not enough upgrade rolls\r\n\r\n  /**\r\n   * The optimization trick here is to write Pr[ E > T | N ] using a recursive relation. Let\r\n   * \r\n   *  f(n, t) = Pr[ E(i) >= t | N(i) = n ]\r\n   *  g(k, n) = Pr[ E(1) >= T(1), E(2) >= T(2), ..., E(k) >= T(k) | Nu - Nu(1) - Nu(2) - ... - Nu(k) = n ]\r\n   *  h(n, m, M) = Pr[ Nu(k) = m | 0 <= Nu(k) <= n, |K| = M ]\r\n   * \r\n   * Then\r\n   * \r\n   *  Pr [ E > T | N ] = Pr[ Nf(k) = I(k requires filler) for all k | N ] sum{0 <= n <= Nu} g(|K|, n)\r\n   * \r\n   * where I(X) is the indicator function, and |K| is the number of substat constraints, and\r\n   * \r\n   *  f(n, e * alpha(i)) = pNExtra[n][ e - 7n ]\r\n   *  h(n, m, M) = C(n, m) (M-1)^(n - m) M^(-n) = pRollInto(n, m, M)\r\n   *  g(0, N) = 1\r\n   *  g(0, n) = 0 for n != N\r\n   * \r\n   *  g(k + 1, n) = sum{0 <= m <= n} g(k, n + m) f(m + Nf(k), T(k)) h(n + m, m, |K| - k)\r\n   */\r\n\r\n  // At this point,\r\n  //  `target` = ceil(T / alpha)\r\n  //  `numUpgradeRolls` = Nu\r\n\r\n  let result = { [numUpgradeRolls]: 1 }, additionalUpgradeRolls = numUpgradeRolls - minTotalUpgrades\r\n\r\n  // Keep applying `target` from first to last.\r\n  // At each step i in the loop, `result[n]` = g(i, n)\r\n  targetEntries.forEach(({ target, filler, minUpgrade }, targetIndex) => {\r\n    const next: typeof result = {}\r\n\r\n    for (let rolls = minUpgrade; rolls <= minUpgrade + additionalUpgradeRolls; rolls++) {\r\n      // rolls = m; extra = T(i) / alpha - 7n\r\n\r\n      // Extra substat (mutiple of alpha) required from upgrade & filler rolls\r\n      const extra = target - 7 * (rolls + filler)\r\n      // pExtra = Pr[ Has at least `extra` * alpha from `rolls` upgrade or filler rolls into `key` ]\r\n      //        = f(m + Nf(i), T(i))\r\n      const pExtra = (extra > 0 ? pNExtra[rolls + filler][extra] : 1)\r\n\r\n      for (const [_remaining, probability] of Object.entries(result)) {\r\n        const remaining = parseInt(_remaining)\r\n        if (remaining < rolls) continue\r\n\r\n        // n := remaining - m\r\n        // remaining = n + m\r\n        // probability = g(i, n + m)\r\n\r\n        // `pRolls` = Pr[ Has `rolls` rolls into `key` from `remaining` upgrade rolls ]\r\n        //          = h(n + m, m, |K| - i)\r\n        const pRolls = pRollInto(remaining, rolls, 4 - targetIndex)\r\n        const index = remaining - rolls // n\r\n\r\n        // g(i + 1, n) += g(i, n + m) f(m + Nf(i), T(i)) h(n + m, m, |K| - i)\r\n        next[index] = (next[index] ?? 0) + probability * pExtra * pRolls\r\n      }\r\n    }\r\n    result = next\r\n  })\r\n\r\n  // At this point, `result[i]` = g(|K|, i)\r\n\r\n  return calculatePFillerRolls(artifact.mainStatKey, substats, required) * Object.values(result).reduce((a, b) => a + b)\r\n}\r\n\r\n/**\r\n * Pr[ N(k) = n | N = m, |K| = M ]\r\n * \r\n * 0 <= n <= N <= 5; 0 <= M <= 4\r\n */\r\nfunction pRollInto(m: number, n: number, M: number) {\r\n  return cnr[m][n] * Math.pow(M - 1, m - n) / Math.pow(M, m)\r\n}\r\n\r\n// Given a list of substat (in that order), calculate the probability that filler rolls will have all `required` substats in any order\r\nfunction calculatePFillerRolls(mainStat: MainStatKey, substats: ISubstat[], required: Set<SubstatKey>) {\r\n  // Instead of picking substats in a particular order [critDMG_, atk_, ...],\r\n  // We pick substat weights first [3, 4, 3, ...], then assign proper substats\r\n  // that corresponds to that weight: 3 => critDMG_ | critRate_ ; 4 => atk_, etc.\r\n  // This reduces the search space significantly (5040 substat sequences => 71 weight sequences).\r\n\r\n  const mainStatRatio = fWeight[mainStat] ?? 0\r\n  let pFillerRolls = 0 // Pr[ filler rolls include all `required` substats, Substats are in the same order as `substats` ]\r\n\r\n  const numUnusedSubstats = { 3: 2, 4: 5, 6: 3 } // # of substat not used by main stat or substats\r\n  let pSuffixFillerSeq: any = pFillerSeq[mainStatRatio] // Suffix of `pFillerSeq` that excludes the `substats` portion\r\n  for (const { key } of substats) {\r\n    if (key) {\r\n      const ratio = fWeight[key]\r\n      pSuffixFillerSeq = pSuffixFillerSeq[ratio]\r\n      numUnusedSubstats[ratio] -= 1\r\n    }\r\n  }\r\n  if (mainStatRatio) numUnusedSubstats[mainStatRatio] -= 1\r\n\r\n  const requiredCount = { 3: 0, 4: 0, 6: 0 }\r\n  for (const key of required) requiredCount[fWeight[key]] += 1\r\n\r\n  let total = 0\r\n  crawlObject(pSuffixFillerSeq, [], obj => typeof obj === \"number\", (prob: number, path: string[]) => {\r\n    total += prob\r\n    const currentCount = { 3: 0, 4: 0, 6: 0 }\r\n    for (const key of path) currentCount[key] += 1\r\n\r\n    let sum = prob\r\n    for (const i of allWeights) {\r\n      const current = currentCount[i], required = requiredCount[i]\r\n      if (current < required) return\r\n      sum *= cnr[current][required]\r\n    }\r\n\r\n    pFillerRolls += sum\r\n  })\r\n\r\n  for (const i of allWeights)\r\n    pFillerRolls /= cnr[numUnusedSubstats[i]][requiredCount[i]]\r\n  return pFillerRolls / total\r\n}\r\n\r\nexport { probability }\r\n","import SqBadge from '../Components/SqBadge';\r\nimport { clamp } from '../Util/Util';\r\n\r\nexport default function PercentBadge({ value, valid }: Data) {\r\n  let [badgeColor, text] = typeof value === 'number' ?\r\n    [`roll${clamp(Math.floor(value * 0.05) + 1, 1, 6)}`, value.toFixed(2) + \"%\"] : [\"secondary\", value]\r\n  if (!valid) badgeColor = \"error\"\r\n  return <SqBadge color={badgeColor} >{text}</SqBadge>\r\n}\r\n\r\ntype Data = {\r\n  valid: boolean,\r\n  value: number | string,\r\n}\r\n","import { Box, CardActionArea, CardContent, Divider, Grid, Typography } from \"@mui/material\"\r\nimport { useEffect, useState } from \"react\"\r\nimport Assets from \"../../Assets/Assets\"\r\nimport usePromise from \"../../ReactHooks/usePromise\"\r\nimport { allWeaponKeys, WeaponKey, WeaponTypeKey } from \"../../Types/consts\"\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\"\r\nimport CardDark from \"../Card/CardDark\"\r\nimport CardLight from \"../Card/CardLight\"\r\nimport CloseButton from \"../CloseButton\"\r\nimport ImgIcon from \"../Image/ImgIcon\"\r\nimport ModalWrapper from \"../ModalWrapper\"\r\nimport { Stars } from \"../StarDisplay\"\r\nimport WeaponToggle from \"../ToggleButton/WeaponToggle\"\r\n\r\ntype WeaponSelectionModalProps = {\r\n  show: boolean,\r\n  onHide: () => void,\r\n  onSelect: (wKey: WeaponKey) => void,\r\n  filter?: (sheet: WeaponSheet) => boolean,\r\n  weaponFilter?: WeaponTypeKey,\r\n}\r\n\r\nexport default function WeaponSelectionModal({ show, onHide, onSelect, filter = () => true, weaponFilter: propWeaponFilter }: WeaponSelectionModalProps) {\r\n  const weaponSheets = usePromise(WeaponSheet.getAll(), [])\r\n  const [weaponFilter, setWeaponfilter] = useState<WeaponTypeKey | \"\">(propWeaponFilter ?? \"\")\r\n\r\n  useEffect(() => propWeaponFilter && setWeaponfilter(propWeaponFilter), [propWeaponFilter])\r\n\r\n  const weaponIdList = !weaponSheets ? [] : [...new Set(allWeaponKeys)].filter(wKey => filter(weaponSheets[wKey]))\r\n    .filter(wKey => {\r\n      if (weaponFilter && weaponFilter !== weaponSheets?.[wKey]?.weaponType) return false\r\n      return true\r\n    })\r\n    .sort((a, b) => (weaponSheets?.[b]?.rarity ?? 0) - (weaponSheets?.[a]?.rarity ?? 0))\r\n\r\n  if (!weaponSheets) return null\r\n\r\n  return <ModalWrapper open={show} onClose={onHide}>\r\n    <CardDark>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container>\r\n          <Grid item flexGrow={1}>\r\n            <WeaponToggle value={weaponFilter} onChange={setWeaponfilter} disabled={!!propWeaponFilter} size=\"small\" />\r\n          </Grid >\r\n          <Grid item>\r\n            <CloseButton onClick={onHide} />\r\n          </Grid >\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent><Grid container spacing={1}>\r\n        {weaponIdList.map(weaponKey => {\r\n          const weaponSheet = weaponSheets[weaponKey]\r\n          return <Grid item key={weaponKey} lg={3} md={4}>\r\n            <CardLight sx={{ height: \"100%\" }} >\r\n              <CardActionArea onClick={() => { onHide(); onSelect(weaponKey) }} sx={{ display: \"flex\" }}>\r\n                <Box component=\"img\" src={weaponSheet.img} sx={{ width: 100, height: \"auto\" }} className={` grad-${weaponSheet.rarity}star`} />\r\n                <Box sx={{ flexGrow: 1, px: 1 }}>\r\n                  <Typography variant=\"subtitle1\">{weaponSheet.name}</Typography>\r\n                  <Typography><ImgIcon src={Assets.weaponTypes?.[weaponSheet.weaponType]} /> <Stars stars={weaponSheet.rarity} colored /></Typography>\r\n                </Box>\r\n              </CardActionArea>\r\n            </CardLight>\r\n          </Grid>\r\n        })}\r\n      </Grid></CardContent>\r\n      <Divider />\r\n      <CardContent sx={{ py: 1 }}>\r\n        <CloseButton large onClick={onHide} />\r\n      </CardContent>\r\n    </CardDark>\r\n  </ModalWrapper>\r\n}","import { faEdit, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { Lock, LockOpen } from \"@mui/icons-material\"\r\nimport { Box, Button, ButtonGroup, CardActionArea, CardContent, CardHeader, Grid, IconButton, Skeleton, Typography } from \"@mui/material\"\r\nimport { Suspense, useCallback, useContext } from \"react\"\r\nimport Assets from \"../Assets/Assets\"\r\nimport CharacterSheet from \"../Character/CharacterSheet\"\r\nimport CardLight from \"../Components/Card/CardLight\"\r\nimport CharacterDropdownButton from '../Components/Character/CharacterDropdownButton'\r\nimport LocationName from \"../Components/Character/LocationName\"\r\nimport ConditionalWrapper from \"../Components/ConditionalWrapper\"\r\nimport ImgIcon from \"../Components/Image/ImgIcon\"\r\nimport { Stars } from \"../Components/StarDisplay\"\r\nimport StatIcon from \"../Components/StatIcon\"\r\nimport { ascensionMaxLevel } from \"../Data/LevelData\"\r\nimport { DatabaseContext } from \"../Database/Database\"\r\nimport usePromise from \"../ReactHooks/usePromise\"\r\nimport useWeapon from \"../ReactHooks/useWeapon\"\r\nimport Stat from \"../Stat\"\r\nimport { CharacterKey } from \"../Types/consts\"\r\nimport WeaponSheet from \"./WeaponSheet\"\r\n\r\ntype WeaponCardProps = { weaponId: string, onClick?: (weaponId: string) => void, onEdit?: (weaponId: string) => void, onDelete?: (weaponId: string) => void, canEquip?: boolean }\r\nexport default function WeaponCard({ weaponId, onClick, onEdit, onDelete, canEquip = false }: WeaponCardProps) {\r\n  const database = useContext(DatabaseContext)\r\n  const databaseWeapon = useWeapon(weaponId)\r\n  const weapon = databaseWeapon\r\n  const weaponSheet = usePromise(weapon?.key && WeaponSheet.get(weapon.key), [weapon?.key])\r\n\r\n  const filter = useCallback(\r\n    (cs: CharacterSheet) => cs.weaponTypeKey === weaponSheet?.weaponType,\r\n    [weaponSheet],\r\n  )\r\n\r\n  const actionWrapperFunc = useCallback(\r\n    children => <CardActionArea onClick={() => onClick?.(weaponId)} sx={{ height: \"100%\" }}>{children}</CardActionArea>,\r\n    [onClick, weaponId],\r\n  )\r\n\r\n  const equipOnChar = useCallback((charKey: CharacterKey | \"\") => database.setWeaponLocation(weaponId, charKey), [database, weaponId],)\r\n  if (!weapon || !weaponSheet) return null;\r\n  const { level, ascension, refinement, id, location = \"\", lock } = weapon\r\n\r\n\r\n  const weaponTypeKey = weaponSheet.weaponType\r\n  const weaponMainVal = weaponSheet.getMainStatValue(level, ascension).toFixed(Stat.fixedUnit(\"atk\"))\r\n  const weaponSubKey = weaponSheet.getSubStatKey()\r\n  const weaponSubVal = weaponSheet.getSubStatValue(level, ascension).toFixed(Stat.fixedUnit(weaponSubKey))\r\n  const weaponPassiveName = weaponSheet?.passiveName\r\n  const statMap = [[\"weaponATK\", weaponMainVal]]\r\n  weaponPassiveName && statMap.push([weaponSubKey, weaponSubVal])\r\n  const img = ascension < 2 ? weaponSheet?.img : weaponSheet?.imgAwaken\r\n\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 300 }} />}>\r\n    <ConditionalWrapper condition={!!onClick} wrapper={actionWrapperFunc}>\r\n      <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n        <div className={`grad-${weaponSheet.rarity}star`} >\r\n          <CardHeader title={weaponSheet.name} avatar={<ImgIcon sx={{ fontSize: \"2em\" }} src={Assets.weaponTypes?.[weaponTypeKey]} />} titleTypographyProps={{ variant: \"h6\" }}\r\n            action={!onClick && <IconButton color=\"primary\" onClick={() => database.updateWeapon({ lock: !lock }, id)}>\r\n              {lock ? <Lock /> : <LockOpen />}\r\n            </IconButton>} />\r\n          <Grid container sx={{ flexWrap: \"nowrap\", pl: 2 }}>\r\n            <Grid item flexGrow={1}>\r\n              <Typography component=\"span\" variant=\"h4\">Lv. {level}</Typography>\r\n              <Typography component=\"span\" variant=\"h4\" color=\"text.secondary\">/{ascensionMaxLevel[ascension]}</Typography>\r\n              <Typography variant=\"h6\">Refinement <strong>{refinement}</strong></Typography>\r\n              <Typography><Stars stars={weaponSheet.rarity} colored /></Typography>\r\n            </Grid>\r\n            {/* use flex-end here to align the image to the bottom. */}\r\n            <Grid item container maxWidth=\"40%\" alignContent=\"flex-end\" sx={{ mt: -3 }}>\r\n              <Box component=\"img\" src={img} width=\"100%\" height=\"auto\" />\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n        <CardContent>\r\n          {statMap.map(([statKey, statVal]) => {\r\n            let unit = Stat.getStatUnit(statKey)\r\n            return <Box key={statKey} sx={{ display: \"flex\" }}>\r\n              <Typography flexGrow={1}>{StatIcon[statKey]} {Stat.getStatName(statKey)}</Typography>\r\n              <Typography>{statVal + unit}</Typography>\r\n            </Box>\r\n          })}\r\n        </CardContent>\r\n        {/* grow to fill the 100% heigh */}\r\n        <Box flexGrow={1} />\r\n        <CardContent sx={{ py: 1 }}>\r\n          <Grid container sx={{ flexWrap: \"nowrap\" }} >\r\n            <Grid item xs=\"auto\" flexShrink={1}>\r\n              {canEquip ? <CharacterDropdownButton size=\"small\" noUnselect inventory value={location} onChange={equipOnChar} filter={filter} /> : <LocationName location={location} />}\r\n            </Grid>\r\n            <Grid item flexGrow={1} sx={{ mr: 1 }} />\r\n            <Grid item xs=\"auto\">\r\n              <ButtonGroup sx={{ height: \"100%\" }}>\r\n                {!!onEdit && <Button color=\"info\" size=\"small\" onClick={() => onEdit(id)} >\r\n                  <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n                </Button>}\r\n                {!!onDelete && <Button color=\"error\" size=\"small\" onClick={() => onDelete(id)} disabled={!!location || lock} >\r\n                  <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n                </Button>}\r\n              </ButtonGroup>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n\r\n      </CardLight>\r\n    </ConditionalWrapper>\r\n  </Suspense>\r\n}","import { faBan, faChartLine, faEdit, faInfoCircle, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Lock, LockOpen } from '@mui/icons-material';\r\nimport { Box, Button, ButtonGroup, CardActions, CardContent, CardMedia, Chip, Grid, IconButton, Skeleton, Tooltip, Typography } from '@mui/material';\r\nimport React, { Suspense, useContext } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport BootstrapTooltip from '../Components/BootstrapTooltip';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport CharacterDropdownButton from '../Components/Character/CharacterDropdownButton';\r\nimport LocationName from '../Components/Character/LocationName';\r\nimport ColorText from '../Components/ColoredText';\r\nimport SqBadge from '../Components/SqBadge';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { database as localDatabase, DatabaseContext } from '../Database/Database';\r\nimport useArtifact from '../ReactHooks/useArtifact';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport Stat from '../Stat';\r\nimport { allSubstats, ICachedArtifact, ICachedSubstat, SubstatKey } from '../Types/artifact';\r\nimport { CharacterKey } from '../Types/consts';\r\nimport { valueStringWithUnit } from '../Util/UIUtil';\r\nimport { clamp } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\nimport PercentBadge from './PercentBadge';\r\nimport { probability } from './RollProbability';\r\n\r\ntype Data = {\r\n  artifactId?: string,\r\n  artifactObj?: ICachedArtifact,\r\n  onEdit?: (string) => void,\r\n  onDelete?: (string) => void, mainStatAssumptionLevel?: number,\r\n  effFilter?: Set<SubstatKey>,\r\n  probabilityFilter?: Dict<SubstatKey, number>\r\n}\r\nconst allSubstatFilter = new Set(allSubstats)\r\n\r\nexport default function ArtifactCard({ artifactId, artifactObj, onEdit, onDelete, mainStatAssumptionLevel = 0, effFilter = allSubstatFilter, probabilityFilter }: Data): JSX.Element | null {\r\n  const { t } = useTranslation([\"artifact\"]);\r\n  const database = useContext(DatabaseContext)\r\n  const databaseArtifact = useArtifact(artifactId)\r\n  const sheet = usePromise(ArtifactSheet.get((artifactObj ?? databaseArtifact)?.setKey), [artifactObj, databaseArtifact])\r\n  const equipOnChar = (charKey: CharacterKey | \"\") => database.setArtLocation(artifactId!, charKey)\r\n\r\n  const editable = !artifactObj && database === localDatabase // dont allow edit for flex artifacts\r\n  const art = artifactObj ?? databaseArtifact\r\n  if (!art) return null\r\n\r\n  const { id, lock, slotKey, rarity, level, mainStatKey, substats, exclude, location = \"\" } = art\r\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, rarity * 4), level)\r\n  const levelVariant = \"roll\" + (Math.floor(Math.max(level, 0) / 4) + 1)\r\n  const mainStatVal = <ColorText color={mainStatLevel !== level ? \"warning\" : undefined}>{valueStringWithUnit(Artifact.mainStatValue(mainStatKey, rarity, mainStatLevel) ?? 0, Stat.getStatUnit(mainStatKey))}</ColorText>\r\n  const { currentEfficiency, maxEfficiency } = Artifact.getArtifactEfficiency(art, effFilter)\r\n  const artifactValid = maxEfficiency !== 0\r\n  const slotName = sheet?.getSlotName(slotKey) || \"Unknown Piece Name\"\r\n  const slotDesc = sheet?.getSlotDesc(slotKey)\r\n  const slotDescTooltip = slotDesc && <BootstrapTooltip placement=\"top\" title={<Typography>{slotDesc}</Typography>}>\r\n    <span><FontAwesomeIcon icon={faInfoCircle} /></span>\r\n  </BootstrapTooltip>\r\n  const setEffects = sheet?.setEffects\r\n  const setDescTooltip = sheet && setEffects && <BootstrapTooltip placement=\"top\" title={\r\n    <span>\r\n      {Object.keys(setEffects).map(setNumKey => <span key={setNumKey}>\r\n        <Typography variant=\"h6\"><SqBadge color=\"success\">{t(`setEffectNum`, { setNum: setNumKey })}</SqBadge></Typography>\r\n        <Typography>{sheet.setEffectDesc(setNumKey as any)}</Typography>\r\n      </span>)}\r\n    </span>\r\n  }>\r\n    <span><FontAwesomeIcon icon={faInfoCircle} /></span>\r\n  </BootstrapTooltip>\r\n\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 350 }} />}>\r\n    <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n      <CardContent className={`grad-${rarity}star`} sx={{ pt: 1, pb: 0, pr: 0 }}>\r\n        <Box component=\"div\" sx={{ display: \"flex\", alignItems: \"center\", pr: 1 }}>\r\n          <Chip size=\"small\" label={<strong>{` +${level}`}</strong>} color={levelVariant as any} />\r\n          <Typography sx={{ pl: 1, flexGrow: 1 }}>{slotName} {slotDescTooltip}</Typography>\r\n          <IconButton color=\"primary\" disabled={!editable} onClick={() => database.updateArt({ lock: !lock }, id)}>\r\n            {lock ? <Lock /> : <LockOpen />}\r\n          </IconButton>\r\n        </Box>\r\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\r\n          <Grid item flexGrow={1}>\r\n            <Typography color=\"text.secondary\" variant=\"body2\">\r\n              <SlotNameWithIcon slotKey={slotKey} />\r\n            </Typography>\r\n            <Typography variant=\"h6\">\r\n              {Stat.getStatName(mainStatKey)}\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <strong>{mainStatVal}</strong>\r\n            </Typography>\r\n            <Stars stars={rarity} colored />\r\n            {/* {process.env.NODE_ENV === \"development\" && <Typography color=\"common.black\">{id || `\"\"`} </Typography>} */}\r\n          </Grid>\r\n          <Grid item maxWidth=\"40%\" sx={{ mt: -3, mb: -1, pl: -2 }} alignSelf=\"flex-end\">\r\n            <CardMedia\r\n              component=\"img\"\r\n              image={sheet?.slotIcons[slotKey] ?? \"\"}\r\n              width=\"100%\"\r\n              height=\"auto\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <CardContent sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\", pt: 1, pb: 0 }}>\r\n        {substats.map((stat: ICachedSubstat, i) => {\r\n          if (!stat.value) return null\r\n          const numRolls = stat.rolls?.length ?? 0\r\n          const rollColor = `roll${clamp(numRolls, 1, 6)}`\r\n          const efficiency = stat.efficiency ?? 0\r\n          const effOpacity = 0.3 + (efficiency / 100) * 0.7\r\n          const statName = Stat.getStatName(stat.key)\r\n          return (<Box key={i} sx={{ display: \"flex\" }}>\r\n            <Box sx={{ flexGrow: 1 }}>\r\n              <SqBadge color={(numRolls ? rollColor : \"error\") as any} sx={{ mr: 1 }}><strong>{numRolls ? numRolls : \"?\"}</strong></SqBadge>\r\n              <Typography color={(numRolls ? `${rollColor}.main` : \"error.main\") as any} component=\"span\">{statName}{`+${valueStringWithUnit(stat.value, Stat.getStatUnit(stat.key))}`}</Typography>\r\n            </Box>\r\n            <Typography sx={{ opacity: effOpacity }}>{stat.key && effFilter.has(stat.key) ? valueStringWithUnit(efficiency, \"eff\") : \"-\"}</Typography>\r\n          </Box>)\r\n        })}\r\n        <Box sx={{ display: \"flex\", my: 1 }}>\r\n          <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`editor.curSubEff`}</Typography>\r\n          <PercentBadge value={currentEfficiency} valid={artifactValid} />\r\n        </Box>\r\n        {currentEfficiency !== maxEfficiency && <Box sx={{ display: \"flex\", mb: 1 }}>\r\n          <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`editor.maxSubEff`}</Typography>\r\n          <PercentBadge value={maxEfficiency} valid={artifactValid} />\r\n        </Box>}\r\n        <Box flexGrow={1} />\r\n        {probabilityFilter && <strong>Probability: {(probability(art, probabilityFilter) * 100).toFixed(2)}%</strong>}\r\n        <Typography color=\"success.main\">{sheet?.name ?? \"Artifact Set\"} {setDescTooltip}</Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\r\n          <Grid item xs=\"auto\" flexShrink={1}>\r\n            {editable ?\r\n              <CharacterDropdownButton size=\"small\" inventory value={location} onChange={equipOnChar} /> : <LocationName location={location} />}\r\n          </Grid>\r\n          <Grid item flexGrow={1} sx={{ mr: 1 }} />\r\n          {editable && <Grid item xs=\"auto\">\r\n            <ButtonGroup sx={{ height: \"100%\" }}>\r\n              {!!onEdit && <Button color=\"info\" onClick={() => onEdit(id)} size=\"small\">\r\n                <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n              </Button>}\r\n              <Tooltip title={<Typography>{t`excludeArtifactTip`}</Typography>} placement=\"top\" arrow>\r\n                <Button onClick={() => database.updateArt({ exclude: !exclude }, id)} color={exclude ? \"error\" : \"success\"} size=\"small\">\r\n                  <FontAwesomeIcon icon={exclude ? faBan : faChartLine} className=\"fa-fw\" />\r\n                </Button>\r\n              </Tooltip>\r\n              {!!onDelete && <Button color=\"error\" size=\"small\" onClick={() => onDelete(id)} disabled={lock}>\r\n                <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n              </Button>}\r\n            </ButtonGroup>\r\n          </Grid>}\r\n        </Grid>\r\n      </CardActions>\r\n    </CardLight >\r\n  </Suspense>\r\n}\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\n\r\nexport default function useArtifact(artifactID: string | undefined = \"\") {\r\n  const database = useContext(DatabaseContext)\r\n  const [artifact, setArtifact] = useState(database._getArt(artifactID))\r\n  useEffect(() => setArtifact(database._getArt(artifactID)), [database, artifactID])\r\n  useEffect(() =>\r\n    artifactID ? database.followArt(artifactID, setArtifact) : undefined,\r\n    [artifactID, setArtifact, database])\r\n  return artifact\r\n}","import { Box, CardActionArea, CardContent, Divider, Grid, Typography } from \"@mui/material\";\r\nimport { useContext, useMemo, useState } from \"react\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport Character from '../../Character/Character';\r\nimport CharacterSheet from \"../../Character/CharacterSheet\";\r\nimport { DatabaseContext } from \"../../Database/Database\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\nimport useSheets from \"../../ReactHooks/useSheets\";\r\nimport { ICachedCharacter } from \"../../Types/character\";\r\nimport { allCharacterKeys, CharacterKey, ElementKey, WeaponTypeKey } from \"../../Types/consts\";\r\nimport { characterFilterConfigs, characterSortConfigs } from \"../../Util/CharacterSort\";\r\nimport { filterFunction, sortFunction } from \"../../Util/SortByFilters\";\r\nimport CardDark from \"../Card/CardDark\";\r\nimport CardLight from \"../Card/CardLight\";\r\nimport CloseButton from \"../CloseButton\";\r\nimport ImgIcon from \"../Image/ImgIcon\";\r\nimport ModalWrapper from \"../ModalWrapper\";\r\nimport SortByButton from \"../SortByButton\";\r\nimport SqBadge from \"../SqBadge\";\r\nimport { Stars } from \"../StarDisplay\";\r\nimport StatIcon from \"../StatIcon\";\r\nimport ElementToggle from \"../ToggleButton/ElementToggle\";\r\nimport WeaponToggle from \"../ToggleButton/WeaponToggle\";\r\n\r\nconst defaultSortKeys = [\"level\", \"rarity\", \"name\"]\r\n\r\ntype characterFilter = (character: ICachedCharacter | undefined, sheet: CharacterSheet) => boolean\r\n\r\ntype CharacterSelectionModalProps = {\r\n  show: boolean,\r\n  newFirst?: boolean\r\n  onHide: () => void,\r\n  onSelect?: (ckey: CharacterKey) => void,\r\n  filter?: characterFilter\r\n}\r\n\r\nexport function CharacterSelectionModal({ show, onHide, onSelect, filter = () => true, newFirst = false }: CharacterSelectionModalProps) {\r\n  const sortKeys = useMemo(() => newFirst ? [\"new\", ...defaultSortKeys] : defaultSortKeys, [newFirst])\r\n  const database = useContext(DatabaseContext)\r\n\r\n  const [sortBy, setsortBy] = useState(sortKeys[0])\r\n  const [ascending, setascending] = useState(false)\r\n  const [elementalFilter, setelementalFilter] = useState<ElementKey | \"\">(\"\")\r\n  const [weaponFilter, setweaponFilter] = useState<WeaponTypeKey | \"\">(\"\")\r\n\r\n  const characterSheets = usePromise(CharacterSheet.getAll(), [])\r\n\r\n  const sortConfigs = useMemo(() => characterSheets && characterSortConfigs(database, characterSheets), [database, characterSheets])\r\n  const filterConfigs = useMemo(() => characterSheets && characterFilterConfigs(characterSheets), [characterSheets])\r\n  const characterKeyList = useMemo(() => (characterSheets && sortConfigs && filterConfigs) ?\r\n    [...new Set(allCharacterKeys)].filter(cKey => filter(database._getChar(cKey), characterSheets[cKey]))\r\n      .filter(filterFunction({ element: elementalFilter, weaponType: weaponFilter }, filterConfigs))\r\n      .sort(sortFunction(sortBy, ascending, sortConfigs) as (a: CharacterKey, b: CharacterKey) => number) : [],\r\n    [database, characterSheets, filter, elementalFilter, weaponFilter, sortBy, ascending, sortConfigs, filterConfigs])\r\n\r\n  if (!characterSheets) return null\r\n  return <ModalWrapper open={show} onClose={onHide} >\r\n    <CardDark>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container spacing={1} >\r\n          <Grid item>\r\n            <WeaponToggle sx={{ height: \"100%\" }} onChange={setweaponFilter} value={weaponFilter} size=\"small\" />\r\n          </Grid>\r\n          <Grid item flexGrow={1}>\r\n            <ElementToggle sx={{ height: \"100%\" }} onChange={setelementalFilter} value={elementalFilter} size=\"small\" />\r\n          </Grid>\r\n\r\n          <Grid item flexGrow={1} />\r\n\r\n          <Grid item >\r\n            <SortByButton sx={{ height: \"100%\" }}\r\n              sortKeys={sortKeys} value={sortBy} onChange={setsortBy as any}\r\n              ascending={ascending} onChangeAsc={setascending} />\r\n          </Grid>\r\n          <Grid item>\r\n            <CloseButton onClick={onHide} />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent><Grid container spacing={1}>\r\n        {characterKeyList.map(characterKey => <Grid item key={characterKey} xs={6} md={4} lg={3} >\r\n          <CharacterBtn key={characterKey} characterKey={characterKey} onClick={() => { onHide(); onSelect?.(characterKey) }} />\r\n        </Grid>)}\r\n      </Grid></CardContent>\r\n    </CardDark>\r\n  </ModalWrapper>\r\n}\r\n\r\nfunction CharacterBtn({ onClick, characterKey }: { onClick: () => void, characterKey: CharacterKey }) {\r\n  const sheets = useSheets()\r\n  const database = useContext(DatabaseContext)\r\n  const character = database._getChar(characterKey)\r\n  const characterSheet = sheets?.characterSheets[characterKey]\r\n  const stats = useMemo(() => character && sheets && Character.calculateBuild(character, database, sheets), [character, sheets, database])\r\n  if (!characterSheet) return null\r\n  const rarity = characterSheet.rarity\r\n  return <CardActionArea onClick={onClick} >\r\n    <CardLight sx={{ display: \"flex\", alignItems: \"center\" }}  >\r\n      <Box component=\"img\" src={characterSheet.thumbImg} sx={{ width: 130, height: \"auto\" }} className={`grad-${rarity}star`} />\r\n      <Box sx={{ pl: 1 }}>\r\n        <Typography><strong>{characterSheet.name}</strong></Typography>\r\n        {stats && character ? <>\r\n          <Typography variant=\"h6\"> {characterSheet.elementKey && StatIcon[characterSheet.elementKey]} <ImgIcon src={Assets.weaponTypes?.[characterSheet.weaponTypeKey]} />{` `}{Character.getLevelString(character)}</Typography>\r\n          <Typography >\r\n            <SqBadge color=\"success\">{`C${character.constellation}`}</SqBadge>{` `}\r\n            <SqBadge color=\"secondary\"><strong >{stats.tlvl.auto + 1}</strong></SqBadge>{` `}\r\n            <SqBadge color={stats.skillBoost ? \"info\" : \"secondary\"}><strong >{stats.tlvl.skill + 1}</strong></SqBadge>{` `}\r\n            <SqBadge color={stats.burstBoost ? \"info\" : \"secondary\"}><strong >{stats.tlvl.burst + 1}</strong></SqBadge>\r\n          </Typography>\r\n        </> : <>\r\n          <Typography variant=\"h6\"><SqBadge color=\"primary\">NEW</SqBadge></Typography>\r\n        </>}\r\n        <small><Stars stars={rarity} colored /></small>\r\n      </Box>\r\n    </CardLight>\r\n  </CardActionArea >\r\n}","import CharacterSheet from \"../Character/CharacterSheet\";\r\nimport { ArtCharDatabase } from \"../Database/Database\";\r\nimport { CharacterKey } from \"../Types/consts\";\r\nimport { FilterConfigs, SortConfigs } from \"./SortByFilters\";\r\nexport const characterSortKeys = [\"level\", \"rarity\", \"name\"]\r\nexport type CharacterSortKey = typeof characterSortKeys[number]\r\n\r\nexport function characterSortConfigs(database: ArtCharDatabase, characterSheets: Record<CharacterKey, CharacterSheet>): SortConfigs<CharacterSortKey, CharacterKey> {\r\n  return {\r\n    new: {\r\n      getValue: (ck) => database._getChar(ck as CharacterKey) ? 0 : 1,\r\n      tieBreaker: \"name\"\r\n    },\r\n    name: {\r\n      getValue: (ck) => ck,\r\n    },\r\n    level: {\r\n      getValue: (ck) => database._getChar(ck as CharacterKey)?.level ?? 0,\r\n      tieBreaker: \"rarity\"\r\n    },\r\n    rarity: {\r\n      getValue: (ck) => characterSheets?.[ck]?.rarity,\r\n      tieBreaker: \"level\"\r\n    }\r\n  }\r\n}\r\n\r\nexport function characterFilterConfigs(characterSheets: Record<CharacterKey, CharacterSheet>): FilterConfigs<\"element\" | \"weaponType\", CharacterKey> {\r\n  return {\r\n    element: (ck, filter) => !filter || (filter === characterSheets?.[ck]?.elementKey),\r\n    weaponType: (ck, filter) => !filter || (filter === characterSheets?.[ck]?.weaponTypeKey),\r\n  }\r\n}","import { CardContent, Typography } from \"@mui/material\"\r\nimport React from \"react\"\r\nimport CardDark from \"../Components/Card/CardDark\"\r\nimport FieldDisplay, { FieldDisplayList } from \"../Components/FieldDisplay\"\r\nimport { ICalculatedStats } from \"../Types/stats\"\r\nimport statsToFields from \"../Util/FieldUtil\"\r\nexport default function WeaponStatsCard({ title, statsVals = {}, stats }: { title: Displayable, statsVals?: object, stats: ICalculatedStats }) {\r\n  if ((Object.keys(statsVals) as string[]).filter(s => s !== \"modifiers\").length === 0) return null\r\n  const fields = statsToFields(statsVals, stats)\r\n  return <CardDark >\r\n    <CardContent>\r\n      <Typography>{title}</Typography>\r\n    </CardContent>\r\n    <FieldDisplayList>\r\n      {fields.map((field, i) => <FieldDisplay key={i} field={field} />)}\r\n    </FieldDisplayList>\r\n  </CardDark>\r\n}","import { Lock, LockOpen, SwapHoriz } from \"@mui/icons-material\"\r\nimport { Box, Button, ButtonGroup, CardContent, Divider, Grid, MenuItem, Typography } from \"@mui/material\"\r\nimport { useCallback, useContext, useState } from \"react\"\r\nimport Assets from \"../Assets/Assets\"\r\nimport { buildContext } from \"../Build/Build\"\r\nimport CharacterSheet from \"../Character/CharacterSheet\"\r\nimport CardDark from \"../Components/Card/CardDark\"\r\nimport CardLight from \"../Components/Card/CardLight\"\r\nimport CharacterDropdownButton from \"../Components/Character/CharacterDropdownButton\"\r\nimport CloseButton from \"../Components/CloseButton\"\r\nimport ColorText from \"../Components/ColoredText\"\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from \"../Components/CustomNumberInput\"\r\nimport DocumentDisplay from \"../Components/DocumentDisplay\"\r\nimport DropdownButton from \"../Components/DropdownMenu/DropdownButton\"\r\nimport ImgIcon from \"../Components/Image/ImgIcon\"\r\nimport ModalWrapper from \"../Components/ModalWrapper\"\r\nimport SqBadge from \"../Components/SqBadge\"\r\nimport { Stars } from \"../Components/StarDisplay\"\r\nimport WeaponSelectionModal from \"../Components/Weapon/WeaponSelectionModal\"\r\nimport { ambiguousLevel, ascensionMaxLevel, milestoneLevels } from \"../Data/LevelData\"\r\nimport { database as localDatabase, DatabaseContext } from \"../Database/Database\"\r\nimport usePromise from \"../ReactHooks/usePromise\"\r\nimport useWeapon from \"../ReactHooks/useWeapon\"\r\nimport { ICachedCharacter } from \"../Types/character\"\r\nimport { CharacterKey } from \"../Types/consts\"\r\nimport { ICalculatedStats } from \"../Types/stats\"\r\nimport { ICachedWeapon } from \"../Types/weapon\"\r\nimport { clamp } from \"../Util/Util\"\r\nimport WeaponCard from \"./WeaponCard\"\r\nimport WeaponSheet from \"./WeaponSheet\"\r\nimport WeaponStatsCard from \"./WeaponStatsCard\"\r\n\r\n\r\ntype WeaponStatsEditorCardProps = {\r\n  weaponId: string\r\n  charData?: {\r\n    character: ICachedCharacter,\r\n    characterSheet: CharacterSheet,\r\n    equippedBuild?: ICalculatedStats\r\n    newBuild?: ICalculatedStats\r\n    characterDispatch: (any) => void\r\n  }\r\n  footer?: boolean\r\n  onClose?: () => void\r\n}\r\nexport default function WeaponDisplayCard({\r\n  weaponId: propWeaponId,\r\n  charData,\r\n  footer = false,\r\n  onClose\r\n}: WeaponStatsEditorCardProps) {\r\n  const database = useContext(DatabaseContext)\r\n\r\n  const buildContextObj = useContext(buildContext)\r\n  const weapon = useWeapon(propWeaponId)\r\n  const { key = \"\", level, refinement = 0, ascension = 0, lock, location = \"\", id } = weapon ?? {}\r\n  const weaponSheet = usePromise(WeaponSheet.get(key), [key])\r\n  const weaponTypeKey = weaponSheet?.weaponType\r\n\r\n  const weaponDispatch = useCallback((newWeapon: Partial<ICachedWeapon>) => {\r\n    database.updateWeapon(newWeapon, propWeaponId)\r\n  }, [propWeaponId, database])\r\n\r\n  const setLevel = useCallback(level => {\r\n    level = clamp(level, 1, 90)\r\n    const ascension = ascensionMaxLevel.findIndex(ascenML => level <= ascenML)\r\n    weaponDispatch({ level, ascension })\r\n  }, [weaponDispatch])\r\n\r\n  const setAscension = useCallback(() => {\r\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML)\r\n    if (ascension === lowerAscension) weaponDispatch({ ascension: ascension + 1 })\r\n    else weaponDispatch({ ascension: lowerAscension })\r\n  }, [weaponDispatch, ascension, level])\r\n\r\n  const build = { ...(charData ? (charData.newBuild ?? charData.equippedBuild) : { weapon: { refineIndex: refinement - 1, level, ascension } }) } as any\r\n\r\n  const characterSheet = usePromise(location ? CharacterSheet.get(location) : undefined, [location])\r\n  const weaponFilter = characterSheet ? (ws) => ws.weaponType === characterSheet.weaponTypeKey : undefined\r\n  const initialWeaponFilter = characterSheet && characterSheet.weaponTypeKey\r\n\r\n  const equipOnChar = useCallback((charKey: CharacterKey | \"\") => id && database.setWeaponLocation(id, charKey), [database, id])\r\n  const filter = useCallback(\r\n    (cs: CharacterSheet) => cs.weaponTypeKey === weaponSheet?.weaponType,\r\n    [weaponSheet],\r\n  )\r\n  const [showModal, setshowModal] = useState(false)\r\n  const img = ascension < 2 ? weaponSheet?.img : weaponSheet?.imgAwaken\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Grid container spacing={1}>\r\n        <Grid item flexGrow={1}>\r\n          <Grid container spacing={1}>\r\n            <Grid item >\r\n              <WeaponSelectionModal show={showModal} onHide={() => setshowModal(false)} onSelect={k => weaponDispatch({ key: k })} filter={weaponFilter} weaponFilter={initialWeaponFilter} />\r\n              <ButtonGroup>\r\n                <Button onClick={() => setshowModal(true)} >{weaponSheet?.name ?? \"Select a Weapon\"}</Button>\r\n                <DropdownButton title={`Refinement ${refinement}`}>\r\n                  <MenuItem>Select Weapon Refinement</MenuItem>\r\n                  <Divider />\r\n                  {[...Array(5).keys()].map(key =>\r\n                    <MenuItem key={key} onClick={() => weaponDispatch({ refinement: key + 1 })} selected={refinement === (key + 1)} disabled={refinement === (key + 1)}>\r\n                      {`Refinement ${key + 1}`}\r\n                    </MenuItem>)}\r\n                </DropdownButton>\r\n              </ButtonGroup>\r\n            </Grid>\r\n            <Grid item >\r\n              <ButtonGroup sx={{ bgcolor: t => t.palette.contentLight.main }} >\r\n                <CustomNumberInputButtonGroupWrapper >\r\n                  <CustomNumberInput onChange={setLevel} value={level}\r\n                    startAdornment=\"Lvl. \"\r\n                    inputProps={{ min: 1, max: 90, sx: { textAlign: \"center\" } }}\r\n                    sx={{ width: \"100%\", height: \"100%\", pl: 2 }}\r\n                  />\r\n                </CustomNumberInputButtonGroupWrapper>\r\n                <Button sx={{ pl: 1 }} disabled={!ambiguousLevel(level)} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>\r\n                <DropdownButton title={\"Select Level\"} >\r\n                  {milestoneLevels.map(([lv, as]) => {\r\n                    const sameLevel = lv === ascensionMaxLevel[as]\r\n                    const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\r\n                    const selected = lv === level && as === ascension\r\n                    return <MenuItem key={`${lv}/${as}`} selected={selected} disabled={selected} onClick={() => weaponDispatch({ level: lv, ascension: as })}>{lvlstr}</MenuItem>\r\n                  })}\r\n                </DropdownButton>\r\n              </ButtonGroup>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button color=\"error\" onClick={() => id && database.updateWeapon({ lock: !lock }, id)} startIcon={lock ? <Lock /> : <LockOpen />}>\r\n                {lock ? \"Locked\" : \"Unlocked\"}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        {!!onClose && <Grid item  >\r\n          <CloseButton onClick={onClose} />\r\n        </Grid>}\r\n        {!!charData && database === localDatabase && <Grid item >\r\n          <SwapBtn weaponTypeKey={weaponTypeKey} onChangeId={id => database.setWeaponLocation(id, charData.character.key)} />\r\n        </Grid>}\r\n      </Grid>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent >\r\n      {(() => {\r\n        if (!weaponSheet) return null\r\n        const substatKey = weaponSheet.getSubStatKey()\r\n        const weaponDisplayMainVal = weaponSheet.getMainStatValue(level, ascension)\r\n        const weaponDisplaySubVal = weaponSheet.getSubStatValue(level, ascension)\r\n        const weaponPassiveName = weaponSheet.passiveName\r\n        const weaponBonusStats = weaponSheet.stats(build)\r\n        const sections = weaponSheet.document\r\n        return <Box display=\"flex\" gap={{ xs: 1, md: 1.5, lg: 2 }} >\r\n          <Box sx={{ maxWidth: 256 }} flexShrink={1} minWidth=\"25%\">\r\n            <Box component=\"img\" src={img} className={`grad-${weaponSheet.rarity}star`} sx={{ maxWidth: 256, width: \"100%\", height: \"auto\", borderRadius: 1 }} />\r\n            <Typography><small>{weaponSheet.description}</small></Typography>\r\n          </Box>\r\n          <Box sx={{ mb: -1 }} flexGrow={1} >\r\n            <Typography variant=\"h6\" >{process.env.NODE_ENV === \"development\" && <ColorText color=\"warning\">{id || `\"\"`} </ColorText>}{weaponSheet.name} Lv. {weapon && WeaponSheet.getLevelString(weapon)} {weaponPassiveName && <SqBadge color=\"info\">Refinement {refinement}</SqBadge>}</Typography>\r\n            <Typography><Stars stars={weaponSheet.rarity} /></Typography>\r\n            <Typography variant=\"subtitle1\">{weaponPassiveName}</Typography>\r\n            <Typography gutterBottom>{weaponPassiveName && weaponSheet.passiveDescription(build)}</Typography>\r\n            {build && <buildContext.Provider value={charData ? buildContextObj : { equippedBuild: build, newBuild: undefined, compareBuild: false, setCompareBuild: undefined }}>\r\n              <Box display=\"flex\" flexDirection=\"column\" gap={1}>\r\n                <WeaponStatsCard title={\"Main Stats\"} statsVals={{ atk: weaponDisplayMainVal, [substatKey]: substatKey ? weaponDisplaySubVal : undefined }} stats={build} />\r\n                <WeaponStatsCard title={\"Bonus Stats\"} statsVals={weaponBonusStats} stats={build} />\r\n              </Box>\r\n            </buildContext.Provider>}\r\n            {charData && sections ? (() => {\r\n              const { equippedBuild, newBuild } = charData\r\n              const characterKey = (newBuild ? newBuild : equippedBuild)?.characterKey as CharacterKey | undefined\r\n              return !!characterKey && < DocumentDisplay sections={sections} characterKey={characterKey} />\r\n            })() : null}\r\n          </Box>\r\n        </Box>\r\n      })()}\r\n    </CardContent>\r\n    {footer && id && <CardContent sx={{ py: 1 }}>\r\n      <Grid container>\r\n        <Grid item flexGrow={1}>\r\n          <CharacterDropdownButton noUnselect inventory value={location} onChange={equipOnChar} filter={filter} />\r\n        </Grid>\r\n        {!!onClose && <Grid item><CloseButton large onClick={onClose} /></Grid>}\r\n      </Grid>\r\n    </CardContent>}\r\n  </CardLight>\r\n}\r\nfunction SwapBtn({ onChangeId, weaponTypeKey }) {\r\n  const database = useContext(DatabaseContext)\r\n  const [show, setShow] = useState(false)\r\n  const open = () => setShow(true)\r\n  const close = () => setShow(false)\r\n\r\n  const clickHandler = (id) => {\r\n    onChangeId(id)\r\n    close()\r\n  }\r\n\r\n  const weaponSheets = usePromise(WeaponSheet.getAll(), [])\r\n\r\n  const weaponIdList = database.weapons.keys.filter(wKey => {\r\n    const dbWeapon = database._getWeapon(wKey)\r\n    if (!dbWeapon) return false\r\n    if (weaponTypeKey && weaponTypeKey !== weaponSheets?.[dbWeapon.key]?.weaponType) return false\r\n    return true\r\n  })\r\n\r\n\r\n  return <>\r\n    <Button color=\"info\" onClick={open} startIcon={<SwapHoriz />} >SWAP WEAPON</Button>\r\n    <ModalWrapper open={show} onClose={close} >\r\n      <CardDark>\r\n        <CardContent sx={{ py: 1 }}>\r\n          <Grid container>\r\n            <Grid item flexGrow={1}>\r\n              <Typography variant=\"h6\">{weaponTypeKey ? <ImgIcon src={Assets.weaponTypes[weaponTypeKey]} /> : null} Swap Weapon</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <CloseButton onClick={close} />\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n        <Divider />\r\n        <CardContent>\r\n          <Grid container spacing={1}>\r\n            {weaponIdList.map(weaponId =>\r\n              <Grid item key={weaponId} xs={6} sm={6} md={4} lg={3} >\r\n                <WeaponCard\r\n                  weaponId={weaponId}\r\n                  onClick={clickHandler}\r\n                />\r\n              </Grid>)}\r\n          </Grid>\r\n        </CardContent>\r\n      </CardDark>\r\n    </ModalWrapper>\r\n  </>\r\n}","import { ButtonProps, ToggleButton, ToggleButtonProps, styled } from \"@mui/material\";\r\n\r\ntype SolidColoredToggleButtonPartial = {\r\n  baseColor?: ButtonProps[\"color\"];\r\n  selectedColor?: ButtonProps[\"color\"];\r\n}\r\nexport type SolidColoredToggleButtonProps = SolidColoredToggleButtonPartial & ToggleButtonProps\r\n\r\n\r\nconst SolidColoredToggleButton = styled(ToggleButton, {\r\n  shouldForwardProp: (prop) => prop !== \"baseColor\" && prop !== \"selectedColor\"\r\n})<SolidColoredToggleButtonPartial>(({ theme, baseColor = \"primary\", selectedColor = \"success\" }) => ({\r\n  '&': {\r\n    backgroundColor: theme.palette[baseColor].main,\r\n    color: theme.palette[baseColor].contrastText,\r\n  },\r\n  '&:hover': {\r\n    backgroundColor: theme.palette[baseColor].dark,\r\n  },\r\n  '&.Mui-selected': {\r\n    backgroundColor: theme.palette[selectedColor].main,\r\n    color: theme.palette[selectedColor].contrastText,\r\n  },\r\n  '&.Mui-selected:hover': {\r\n    backgroundColor: theme.palette[selectedColor].dark,\r\n  },\r\n  '&.Mui-disabled': {\r\n    backgroundColor: theme.palette[baseColor].dark,\r\n  },\r\n  '&.Mui-selected.Mui-disabled': {\r\n    backgroundColor: theme.palette[selectedColor].dark,\r\n  },\r\n}));\r\n\r\nexport default SolidColoredToggleButton","import { Box, ToggleButtonGroup } from \"@mui/material\";\r\nimport { useCallback } from \"react\";\r\nimport { allElements, ElementKey } from \"../../Types/consts\";\r\nimport SolidColoredToggleButton from \"../SolidColoredToggleButton\";\r\nimport { SolidToggleButtonGroupProps } from \"../SolidToggleButtonGroup\";\r\nimport { uncoloredEleIcons } from \"../StatIcon\";\r\ntype ElementToggleProps = Omit<SolidToggleButtonGroupProps, \"onChange\" | \"value\"> & {\r\n  onChange: (value: ElementKey | \"\") => void\r\n  value: ElementKey | \"\"\r\n}\r\nexport default function ElementToggle({ value, onChange, ...props }: ElementToggleProps) {\r\n  const cb = useCallback((e, newVal) => onChange(newVal || \"\"), [onChange])\r\n  return <ToggleButtonGroup exclusive onChange={cb} value={value || allElements} {...props}>\r\n    {allElements.map(ele => <SolidColoredToggleButton key={ele} value={ele} selectedColor={ele} >\r\n      <Box sx={{ fontSize: \"2em\", lineHeight: 1 }}>{uncoloredEleIcons[ele]}</Box>\r\n    </SolidColoredToggleButton>)}\r\n  </ToggleButtonGroup>\r\n}\r\n","import { ExpandMore } from \"@mui/icons-material\"\r\nimport { Accordion, AccordionDetails, AccordionSummary, Box, CardContent, CardHeader, Collapse, Divider, Grid, Skeleton, Typography } from \"@mui/material\"\r\nimport { Suspense, useCallback, useContext, useMemo, useState } from \"react\"\r\nimport { buildContext } from \"../Build/Build\"\r\nimport Character from \"../Character/Character\"\r\nimport { getFormulaTargetsDisplayHeading } from \"../Character/CharacterUtil\"\r\nimport Formula from \"../Formula\"\r\nimport usePromise from \"../ReactHooks/usePromise\"\r\nimport { Sheets } from \"../ReactHooks/useSheets\"\r\nimport Stat, { FormulaDisplay } from \"../Stat\"\r\nimport { GetDependencies } from \"../StatDependency\"\r\nimport { IFieldDisplay } from \"../Types/IFieldDisplay\"\r\nimport { ICalculatedStats } from \"../Types/stats\"\r\nimport CardDark from \"./Card/CardDark\"\r\nimport CardLight from \"./Card/CardLight\"\r\nimport ColorText from \"./ColoredText\"\r\nimport ExpandButton from \"./ExpandButton\"\r\nimport ImgIcon from \"./Image/ImgIcon\"\r\n\r\nexport default function FormulaCalcCard({ sheets }: { sheets: Sheets }) {\r\n  const [expanded, setexpanded] = useState(false)\r\n  const toggle = useCallback(() => setexpanded(!expanded), [setexpanded, expanded])\r\n  return <CardLight>\r\n    <CardContent>\r\n      <Grid container>\r\n        <Grid item flexGrow={1}>\r\n          <Typography>Formulas {\"&\"} Calculations</Typography>\r\n          <Typography variant=\"caption\" color=\"text.secondary\">Expand to see every formula and all their calculations.</Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <ExpandButton\r\n            expand={expanded}\r\n            onClick={toggle}\r\n            aria-expanded={expanded}\r\n            aria-label=\"show more\"\r\n          >\r\n            <ExpandMore />\r\n          </ExpandButton>\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n    <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n      <CardContent sx={{ pt: 0 }}>\r\n        <CalculationDisplay sheets={sheets} />\r\n      </CardContent>\r\n    </Collapse>\r\n  </CardLight>\r\n}\r\n\r\nfunction CalculationDisplay({ sheets }: { sheets: Sheets }) {\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n  //choose which one to display stats for\r\n  const build = (newBuild ? newBuild : equippedBuild)!\r\n  const displayStatKeys = useMemo(() => Character.getDisplayStatKeys(build, sheets), [build, sheets])\r\n  if (!build || !displayStatKeys) return null\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />} >\r\n    {Object.entries(displayStatKeys).map(([sectionKey, fields]: [string, any]) => {\r\n      const header = getFormulaTargetsDisplayHeading(sectionKey, sheets, build)\r\n      return <CardDark key={sectionKey} sx={{ mb: 1 }}>\r\n        <CardHeader avatar={header.icon && <ImgIcon size={2} sx={{ m: -1 }} src={header.icon} />} title={header.title} titleTypographyProps={{ variant: \"subtitle1\" }} />\r\n        <Divider />\r\n        <CardContent>\r\n          {fields.map((field, fieldIndex) => {\r\n            if (Array.isArray(field))\r\n              return <FormulaCalculationField key={fieldIndex} fieldKeys={field} build={build} />\r\n            else if (typeof field === \"string\") {//simple statKey field\r\n              const subFormulaKeys: any[] = Stat.getPrintableFormulaStatKeyList(GetDependencies(build, build?.modifiers, [field]), build?.modifiers).reverse()\r\n              return Boolean(subFormulaKeys.length) && <Accordion sx={{ bgcolor: \"contentLight.main\" }} key={fieldIndex}>\r\n                <AccordionSummary expandIcon={<ExpandMore />}>\r\n                  <Typography>{Stat.printStat(field, build)}</Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  {subFormulaKeys.map(subKey =>\r\n                    <Typography key={subKey}>{Stat.printStat(subKey, build)} = <small><FormulaDisplay statKey={subKey} stats={build} modifiers={build.modifiers} expand={false} /></small></Typography>\r\n                  )}\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            }\r\n            return null\r\n          })}\r\n        </CardContent>\r\n      </CardDark>\r\n    })}\r\n  </Suspense>\r\n}\r\n\r\nfunction FormulaCalculationField({ fieldKeys, build }: { fieldKeys: string[], build: ICalculatedStats }) {\r\n  const formula = usePromise(Formula.get(fieldKeys), [fieldKeys])\r\n  if (!formula) return null\r\n  const formulaField = (formula as any).field as IFieldDisplay\r\n  const fieldText = Character.getTalentFieldValue(formulaField, \"text\", build)\r\n  const fieldVariant = Character.getTalentFieldValue(formulaField, \"variant\", build)\r\n  const fieldFormulaText = Character.getTalentFieldValue(formulaField, \"formulaText\", build)\r\n  const fieldFixed = Character.getTalentFieldValue(formulaField, \"fixed\", build) ?? 0\r\n  const fieldUnit = Character.getTalentFieldValue(formulaField, \"unit\", build) ?? \"\"\r\n  const [fieldFormula, fieldFormulaDependency] = Character.getTalentFieldValue(formulaField, \"formula\", build, [] as any)\r\n  if (!fieldFormula || !fieldFormulaDependency) return null\r\n  const fieldValue = fieldFormula?.(build)?.toFixed?.(fieldFixed)\r\n  const subFormulaKeys = Stat.getPrintableFormulaStatKeyList(GetDependencies(build, build?.modifiers, fieldFormulaDependency), build?.modifiers).reverse()\r\n  return <Accordion sx={{ bgcolor: \"contentLight.main\" }}>\r\n    <AccordionSummary expandIcon={<ExpandMore />}>\r\n      <Typography><Box color={`${fieldVariant}.main`} component=\"strong\">{fieldText}</Box> <ColorText color=\"info\">{fieldValue}{fieldUnit}</ColorText></Typography>\r\n    </AccordionSummary>\r\n    <AccordionDetails>\r\n      <Typography><Box color={`${fieldVariant}.main`} component=\"strong\">{fieldText}</Box> <ColorText color=\"info\">{fieldValue}</ColorText> = <small>{fieldFormulaText}</small></Typography>\r\n      {subFormulaKeys.map(subKey =>\r\n        <Typography key={subKey}>{Stat.printStat(subKey, build)} = <small><FormulaDisplay statKey={subKey} stats={build} modifiers={build.modifiers} expand={false} /></small></Typography>\r\n      )}\r\n    </AccordionDetails>\r\n  </Accordion>\r\n}","import { Button, Card, CardContent, Divider, Grid, ToggleButton, Typography } from '@mui/material';\r\nimport { useCallback, useContext, useEffect, useMemo } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ArtifactCard from '../../Artifact/ArtifactCard';\r\nimport { ArtifactSheet } from '../../Artifact/ArtifactSheet';\r\nimport SetEffectDisplay from '../../Artifact/Component/SetEffectDisplay';\r\nimport { buildContext } from '../../Build/Build';\r\nimport CardLight from '../../Components/Card/CardLight';\r\nimport SolidToggleButtonGroup from '../../Components/SolidToggleButtonGroup';\r\nimport { database as localDatabase, DatabaseContext } from '../../Database/Database';\r\nimport useForceUpdate from '../../ReactHooks/useForceUpdate';\r\nimport usePromise from '../../ReactHooks/usePromise';\r\nimport { Sheets } from '../../ReactHooks/useSheets';\r\nimport { ICachedCharacter } from '../../Types/character';\r\nimport { allSlotKeys } from '../../Types/consts';\r\nimport { objectFromKeyMap } from '../../Util/Util';\r\nimport Character from \"../Character\";\r\nimport StatDisplayComponent from './StatDisplayComponent';\r\n\r\ntype CharacterArtifactPaneProps = {\r\n  sheets: Sheets\r\n  character: ICachedCharacter,\r\n}\r\nfunction CharacterArtifactPane({ sheets, character, character: { key: characterKey } }: CharacterArtifactPaneProps) {\r\n  const { newBuild, equippedBuild, compareBuild, setCompareBuild } = useContext(buildContext)\r\n  const database = useContext(DatabaseContext)\r\n  const history = useHistory()\r\n  //choose which one to display stats for\r\n  const stats = (newBuild ? newBuild : equippedBuild)\r\n  const mainStatAssumptionLevel = stats?.mainStatAssumptionLevel ?? 0\r\n  const statKeys = useMemo(() => stats && sheets && Character.getDisplayStatKeys(stats, sheets), [stats, sheets])\r\n  const edit = useCallback(\r\n    artid => history.push({\r\n      pathname: \"/artifact\",\r\n      artToEditId: artid\r\n    } as any), [history])\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n\r\n  // TODO: We can also listen only to equipped artifacts\r\n  const [, updateArt] = useForceUpdate()\r\n  useEffect(() => database.followAnyArt(updateArt))\r\n\r\n  const equipArts = useCallback(() => {\r\n    if (!window.confirm(\"Do you want to equip this artifact build to this character?\")) return\r\n    if (!newBuild) return\r\n    newBuild.equippedArtifacts && database.equipArtifacts(characterKey, newBuild.equippedArtifacts)\r\n  }, [characterKey, newBuild, database])\r\n\r\n  const unequipArts = useCallback(() => {\r\n    if (!window.confirm(\"Do you want to move all the artifacts equipped to inventory?\")) return\r\n    database.equipArtifacts(characterKey, objectFromKeyMap(allSlotKeys, () => \"\"))\r\n  }, [characterKey, database])\r\n  if (!stats) return null\r\n  return <>\r\n    <CardLight sx={{ mb: 1 }}>\r\n      <CardContent>\r\n        <StatDisplayComponent {...{ sheets, character, equippedBuild: (newBuild && !compareBuild) ? undefined : equippedBuild, newBuild, statsDisplayKeys: statKeys }} />\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container spacing={1}>\r\n          <Grid item>\r\n            {newBuild ? <Button onClick={equipArts} className=\"mr-2\">Equip artifacts</Button> : (database === localDatabase && <Button color=\"error\" onClick={unequipArts}>Unequip all artifacts</Button>)}\r\n          </Grid>\r\n          <Grid item>\r\n            {/* Compare against new build toggle */}\r\n            {!!newBuild && <SolidToggleButtonGroup exclusive value={compareBuild} onChange={(e, v) => setCompareBuild?.(v)} size=\"small\">\r\n              <ToggleButton value={false} disabled={!compareBuild}>\r\n                <small>Show New artifact Stats</small>\r\n              </ToggleButton>\r\n              <ToggleButton value={true} disabled={compareBuild}>\r\n                <small>Compare against equipped artifacts</small>\r\n              </ToggleButton>\r\n            </SolidToggleButtonGroup>}\r\n          </Grid>\r\n          <Grid item flexGrow={1}></Grid>\r\n          <Grid item>{!!mainStatAssumptionLevel && <Card sx={{ p: 1, bgcolor: t => t.palette.warning.dark }}><Typography><strong>Assume Main Stats are Level {mainStatAssumptionLevel}</strong></Typography></Card>}</Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </CardLight>\r\n    <Grid container spacing={1}>\r\n      <Grid item xs={12} sm={6} md={4} >\r\n        <CardLight sx={{ height: \"100%\" }} ><CardContent sx={{ height: \"100%\" }}><Grid container spacing={1} flexDirection=\"column\" height=\"100%\" >\r\n          {artifactSheets && Object.entries(ArtifactSheet.setEffects(artifactSheets, stats.setToSlots)).map(([setKey, setNumKeyArr]) =>\r\n            <Grid item key={setKey} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n              <Typography variant=\"subtitle1\">{artifactSheets?.[setKey].name ?? \"\"}</Typography>\r\n              {setNumKeyArr.map(setNumKey => <SetEffectDisplay key={setKey + setNumKey} {...{ setKey, setNumKey, equippedBuild, newBuild }} />)}\r\n            </Grid>\r\n          )}\r\n        </Grid></CardContent></CardLight>\r\n      </Grid>\r\n      {allSlotKeys.map(slotKey =>\r\n        !!stats?.equippedArtifacts?.[slotKey] && <Grid item xs={6} md={4} key={stats?.equippedArtifacts?.[slotKey]} >\r\n          <ArtifactCard artifactId={stats?.equippedArtifacts?.[slotKey]} mainStatAssumptionLevel={mainStatAssumptionLevel} onEdit={() => edit(stats?.equippedArtifacts?.[slotKey])} />\r\n        </Grid>\r\n      )}\r\n    </Grid>\r\n  </>\r\n}\r\nexport default CharacterArtifactPane\r\n","import { faEdit, faSave } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Badge, Box, Button, CardContent, CardMedia, Divider, Grid, Typography } from \"@mui/material\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport { buildContext } from \"../../Build/Build\";\r\nimport CardLight from \"../../Components/Card/CardLight\";\r\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\r\nimport { Stars } from \"../../Components/StarDisplay\";\r\nimport StatDisplay from \"../../Components/StatDisplay\";\r\nimport StatIcon from \"../../Components/StatIcon\";\r\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\r\nimport Stat from \"../../Stat\";\r\nimport { ICachedCharacter, TalentSheetElementKey } from \"../../Types/character\";\r\nimport { allElementsWithPhy } from \"../../Types/consts\";\r\nimport { ICalculatedStats } from \"../../Types/stats\";\r\nimport { characterStatKeys } from \"../../Util/StatUtil\";\r\nimport WeaponDisplayCard from \"../../Weapon/WeaponDisplayCard\";\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\nimport StatInput from \"../StatInput\";\r\ntype CharacterOverviewPaneProps = {\r\n  characterSheet: CharacterSheet;\r\n  character: ICachedCharacter\r\n}\r\nexport default function CharacterOverviewPane({ characterSheet, character, character: { constellation, key: characterKey } }: CharacterOverviewPaneProps) {\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  if (!build) return null\r\n  const { tlvl } = build\r\n  const elementKey = build.characterEle\r\n  const weaponTypeKey = characterSheet.weaponTypeKey\r\n  return <Grid container spacing={1}>\r\n    <Grid item xs={12} md={3}  >\r\n      {/* Image card with star and name and level */}\r\n      <CardLight >\r\n        <CardMedia src={characterSheet.cardImg} component=\"img\" width=\"100%\" height=\"auto\" />\r\n        <CardContent>\r\n          <Typography variant=\"h4\" >{characterSheet.name} <ImgIcon src={Assets.weaponTypes?.[weaponTypeKey]} /> {StatIcon[elementKey]} </Typography>\r\n          <Typography variant=\"h6\"><Stars stars={characterSheet.rarity} colored /></Typography>\r\n          <Typography variant=\"h5\">Lvl. {Character.getLevelString(character)}</Typography>\r\n          <Grid container spacing={1} mt={1}>\r\n            {([\"auto\", \"skill\", \"burst\"] as TalentSheetElementKey[]).map(tKey =>\r\n              <Grid item xs={4} key={tKey}>\r\n                <Badge badgeContent={tlvl[tKey] + 1} color={((tKey === \"skill\" && build.skillBoost) || (tKey === \"burst\" && build.burstBoost)) ? \"info\" : \"secondary\"}\r\n                  overlap=\"circular\"\r\n                  anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'right',\r\n                  }}\r\n                  sx={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    \"& > .MuiBadge-badge\": {\r\n                      fontSize: \"1.25em\",\r\n                      padding: \".25em .4em\",\r\n                      borderRadius: \".5em\",\r\n                      lineHeight: 1,\r\n                      height: \"1.25em\"\r\n                    }\r\n                  }}>\r\n                  <Box component=\"img\" src={characterSheet.getTalentOfKey(tKey, build.characterEle)?.img} width=\"100%\" height=\"auto\" />\r\n                </Badge>\r\n              </Grid>)}\r\n          </Grid>\r\n          <Typography sx={{ textAlign: \"center\", mt: 1 }} variant=\"h6\">{characterSheet.constellationName}</Typography>\r\n          <Grid container spacing={1}>\r\n            {[...Array(6).keys()].map(i =>\r\n              <Grid item xs={4} key={i}>\r\n                <Box component=\"img\" src={characterSheet.getTalentOfKey(`constellation${i + 1}` as TalentSheetElementKey, build.characterEle)?.img}\r\n                  sx={{\r\n                    cursor: \"pointer\",\r\n                    ...(constellation > i ? {} : { filter: \"brightness(50%)\" })\r\n                  }}\r\n                  width=\"100%\" height=\"auto\"\r\n                  onClick={() => characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })} />\r\n              </Grid>)}\r\n          </Grid>\r\n        </CardContent>\r\n      </CardLight>\r\n    </Grid>\r\n    <Grid item xs={12} md={9} sx={{\r\n      \"> div:not(:last-child)\": { mb: 1 }\r\n    }} >\r\n      <WeaponDisplayCard {...{ charData: { character, characterSheet, equippedBuild, newBuild, characterDispatch }, weaponId: character.equippedWeapon }} />\r\n      <MainStatsCards {...{ characterSheet, character, equippedBuild, newBuild }} />\r\n    </Grid>\r\n  </Grid >\r\n}\r\nconst EDIT = \"Edit Stats\"\r\nconst EXIT = \"EXIT\"\r\n\r\nconst additionalKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"]\r\nconst displayStatKeys = [\"characterATK\", \"finalATK\", \"finalHP\", \"finalDEF\"]\r\ndisplayStatKeys.push(...additionalKeys)\r\nconst editStatKeys = [\"hp\", \"hp_\", \"def\", \"def_\", \"atk\", \"atk_\"]\r\neditStatKeys.push(...additionalKeys)\r\nconst otherStatKeys: any[] = [];\r\n\r\nallElementsWithPhy.forEach(ele => {\r\n  otherStatKeys.push(`${ele}_dmg_`)\r\n  otherStatKeys.push(`${ele}_res_`)\r\n})\r\notherStatKeys.push(\"stamina\", \"incHeal_\", \"shield_\", \"cdRed_\")\r\n\r\nconst miscStatkeys = [\r\n  \"normal_dmg_\", \"normal_critRate_\",\r\n  \"charged_dmg_\", \"charged_critRate_\",\r\n  \"plunging_dmg_\", \"plunging_critRate_\",\r\n  \"skill_dmg_\", \"skill_critRate_\",\r\n  \"burst_dmg_\", \"burst_critRate_\",\r\n  \"dmg_\", \"electrocharged_dmg_\",\r\n  \"vaporize_dmg_\", \"swirl_dmg_\",\r\n  \"moveSPD_\", \"atkSPD_\",\r\n  \"weakspotDMG_\",\r\n]\r\n\r\nconst resetString = {\r\n  \"characterATK\": \"Override Base ATK\",\r\n  \"characterHP\": \"Override Base HP\",\r\n  \"characterDEF\": \"Override Base DEF\"\r\n}\r\ntype MainStatsCardsProps = {\r\n  characterSheet: CharacterSheet,\r\n  character: ICachedCharacter,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats\r\n}\r\nconst statBreakpoint = {\r\n  xs: 12, sm: 6, md: 6, lg: 4,\r\n} as const\r\n\r\n\r\nfunction MainStatsCards({ characterSheet, character, character: { key: characterKey, level, ascension }, equippedBuild, newBuild }: MainStatsCardsProps) {\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n\r\n  const specializedStatKey = characterSheet.getSpecializedStat(character.ascension)\r\n  const specializedStatVal = characterSheet.getSpecializedStatVal(character.ascension)\r\n  const specializedStatUnit = Stat.getStatUnit(specializedStatKey)\r\n\r\n  const displayNewBuildProps = { character, equippedBuild, newBuild }\r\n\r\n  return <>\r\n    <TeamBuffDisplay character={character} />\r\n    <StatDisplayCard\r\n      title=\"Main Stats\"\r\n      content={<Grid container columnSpacing={{ xs: 2, lg: 3 }} rowSpacing={1}>\r\n        {displayStatKeys.map(statKey => <Grid item key={statKey} {...statBreakpoint} >\r\n          <StatDisplay statKey={statKey} {...displayNewBuildProps} />\r\n        </Grid>)}\r\n        <Grid item {...statBreakpoint} display=\"flex\" flexDirection=\"row\" justifyContent=\"space-between\">\r\n          <span><b>Specialized:</b> <span>{specializedStatKey && StatIcon[specializedStatKey]} {Stat.getStatName(specializedStatKey)}</span></span>\r\n          <span >{`${specializedStatVal.toFixed(Stat.fixedUnit(specializedStatKey))}${specializedStatUnit}`}</span>\r\n        </Grid>\r\n      </Grid>}\r\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\r\n        {characterStatKeys.map(statKey => {\r\n          const defVal = Math.round(characterSheet.getBase(statKey, level, ascension))\r\n          return <Grid item xs={12} lg={6} key={statKey}>\r\n            <StatInput\r\n              name={<span>{StatIcon[statKey]} {resetString[statKey]}</span>}\r\n              placeholder={Stat.getStatNameRaw(statKey)}\r\n              value={character.bonusStats[statKey] ?? defVal}\r\n              defaultValue={defVal}\r\n              percent={Stat.getStatUnit(statKey) === \"%\"}\r\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\r\n              onReset={() => characterDispatch({ type: \"resetStats\", statKey })}\r\n            />\r\n          </Grid>\r\n        })}\r\n        {editStatKeys.map(statKey =>\r\n          <Grid item xs={12} lg={6} key={statKey}>\r\n            <StatInput\r\n              name={<span>{StatIcon[statKey]} {Stat.getStatNameWithPercent(statKey)}</span>}\r\n              placeholder={Stat.getStatNameRaw(statKey)}\r\n              value={character.bonusStats[statKey] ?? 0}\r\n              percent={Stat.getStatUnit(statKey) === \"%\"}\r\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\r\n            />\r\n          </Grid>)}\r\n      </Grid>}\r\n    />\r\n    <StatDisplayCard\r\n      title=\"Other Stats\"\r\n      content={<Grid container columnSpacing={2} rowSpacing={1}>\r\n        {otherStatKeys.map(statKey => <Grid item {...statBreakpoint} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Grid>)}\r\n      </Grid>}\r\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\r\n        {otherStatKeys.map(statKey =>\r\n          <Grid item xs={12} lg={6} key={statKey}>\r\n            <StatInput\r\n              name={<span>{StatIcon[statKey]} {Stat.getStatName(statKey)}</span>}\r\n              placeholder={Stat.getStatNameRaw(statKey)}\r\n              value={character.bonusStats[statKey] ?? (statKey === \"stamina\" ? 100 : 0)}\r\n              percent={Stat.getStatUnit(statKey) === \"%\"}\r\n              defaultValue={statKey === \"stamina\" ? 100 : undefined}\r\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\r\n            />\r\n          </Grid>)}\r\n      </Grid>}\r\n    />\r\n    <StatDisplayCard\r\n      title=\"Misc Stats\"\r\n      content={<Grid container columnSpacing={2} rowSpacing={1}>\r\n        {miscStatkeys.map(statKey => <Grid item {...statBreakpoint} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Grid>)}\r\n      </Grid>}\r\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\r\n        {miscStatkeys.map(statKey =>\r\n          <Grid item xs={12} lg={6} key={statKey}>\r\n            <StatInput\r\n              name={<span>{StatIcon[statKey]} {Stat.getStatName(statKey)}</span>}\r\n              placeholder={Stat.getStatNameRaw(statKey)}\r\n              value={character.bonusStats[statKey] ?? 0}\r\n              percent={Stat.getStatUnit(statKey) === \"%\"}\r\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\r\n            />\r\n          </Grid>)}\r\n      </Grid>}\r\n    />\r\n  </>\r\n}\r\nfunction StatDisplayCard({ title, content, editContent }) {\r\n  const [edit, setedit] = useState(false)\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Box display=\"flex\" justifyContent=\"space-between\">\r\n        <Typography variant=\"subtitle1\">{title}</Typography>\r\n        <Button size=\"small\" color={edit ? \"error\" : \"info\"} onClick={() => setedit(!edit)} >\r\n          <span><FontAwesomeIcon icon={edit ? faSave : faEdit} /> {edit ? EXIT : EDIT}</span>\r\n        </Button>\r\n      </Box>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      {edit ? editContent : content}\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\nfunction TeamBuffDisplay({ character }: { character: ICachedCharacter }) {\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n  const build = (newBuild ? newBuild : equippedBuild) as ICalculatedStats\r\n  if (!Object.keys(build.partyBuff).length) return null\r\n  return <CardLight>\r\n    <CardContent>\r\n      Team Buffs\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Grid container columnSpacing={2} rowSpacing={1}>\r\n        {Object.entries(build.partyBuff).map(([statKey, value]) => <Grid item {...statBreakpoint} key={statKey} >\r\n          <StatDisplay character={character} newBuild={newBuild} equippedBuild={equippedBuild} statKey={statKey} partyBuff />\r\n        </Grid>)}\r\n      </Grid>\r\n    </CardContent>\r\n  </CardLight>\r\n}","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Box, CardActionArea, CardContent, Divider, Grid, MenuItem, Typography } from \"@mui/material\";\r\nimport React, { useCallback, useContext, useState } from 'react';\r\nimport { buildContext } from \"../../Build/Build\";\r\nimport BootstrapTooltip from \"../../Components/BootstrapTooltip\";\r\nimport CardDark from \"../../Components/Card/CardDark\";\r\nimport CardLight from \"../../Components/Card/CardLight\";\r\nimport ColorText from \"../../Components/ColoredText\";\r\nimport ConditionalWrapper from \"../../Components/ConditionalWrapper\";\r\nimport DocumentDisplay from \"../../Components/DocumentDisplay\";\r\nimport DropdownButton from \"../../Components/DropdownMenu/DropdownButton\";\r\nimport StatIcon from \"../../Components/StatIcon\";\r\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\r\nimport Stat from \"../../Stat\";\r\nimport { ElementToReactionKeys } from \"../../StatData\";\r\nimport { ICachedCharacter, TalentSheetElementKey } from \"../../Types/character\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\ntype CharacterTalentPaneProps = {\r\n  characterSheet: CharacterSheet,\r\n  character: ICachedCharacter,\r\n}\r\nexport default function CharacterTalentPane({ characterSheet, character, character: { ascension, constellation, key: characterKey } }: CharacterTalentPaneProps) {\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  const skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]] as [TalentSheetElementKey, string][]\r\n  const passivesList: [tKey: TalentSheetElementKey, tText: string, asc: number][] = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  return <>\r\n    <ReactionDisplay characterSheet={characterSheet} />\r\n    <Grid container spacing={1} sx={{ mb: 1 }}>\r\n      {/* auto, skill, burst */}\r\n      {skillBurstList.map(([tKey, tText]) =>\r\n        <Grid item key={tKey} xs={12} md={6} lg={4} >\r\n          <SkillDisplayCard\r\n            characterSheet={characterSheet}\r\n            character={character}\r\n            characterDispatch={characterDispatch}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Grid>)}\r\n      {!!characterSheet.getTalentOfKey(\"sprint\", build?.characterEle) && <Grid item xs={12} md={6} lg={4} >\r\n        <SkillDisplayCard\r\n          characterSheet={characterSheet}\r\n          character={character}\r\n          characterDispatch={characterDispatch}\r\n          talentKey=\"sprint\"\r\n          subtitle=\"Alternative Sprint\"\r\n        />\r\n      </Grid>}\r\n      {!!characterSheet.getTalentOfKey(\"passive\", build?.characterEle) && <Grid item xs={12} md={6} lg={4} >\r\n        <SkillDisplayCard\r\n          characterSheet={characterSheet}\r\n          character={character}\r\n          characterDispatch={characterDispatch}\r\n          talentKey=\"passive\"\r\n          subtitle=\"Passive\"\r\n        />\r\n      </Grid>}\r\n    </Grid>\r\n    <Grid container spacing={1}>\r\n      {/* passives */}\r\n      {passivesList.map(([tKey, tText, asc]) => {\r\n        let enabled = ascension >= asc\r\n        if (!characterSheet.getTalentOfKey(tKey, build?.characterEle)) return null\r\n        return <Grid item key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} >\r\n          <SkillDisplayCard\r\n            characterSheet={characterSheet}\r\n            character={character}\r\n            characterDispatch={characterDispatch}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Grid>\r\n      })}\r\n    </Grid>\r\n    <Typography variant=\"h6\" sx={{ textAlign: \"center\" }}>Constellation Lv. {constellation}</Typography>\r\n    <Grid container spacing={1}>\r\n      {/* constellations */}\r\n      {[...Array(6).keys()].map(i => {\r\n        let tKey = `constellation${i + 1}` as TalentSheetElementKey\r\n        return <Grid item key={i} xs={12} md={4}\r\n          sx={{ opacity: constellation > i ? 1 : 0.5 }}>\r\n          <SkillDisplayCard\r\n            characterSheet={characterSheet}\r\n            character={character}\r\n            characterDispatch={characterDispatch}\r\n            talentKey={tKey}\r\n            subtitle={`Contellation Lv. ${i + 1}`}\r\n            onClickTitle={() => characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })}\r\n          />\r\n        </Grid>\r\n      })}\r\n    </Grid>\r\n  </>\r\n}\r\nconst ReactionComponents = {\r\n  superconduct_hit: SuperConductCard,\r\n  electrocharged_hit: ElectroChargedCard,\r\n  overloaded_hit: OverloadedCard,\r\n  pyro_swirl_hit: SwirlCard,// TODO: Assumes if character can pyro swirl, it can swirl every element. This behaviour will need to be changed for characters that can only swirl specific elements.\r\n  shattered_hit: ShatteredCard,\r\n  crystalize_hit: CrystalizeCard,\r\n}\r\nfunction ReactionDisplay({ characterSheet }: { characterSheet: CharacterSheet }) {\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  if (!build) return null\r\n  const charEleKey = build.characterEle\r\n  const eleInterArr = [...(ElementToReactionKeys[charEleKey] || [])]\r\n  if (!eleInterArr.includes(\"shattered_hit\") && characterSheet.weaponTypeKey === \"claymore\") eleInterArr.push(\"shattered_hit\")\r\n  return <CardLight sx={{ mb: 1 }}>\r\n    <CardContent>\r\n      <Grid container spacing={1}>\r\n        {eleInterArr.map(key => {\r\n          const Ele = ReactionComponents[key]\r\n          if (!Ele) return null\r\n          return <Grid item key={key}><Ele stats={build} /></Grid>\r\n        })}\r\n      </Grid>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\nfunction SuperConductCard({ stats }) {\r\n  const sKey = \"superconduct_hit\"\r\n  return <CardDark><CardContent sx={{ p: 1 }}>\r\n    <Typography color=\"superconduct.main\">{Stat.getStatName(sKey)} {StatIcon.electro}+{StatIcon.cryo} <strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></Typography>\r\n  </CardContent></CardDark>\r\n}\r\nfunction ElectroChargedCard({ stats }) {\r\n  const sKey = \"electrocharged_hit\"\r\n  return <CardDark><CardContent sx={{ p: 1 }}>\r\n    <Typography color=\"electrocharged.main\">{Stat.getStatName(sKey)} {StatIcon.electro}+{StatIcon.hydro} <strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></Typography>\r\n  </CardContent></CardDark>\r\n}\r\nfunction OverloadedCard({ stats }) {\r\n  const sKey = \"overloaded_hit\"\r\n  return <CardDark><CardContent sx={{ p: 1 }}>\r\n    <Typography color=\"overloaded.main\" >{Stat.getStatName(sKey)} {StatIcon.electro}+{StatIcon.pyro} <strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></Typography>\r\n  </CardContent></CardDark>\r\n}\r\n\r\nconst swirlEleToDisplay = {\r\n  \"pyro\": <span>{Stat.getStatName(\"pyro_swirl_hit\")} {StatIcon.pyro} + {StatIcon.anemo}</span>,\r\n  \"electro\": <span>{Stat.getStatName(\"electro_swirl_hit\")} {StatIcon.electro}+{StatIcon.anemo}</span>,\r\n  \"cryo\": <span>{Stat.getStatName(\"cryo_swirl_hit\")} {StatIcon.cryo} + {StatIcon.anemo}</span>,\r\n  \"hydro\": <span>{Stat.getStatName(\"hydro_swirl_hit\")} {StatIcon.hydro} + {StatIcon.anemo}</span>\r\n} as const\r\nfunction SwirlCard({ stats }) {\r\n  const [ele, setele] = useState(Object.keys(swirlEleToDisplay)[0])\r\n  const sKey = `${ele}_swirl_hit`\r\n  return <CardDark sx={{ display: \"flex\" }}>\r\n    <DropdownButton size=\"small\" title={swirlEleToDisplay[ele]} color=\"success\">\r\n      {Object.entries(swirlEleToDisplay).map(([key, element]) => <MenuItem key={key} selected={ele === key} disabled={ele === key} onClick={() => setele(key)}>{element}</MenuItem>)}\r\n    </DropdownButton>\r\n    <Box sx={{ color: `${ele}.main`, p: 1 }}><strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></Box>\r\n  </CardDark>\r\n}\r\nfunction ShatteredCard({ stats }) {\r\n  const sKey = \"shattered_hit\"\r\n  const information = <BootstrapTooltip placement=\"top\" title={<Typography>Claymores, Plunging Attacks and <ColorText color=\"geo\">Geo DMG</ColorText></Typography>}>\r\n    <Box component=\"span\" sx={{ cursor: \"help\" }}><FontAwesomeIcon icon={faQuestionCircle} /></Box>\r\n  </BootstrapTooltip>\r\n\r\n  return <CardDark><CardContent sx={{ p: 1 }}>\r\n    <ColorText color=\"shattered\">{Stat.getStatName(sKey)} {StatIcon.hydro}+{StatIcon.cryo}+ <ColorText color=\"physical\"><small>Heavy Attack{information} </small></ColorText> <strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></ColorText>\r\n  </CardContent></CardDark>\r\n}\r\nconst crystalizeEleToDisplay = {\r\n  \"default\": <ColorText color=\"crystalize\">{Stat.getStatName(\"crystalize_hit\")} {StatIcon.electro}/{StatIcon.hydro}/{StatIcon.pyro}/{StatIcon.cryo}+{StatIcon.geo}</ColorText>,\r\n  \"pyro\": <span>{Stat.getStatName(\"pyro_crystalize_hit\")} {StatIcon.pyro}+{StatIcon.geo}</span>,\r\n  \"electro\": <span>{Stat.getStatName(\"electro_crystalize_hit\")} {StatIcon.electro}+{StatIcon.geo}</span>,\r\n  \"cryo\": <span>{Stat.getStatName(\"cryo_crystalize_hit\")} {StatIcon.cryo}+{StatIcon.geo}</span>,\r\n  \"hydro\": <span>{Stat.getStatName(\"hydro_crystalize_hit\")} {StatIcon.hydro}+{StatIcon.geo}</span>\r\n} as const\r\nfunction CrystalizeCard({ stats }) {\r\n  const [ele, setele] = useState(Object.keys(crystalizeEleToDisplay)[0])\r\n  const sKey = ele === \"default\" ? \"crystalize_hit\" : `${ele}_crystalize_hit`\r\n  return <CardDark sx={{ display: \"flex\" }}>\r\n    <DropdownButton size=\"small\" title={crystalizeEleToDisplay[ele]} color=\"success\">\r\n      {Object.entries(crystalizeEleToDisplay).map(([key, element]) => <MenuItem key={key} selected={ele === key} disabled={ele === key} onClick={() => setele(key)}>{element}</MenuItem>)}\r\n    </DropdownButton>\r\n    <Box sx={{ color: `${ele}.main`, p: 1 }}><strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></Box>\r\n  </CardDark>\r\n}\r\n\r\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\r\ntype SkillDisplayCardProps = {\r\n  characterSheet: CharacterSheet\r\n  character: ICachedCharacter,\r\n  characterDispatch: (any) => void,\r\n  talentKey: TalentSheetElementKey,\r\n  subtitle: string,\r\n  onClickTitle?: (any) => any\r\n}\r\nfunction SkillDisplayCard({ characterSheet, character: { talent, ascension, key: characterKey }, characterDispatch, talentKey, subtitle, onClickTitle }: SkillDisplayCardProps) {\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n  let build = newBuild ? newBuild : equippedBuild\r\n\r\n  const actionWrapeprFunc = useCallback(\r\n    children => <CardActionArea onClick={onClickTitle}>{children}</CardActionArea>,\r\n    [onClickTitle],\r\n  )\r\n\r\n  if (!build) return null\r\n  let header: Displayable | null = null\r\n\r\n  if (talentKey in talent) {\r\n    const levelBoost: number = build[`${talentKey}Boost`] ?? 0\r\n    const talentLvlKey = talent[talentKey] + levelBoost\r\n    const setTalentLevel = (tKey, newTalentLevelKey) => {\r\n      talent[tKey] = newTalentLevelKey\r\n      characterDispatch({ talent })\r\n    }\r\n    header = <>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <DropdownButton fullWidth title={`Talent Lv. ${talentLvlKey}`} color={levelBoost ? \"info\" : \"primary\"}>\r\n          {[...Array(talentLimits[ascension]).keys()].map(i =>\r\n            <MenuItem key={i} selected={talent[talentKey] === (i + 1)} disabled={talent[talentKey] === (i + 1)} onClick={() => setTalentLevel(talentKey, i + 1)}>Talent Lv. {i + levelBoost + 1}</MenuItem>)}\r\n        </DropdownButton>\r\n      </CardContent>\r\n      <Divider />\r\n    </>\r\n  }\r\n  const talentSheet = characterSheet.getTalentOfKey(talentKey, build.characterEle)\r\n\r\n  return <CardLight sx={{ height: \"100%\" }}>\r\n    {header}\r\n    <CardContent>\r\n      <ConditionalWrapper condition={!!onClickTitle} wrapper={actionWrapeprFunc} >\r\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\r\n          <Grid item>\r\n            <Box component=\"img\" src={talentSheet?.img} sx={{ width: 60, height: \"auto\" }} />\r\n          </Grid>\r\n          <Grid item flexGrow={1} sx={{ pl: 1 }}>\r\n            <Typography variant=\"h6\">{talentSheet?.name}</Typography>\r\n            <Typography variant=\"subtitle1\">{subtitle}</Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </ConditionalWrapper>\r\n      {/* Display document sections */}\r\n      {talentSheet?.sections ? <DocumentDisplay sections={talentSheet.sections} characterKey={characterKey} /> : null}\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n","import { PersonAdd } from \"@mui/icons-material\";\r\nimport { CardContent, CardHeader, Divider, Grid } from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\nimport React, { useContext } from 'react';\r\nimport { buildContext } from \"../../Build/Build\";\r\nimport CardDark from \"../../Components/Card/CardDark\";\r\nimport CardLight from \"../../Components/Card/CardLight\";\r\nimport CharacterDropdownButton from \"../../Components/Character/CharacterDropdownButton\";\r\nimport ConditionalDisplay from \"../../Components/ConditionalDisplay\";\r\nimport StatDisplay from \"../../Components/StatDisplay\";\r\nimport Conditional from \"../../Conditional/Conditional\";\r\nimport resonanceSheets from \"../../Conditional/Resonance\";\r\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\r\nimport useCharSelectionCallback from \"../../ReactHooks/useCharSelectionCallback\";\r\nimport useSheets, { Sheets } from \"../../ReactHooks/useSheets\";\r\nimport { ICachedCharacter } from \"../../Types/character\";\r\nimport { CharacterKey } from \"../../Types/consts\";\r\nimport { ICalculatedStats } from \"../../Types/stats\";\r\nimport CharacterCard from \"../CharacterCard\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\ntype CharacterTalentPaneProps = {\r\n  characterSheet: CharacterSheet,\r\n  character: ICachedCharacter,\r\n}\r\nexport default function CharacterTeamBuffsPane({ character, character: { key: characterKey, team } }: CharacterTalentPaneProps) {\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n\r\n  const build = (newBuild ? newBuild : equippedBuild) as ICalculatedStats\r\n  const sheets = useSheets()\r\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1} alignItems=\"stretch\">\r\n    <TeamBuffDisplay character={character} />\r\n    <ResonanceDisplay characterKey={characterKey} build={build} />\r\n    <Grid container spacing={1}>\r\n      {sheets && build.teamStats.map((tStats, i) => <Grid item xs={12} md={6} lg={4} key={i}>\r\n        <TeammateDisplay character={character} sheets={sheets} index={i} />\r\n      </Grid>)}\r\n    </Grid>\r\n  </Box>\r\n}\r\nconst statBreakpoint = {\r\n  xs: 12, sm: 6, md: 6, lg: 4,\r\n} as const\r\nfunction TeamBuffDisplay({ character }: { character: ICachedCharacter }) {\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n  const build = (newBuild ? newBuild : equippedBuild) as ICalculatedStats\r\n  if (!Object.keys(build.partyBuff).length) return null\r\n  return <CardLight>\r\n    <CardContent>\r\n      Team Buffs\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Grid container columnSpacing={2} rowSpacing={1}>\r\n        {Object.entries(build.partyBuff).map(([statKey, value]) => <Grid item {...statBreakpoint} key={statKey} >\r\n          <StatDisplay character={character} newBuild={newBuild} equippedBuild={equippedBuild} statKey={statKey} partyBuff />\r\n        </Grid>)}\r\n      </Grid>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\nfunction ResonanceDisplay({ build, characterKey }: { build: ICalculatedStats, characterKey: CharacterKey }) {\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  return <CardLight>\r\n    <CardContent>\r\n      Team Resonance\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Grid container spacing={1}>\r\n        {resonanceSheets.map((doc, i) =>\r\n          <Grid item key={i} xs={12} md={6} lg={4} >\r\n            <CardDark sx={{ opacity: doc.canShow(build) ? 1 : 0.5, height: \"100%\" }}>\r\n              <CardHeader avatar={doc?.header?.icon} title={doc?.header?.title} action={doc?.header?.action} titleTypographyProps={{ variant: \"subtitle2\" }} />\r\n              <Divider />\r\n              <CardContent>\r\n                {doc.description}\r\n              </CardContent>\r\n              {doc.conditionals.map(cond =>\r\n                <ConditionalDisplay key={cond.key} conditional={cond} stats={build} onChange={val => characterDispatch({ conditionalValues: val })} />\r\n              )}\r\n            </CardDark>\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\nfunction TeammateDisplay({ character, character: { key: characterKey, team }, sheets, index }:\r\n  { character: ICachedCharacter, sheets: Sheets, index: number }) {\r\n  const onClickHandler = useCharSelectionCallback()\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n  const condCharStats = equippedBuild?.teamStats[index]\r\n  return <buildContext.Provider value={{ equippedBuild: equippedBuild?.teamStats[index] ?? undefined, newBuild: newBuild?.teamStats[index] ?? undefined }}>\r\n    <CardLight>\r\n      <CardContent>\r\n        <CharacterDropdownButton fullWidth value={condCharStats?.characterKey ?? \"\"}\r\n          onChange={charKey => characterDispatch({ type: \"team\", index, charKey })}\r\n          filter={(_, ck) => ck !== characterKey && !team.includes(ck)} unSelectText={`Teammate ${index + 1}`} unSelectIcon={<PersonAdd />} />\r\n      </CardContent>\r\n      {condCharStats && <CharacterCard characterKey={condCharStats.characterKey}\r\n        onClickHeader={onClickHandler}\r\n        build={condCharStats}\r\n        artifactChildren={<CharArtifactCondDisplay condCharStats={condCharStats} />}\r\n        weaponChildren={<CharWeaponCondDisplay condCharStats={condCharStats} />}\r\n        footer={sheets && character && <CharTalentCondDisplay condCharStats={condCharStats} character={character} sheets={sheets} />} />}\r\n    </CardLight>\r\n  </buildContext.Provider>\r\n}\r\nfunction CharArtifactCondDisplay({ condCharStats }: { condCharStats: ICalculatedStats }) {\r\n  const characterDispatch = useCharacterReducer(condCharStats.characterKey)\r\n  return <Box >\r\n    {Object.entries(condCharStats.setToSlots).map(([artSetKey, slotkeys]) =>\r\n      Object.entries(Conditional.partyConditionals?.artifact?.[artSetKey] ?? {})\r\n        .filter(([setNum, conds]) => parseInt(setNum) <= slotkeys.length)\r\n        .flatMap(([setNum, conds]) => Object.entries(conds).map(([condKey, c]) =>\r\n          <ConditionalDisplay key={c.key} conditional={c} stats={condCharStats} onChange={val => characterDispatch({ conditionalValues: val })} />\r\n        )))}\r\n  </Box>\r\n}\r\nfunction CharWeaponCondDisplay({ condCharStats }: { condCharStats: ICalculatedStats }) {\r\n  const characterDispatch = useCharacterReducer(condCharStats.characterKey)\r\n  return <Box >{Object.entries(Conditional.partyConditionals?.weapon?.[condCharStats.weapon.key] ?? {}).map(([condKey, cond]) =>\r\n    <ConditionalDisplay key={cond.key} conditional={cond} stats={condCharStats} onChange={val => characterDispatch({ conditionalValues: val })} />\r\n  )}</Box>\r\n}\r\nfunction CharTalentCondDisplay({ character, condCharStats, sheets }:\r\n  { character: ICachedCharacter, condCharStats: ICalculatedStats, sheets: Sheets }) {\r\n  // Edit the Teammate's ConditionalValues\r\n  const characterDispatch = useCharacterReducer(condCharStats.characterKey)\r\n  const condCharKey = condCharStats.characterKey\r\n  const condCharKeyHashed = condCharKey === \"Traveler\" ? `Traveler_${condCharStats.characterEle}` : condCharKey\r\n\r\n  const charConds = Object.entries(Conditional.partyConditionals?.character?.[condCharKeyHashed] ?? {}).filter(([cKey, conditional]) =>\r\n    Conditional.canShow(conditional, condCharStats))\r\n  return <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1, pt: 0 }} >\r\n    {charConds.map(([condKey, cond]) =>\r\n      <ConditionalDisplay key={condKey} conditional={cond} stats={condCharStats} onChange={val => characterDispatch({ conditionalValues: val })} />\r\n    )}\r\n  </CardContent>\r\n}","import { Button, ButtonGroup, Card, CardContent, Divider, Grid, MenuItem, Skeleton, Tab, Tabs, Typography } from '@mui/material';\r\nimport { Suspense, useCallback, useContext, useEffect, useMemo, useState } from 'react';\r\nimport { buildContext } from '../Build/Build';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport { CharacterSelectionModal } from '../Components/Character/CharacterSelectionModal';\r\nimport ThumbSide from '../Components/Character/ThumbSide';\r\nimport CloseButton from '../Components/CloseButton';\r\nimport ColorText from '../Components/ColoredText';\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from '../Components/CustomNumberInput';\r\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\r\nimport { EnemyExpandCard } from '../Components/EnemyEditor';\r\nimport FormulaCalcCard from '../Components/FormulaCalcCard';\r\nimport { DamageOptionsCard } from '../Components/HitModeEditor';\r\nimport ImgIcon from '../Components/Image/ImgIcon';\r\nimport { sgt } from '../Data/Characters/SheetUtil';\r\nimport { ambiguousLevel, ascensionMaxLevel, milestoneLevels } from '../Data/LevelData';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport useCharacter from '../ReactHooks/useCharacter';\r\nimport useCharacterReducer from '../ReactHooks/useCharacterReducer';\r\nimport useCharSelectionCallback from '../ReactHooks/useCharSelectionCallback';\r\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\r\nimport useSheets from '../ReactHooks/useSheets';\r\nimport { ICachedCharacter } from '../Types/character';\r\nimport { CharacterKey } from '../Types/consts';\r\nimport { ICalculatedStats } from '../Types/stats';\r\nimport { deepCloneStats } from '../Util/StatUtil';\r\nimport { clamp } from '../Util/Util';\r\nimport { defaultInitialWeapon } from '../Weapon/WeaponUtil';\r\nimport Character from './Character';\r\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\r\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\r\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\r\nimport CharacterTeamBuffsPane from './CharacterDisplay/CharacterTeamBuffsPane';\r\nimport CharacterSheet from './CharacterSheet';\r\nimport { initialCharacter } from './CharacterUtil';\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  value: string;\r\n  current: string | boolean;\r\n}\r\n\r\nfunction TabPanel({ children, current, value, ...other }: TabPanelProps) {\r\n  if (value !== current) return null\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />}>\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== current}\r\n      id={`simple-tabpanel-${value}`}\r\n      aria-labelledby={`simple-tab-${value}`}\r\n      {...other}\r\n    >\r\n      {children}\r\n    </div>\r\n  </Suspense>\r\n}\r\n\r\ntype CharacterDisplayCardProps = {\r\n  characterKey: CharacterKey,\r\n  footer?: JSX.Element\r\n  newBuild?: ICalculatedStats,\r\n  onClose?: (any) => void,\r\n  tabName?: string,\r\n  isFlex?: boolean,\r\n  compareBuild?: boolean\r\n}\r\nexport default function CharacterDisplayCard({ characterKey, footer, newBuild: propNewBuild, onClose, tabName, isFlex, compareBuild: propCompareBuild }: CharacterDisplayCardProps) {\r\n  const database = useContext(DatabaseContext)\r\n  const [compareBuild, setCompareBuild] = useState(propCompareBuild ?? false)\r\n  const character = useCharacter(characterKey)\r\n  const [dbDirty, setDbDirty] = useForceUpdate()\r\n\r\n  useEffect(() => {\r\n    typeof propCompareBuild === \"boolean\" && setCompareBuild(propCompareBuild)\r\n  }, [propCompareBuild, setCompareBuild])\r\n\r\n  const sheets = useSheets()\r\n  //follow updates from team\r\n  const [teammate1, teammate2, teammate3] = character?.team ?? []\r\n  useEffect(() =>\r\n    teammate1 ? database.followChar(teammate1, setDbDirty) : undefined,\r\n    [teammate1, setDbDirty, database])\r\n  useEffect(() =>\r\n    teammate2 ? database.followChar(teammate2, setDbDirty) : undefined,\r\n    [teammate2, setDbDirty, database])\r\n  useEffect(() =>\r\n    teammate3 ? database.followChar(teammate3, setDbDirty) : undefined,\r\n    [teammate3, setDbDirty, database])\r\n\r\n  useEffect(() => {\r\n    if (!characterKey) return\r\n    if (database._getChar(characterKey)) return\r\n    // Create a new character + weapon, with linking if char isnt in db.\r\n    (async () => {\r\n      const newChar = initialCharacter(characterKey)\r\n      database.updateChar(newChar)\r\n      const characterSheet = await CharacterSheet.get(characterKey)\r\n      if (!characterSheet) return\r\n      const weapon = defaultInitialWeapon(characterSheet.weaponTypeKey)\r\n      const weaponId = database.createWeapon(weapon)\r\n      database.setWeaponLocation(weaponId, characterKey)\r\n    })()\r\n  }, [database, characterKey])\r\n\r\n\r\n  const characterSheet = sheets?.characterSheets?.[characterKey ?? \"\"]\r\n\r\n  useEffect(() => character && database.followWeapon(character.equippedWeapon, setDbDirty),\r\n    [character, character?.equippedWeapon, setDbDirty, database])\r\n\r\n  const newBuild = useMemo(() => {\r\n    if (!propNewBuild) return undefined\r\n    return deepCloneStats(propNewBuild)\r\n  }, [propNewBuild])\r\n\r\n  // set initial state to false, because it fails to check validity of the tab values on 1st load\r\n  const [tab, settab] = useState<string | boolean>(tabName ? tabName : (newBuild ? \"newartifacts\" : \"character\"))\r\n\r\n  const onTab = useCallback((e, v) => settab(v), [settab])\r\n\r\n  const mainStatAssumptionLevel = newBuild?.mainStatAssumptionLevel ?? 0\r\n  const equippedBuild = useMemo(() => character && dbDirty && sheets &&\r\n    Character.calculateBuild(character, database, sheets, mainStatAssumptionLevel),\r\n    [dbDirty, character, sheets, mainStatAssumptionLevel, database])\r\n  if (!character) return <></>\r\n  // main CharacterDisplayCard\r\n  return <CardDark >\r\n    <buildContext.Provider value={{ newBuild, equippedBuild, compareBuild, setCompareBuild }}>\r\n      <CardContent sx={{\r\n        \"> div:not(:last-child)\": { mb: 1 },\r\n      }}>\r\n        <Grid container spacing={1}>\r\n          <Grid item flexGrow={1}>\r\n            <CharSelectDropdown characterSheet={characterSheet} character={character} />\r\n          </Grid>\r\n          {!!mainStatAssumptionLevel && <Grid item><Card sx={{ p: 1, bgcolor: t => t.palette.warning.dark }}><Typography><strong>Assume Main Stats are Level {mainStatAssumptionLevel}</strong></Typography></Card></Grid>}\r\n          {!!onClose && <Grid item>\r\n            <CloseButton onClick={onClose} />\r\n          </Grid>}\r\n        </Grid>\r\n        <CardLight>\r\n          <Tabs\r\n            onChange={onTab}\r\n            value={tab}\r\n            variant=\"fullWidth\"\r\n          >\r\n            <Tab value=\"character\" label=\"Character\" />\r\n            {!!newBuild && <Tab value=\"newartifacts\" label=\"New Artifacts\" />}\r\n            <Tab value=\"artifacts\" label={newBuild ? \"Current Artifacts\" : \"Artifacts\"} />\r\n            {!isFlex && <Tab value=\"buffs\" label=\"Team Buffs\" />}\r\n            <Tab value=\"talent\" label=\"Talents\" />\r\n          </Tabs>\r\n        </CardLight>\r\n        <DamageOptionsCard character={character} />\r\n        {sheets && <FormulaCalcCard sheets={sheets} />}\r\n        <EnemyExpandCard character={character} />\r\n\r\n        {/* Character Panel */}\r\n        {characterSheet && <TabPanel value=\"character\" current={tab}>\r\n          <CharacterOverviewPane characterSheet={characterSheet} character={character} />\r\n        </TabPanel >}\r\n        {/* Artifacts Panel */}\r\n        {sheets && <buildContext.Provider value={{ newBuild: undefined, equippedBuild, compareBuild, setCompareBuild }}>\r\n          <TabPanel value=\"artifacts\" current={tab} >\r\n            <CharacterArtifactPane character={character} sheets={sheets} />\r\n          </TabPanel >\r\n        </buildContext.Provider>}\r\n        {/* new build panel */}\r\n        {newBuild && sheets && <TabPanel value=\"newartifacts\" current={tab} >\r\n          <CharacterArtifactPane character={character} sheets={sheets} />\r\n        </TabPanel >}\r\n        {/* Buffs panel */}\r\n        {characterSheet && <TabPanel value=\"buffs\" current={tab}>\r\n          <CharacterTeamBuffsPane characterSheet={characterSheet} character={character} />\r\n        </TabPanel >}\r\n        {/* talent panel */}\r\n        {characterSheet && <TabPanel value=\"talent\" current={tab}>\r\n          <CharacterTalentPane characterSheet={characterSheet} character={character} />\r\n        </TabPanel >}\r\n      </CardContent>\r\n      {!!footer && <Divider />}\r\n      {footer && <CardContent >\r\n        {footer}\r\n      </CardContent>}\r\n    </buildContext.Provider>\r\n  </CardDark>\r\n}\r\n\r\ntype CharSelectDropdownProps = {\r\n  characterSheet?: CharacterSheet,\r\n  character: ICachedCharacter\r\n  disabled?: boolean\r\n}\r\nfunction CharSelectDropdown({ characterSheet, character, character: { key: characterKey, elementKey = \"anemo\", level = 1, ascension = 0 }, disabled }: CharSelectDropdownProps) {\r\n  const [showModal, setshowModal] = useState(false)\r\n  const setCharacter = useCharSelectionCallback()\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  const HeaderIconDisplay = characterSheet ? <span >\r\n    <ImgIcon src={characterSheet.thumbImg} sx={{ mr: 1 }} />\r\n    {characterSheet.name}\r\n  </span> : <span>Select a Character</span>\r\n  const setLevel = useCallback((level) => {\r\n    level = clamp(level, 1, 90)\r\n    const ascension = ascensionMaxLevel.findIndex(ascenML => level <= ascenML)\r\n    characterDispatch({ level, ascension })\r\n  }, [characterDispatch])\r\n  const setAscension = useCallback(() => {\r\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML)\r\n    if (ascension === lowerAscension) characterDispatch({ ascension: ascension + 1 })\r\n    else characterDispatch({ ascension: lowerAscension })\r\n  }, [characterDispatch, ascension, level])\r\n  return <>{!disabled ? <>\r\n    <CharacterSelectionModal show={showModal} onHide={() => setshowModal(false)} onSelect={setCharacter} />\r\n    <Grid container spacing={1}>\r\n      <Grid item>\r\n        <Button onClick={() => setshowModal(true)} startIcon={<ThumbSide src={characterSheet?.thumbImgSide} />} >{characterSheet?.name ?? \"Select a Character\"}</Button>\r\n      </Grid>\r\n      <Grid item>\r\n        <ButtonGroup sx={{ bgcolor: t => t.palette.contentDark.main }} >\r\n          {characterSheet?.sheet && \"talents\" in characterSheet?.sheet && <DropdownButton title={<strong><ColorText color={elementKey}>{sgt(`element.${elementKey}`)}</ColorText></strong>}>\r\n            {Object.keys(characterSheet.sheet.talents).map(eleKey =>\r\n              <MenuItem key={eleKey} selected={elementKey === eleKey} disabled={elementKey === eleKey} onClick={() => characterDispatch({ elementKey: eleKey })}>\r\n                <strong><ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText></strong></MenuItem>)}\r\n          </DropdownButton>}\r\n          <CustomNumberInputButtonGroupWrapper >\r\n            <CustomNumberInput onChange={setLevel} value={level}\r\n              startAdornment=\"Lvl. \"\r\n              inputProps={{ min: 1, max: 90, sx: { textAlign: \"center\" } }}\r\n              sx={{ width: \"100%\", height: \"100%\", pl: 2 }}\r\n              disabled={!characterSheet} />\r\n          </CustomNumberInputButtonGroupWrapper>\r\n          <Button sx={{ pl: 1 }} disabled={!ambiguousLevel(level) || !characterSheet} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>\r\n          <DropdownButton title={\"Select Level\"} disabled={!characterSheet}>\r\n            {milestoneLevels.map(([lv, as]) => {\r\n              const sameLevel = lv === ascensionMaxLevel[as]\r\n              const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\r\n              const selected = lv === level && as === ascension\r\n              return <MenuItem key={`${lv}/${as}`} selected={selected} disabled={selected} onClick={() => characterDispatch({ level: lv, ascension: as })}>{lvlstr}</MenuItem>\r\n            })}\r\n          </DropdownButton>\r\n        </ButtonGroup>\r\n      </Grid>\r\n    </Grid>\r\n  </> : <Typography variant=\"h6\">{HeaderIconDisplay} {characterSheet && Character.getLevelString(character)}</Typography>}</>\r\n}"],"sourceRoot":""}