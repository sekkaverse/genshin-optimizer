{"version":3,"sources":["Util/FormulaUtil.ts","Data/Characters/Albedo/data.ts","Util/DataminedUtil.ts","Data/Characters/Aloy/data.ts","Data/Characters/Amber/data.ts","Data/Characters/AratakiItto/data.ts","Data/Characters/Barbara/data.ts","Data/Characters/Beidou/data.ts","Data/Characters/Bennett/data.ts","Data/Characters/Chongyun/data.ts","Data/Characters/Diluc/data.ts","Data/Characters/Diona/data.ts","Data/Characters/Eula/data.ts","Data/Characters/Fischl/data.ts","Data/Characters/Ganyu/data.ts","Data/Characters/Gorou/data.ts","Data/Characters/HuTao/data.ts","Data/Characters/Jean/data.ts","Data/Characters/dataUtil.tsx","Data/Characters/KaedeharaKazuha/data.ts","Data/Characters/Kaeya/data.ts","Data/Characters/KamisatoAyaka/data.ts","Data/Characters/Keqing/data.ts","Data/Characters/Klee/data.ts","Data/Characters/KujouSara/data.ts","Data/Characters/Lisa/data.ts","Data/Characters/Mona/data.ts","Data/Characters/Ningguang/data.ts","Data/Characters/Noelle/data.ts","Data/Characters/Qiqi/data.ts","Data/Characters/RaidenShogun/data.ts","Data/Characters/Razor/data.ts","Data/Characters/Rosaria/data.ts","Data/Characters/SangonomiyaKokomi/data.ts","Data/Characters/Sayu/data.ts","Data/Characters/Sucrose/data.ts","Data/Characters/Tartaglia/data.ts","Data/Characters/Thoma/data.ts","Data/Characters/Traveler/anemo/data.ts","Data/Characters/Traveler/geo/data.ts","Data/Characters/Traveler/electro/data.ts","Data/Characters/Traveler/data.ts","Data/Characters/Venti/data.ts","Data/Characters/Xiao/data.ts","Data/Characters/Xiangling/data.ts","Data/Characters/Xingqiu/data.ts","Data/Characters/Xinyan/data.ts","Data/Characters/YaeMiko/data.ts","Data/Characters/Yanfei/data.ts","Data/Characters/Yoimiya/data.ts","Data/Characters/Zhongli/data.ts","Data/Weapons/Sword/AquilaFavonia/data.ts","Data/Weapons/Sword/CinnabarSpindle/data.ts","Data/Weapons/Sword/FilletBlade/data.ts","Data/Weapons/Sword/PrimordialJadeCutter/data.ts","Data/Weapons/Sword/SkywardBlade/data.ts","Data/Weapons/Sword/TheBlackSword/data.ts","Data/Weapons/Sword/TheFlute/data.ts","Data/Weapons/Sword/TravelersHandySword/data.ts","Data/Weapons/Polearm/CrescentPike/data.ts","Data/Weapons/Polearm/DragonspineSpear/data.ts","Data/Weapons/Polearm/EngulfingLightning/data.ts","Data/Weapons/Polearm/Halberd/data.ts","Data/Weapons/Polearm/SkywardSpine/data.ts","Data/Weapons/Polearm/StaffOfHoma/data.ts","Data/Weapons/Claymore/DebateClub/data.ts","Data/Weapons/Claymore/LuxuriousSeaLord/data.ts","Data/Weapons/Claymore/PrototypeArchaic/data.ts","Data/Weapons/Claymore/RedhornStonethresher/data.ts","Data/Weapons/Claymore/SkywardPride/data.ts","Data/Weapons/Claymore/SnowTombedStarsilver/data.ts","Data/Weapons/Claymore/TheBell/data.ts","Data/Weapons/Claymore/WhiteIronGreatsword/data.ts","Data/Weapons/Catalyst/EverlastingMoonglow/data.ts","Data/Weapons/Catalyst/EyeOfPerception/data.ts","Data/Weapons/Catalyst/Frostbearer/data.ts","Data/Weapons/Catalyst/OtherworldlyStory/data.ts","Data/Weapons/Catalyst/PrototypeAmber/data.ts","Data/Weapons/Catalyst/SkywardAtlas/data.ts","Data/Weapons/Bow/Messenger/data.ts","Data/Weapons/Bow/RecurveBow/data.ts","Data/Weapons/Bow/TheViridescentHunt/data.ts","Data/Weapons/formula.ts","Data/Weapons/Sword/SwordOfDescension/data.ts","Data/Weapons/Bow/SkywardHarp/data.ts","Data/formula.ts","Data/Characters/formula.ts","Data/Artifacts/formula.ts","Data/Artifacts/Adventurer/data.ts","Data/Artifacts/EmblemOfSeveredFate/data.ts","Data/Artifacts/OceanHuedClam/data.ts","Data/Artifacts/TravelingDoctor/data.ts"],"names":["basicDMGFormula","percent","stats","skillKey","elemental","val","statKey","getTalentStatKey","s","basicHealingFormula","scaleStatKey","flat","ratio","heal_multi","data","normal","hitArr","charged","atk1","atk2","plunging","dmg","low","high","skill","press","blossom","burst","burDMG","stacks","stacksVal","finalATK","finalDEF","formula","Object","fromEntries","map","percentArr","i","tlvl","auto","entries","key","arr","blossom50","hitModeMultiKey","hitMode","geo_skill_hit_base_multi","enemyLevel_multi","geo_enemyRes_multi","dmg1c2","dmg2c2","dmg3c2","dmg4c2","blossom1c2","blossom2c2","blossom3c2","blossom4c2","toTalentPercent","d","parseFloat","toFixed","toTalentInt","parseInt","singleToTalentPercent","num","skillParam_gen","hit","full","bomblet","atkDec","atkDecDur","coil1","coil2","coil3","coil4","rushDur","cd","cost","a1","duration","passive1","name","undefined","hp","dmgPerWave","totDMG","finalHP","detonationDMG","a","b","p2","c4","sSlash","akSlash","akFinal","stam","ss","ss_cd","atkSpd","defConv","resDec","passive2","def","constellation4","def_","atk_","defDMGFormula","defMulti","akSlashA4","akFinalA4","premod","hpFlat","contHP","contHPFlat","regenPerHit","contRegen","regen","spinning","final","onHit","lightningDMG","dmgRed","shield","shield_","shieldElectro","hit1","hit2","constellation1","lvl1hit1","lvl1hit2","lvl2hit1","lvl2hit2","explosion","healHP","healHPFlat","atkRatio","atkBonus","constellation","baseATK","infusionDuration","hit3","slashing","dot","hit2b","hit3b","dmgPerPaw","shieldFlat","shieldHp","durationPerPaw","continuousDmg","hpPercent","shieldCryo","shdStr","shieldHoldCryo","shieldHold","maxDuration","pressDMG","holdDMG","brandDMG","phyResDec","cyroResDec","resDecDuration","cdPress","cdHold","baseDMG","stackDMG","maxStack","physicalBurst25","physical_burst_hit_base_multi","physical_enemyRes_multi","Array","keys","dmg50","aimedShot","fullAimedShot","oz","aimShot","fullAimedShotOz","activeChar","addDmg","aimShot1","frostflake","frostflakeBloom","conditionalValues","character","Ganyu","reactionMode","Math","min","critRate_","charged_critRate_","critDMG_","p1","c6","geo_dmg_","dmgCollapse","skill_def_","burst_def_","heal_def_","constellation6","g1","g2","g3","dmgA4","defPercent","ascension","heal","atk_inc","low_dmg","low_regen","dmgC2","field_dmg","heal_flat","heal_atk","regen_flat","regen_atk","dmg_hold","anemo_skill_hit_base_multi","anemo_enemyRes_multi","atk","absorbableEle","hold","add","pdmg","plow","phigh","eleKey","eleMas","bonus","cutting","bloom","constellation2","stilleto","thunderclasp_slash","consec_slash","last","electro_","thunderclap_slashing","jumpyDmg","mineDmg","cluster","c2","stack0","stack1","stack2","stack3","summon","bubble_explosion","dmg_","omen_duration","enerRech_","jade","inheri_hp","dmg_per_gem","shield_def_","heal_trigger","skill_dmg","shield_flat","burst_dmg","trigger_chance","dmg_def_","herald","hitregen","base","continuousregen","healing","skillDMG","coorDMG","eleBurConv","resolve","resolve_","resGain","hit41","hit42","hit5","charged1","charged2","plunge","plungeLow","plungeHigh","enerGen","enerCost","enemyLevelMultiC2","characterLevel","enemyLevel","max","enemyDEFRed_","burstDMG","intial","resolveStack","getResolve","multi","electro_burst_hit_base_multi","electro_enemyRes_multi","electro_skill_hit_base_multi","RaidenShogun","q","condEleKey","c","a4","eleDMG","atkspd","normVal","normStatKey","burstVal","burstStatKey","critConv","heal_","nBonus","cBonus","sBonus","heal_ratio","c1","hp_","s_heal_","nc_heal_","atkSPD_","energy","hydro_","hpDMGFormula","hpMulti","hasA4","includes","dmgHP","regenC2","ele_dmg","kick_press","kick_hold","ele_kick","muji_dmg","muji_heal","muji_heal_","skillPercent","basic","Sayu","em","skillDmg","melee","ranged","riptide","flash","slash","blast","shieldHp_","maxShieldHp_","maxShieldHp","shieldDuration","triggerDuration","trigger","auto_","shieldPyro","maxShield","maxShieldPyro","dmgCollapseA4","initial_dmg","initial_max","storm_dmg","storm_max","windAuto","exp","geoAuto","enerRegen","thunder","anemo","geo","electro","enerRechInc","thunder3","totBurst","absorptionEle","swirlTicks","absorptionStatKey","swirlStatKey","burstScaling","absorptionTicks","hit_bonus","full_bonus","flatMap","atk_bonus","drain","hydro_dmg_","def1","flat1","def2","flat2","def3","flat3","nyanDMG","spinningDEF","_","lvl1","lvl2","lvl3","lvl4","thunderbolt","emDMGFormula","emMulti","critKey","avgHitKey","levelKey","resKey","lvl1EM","lvl2EM","lvl3EM","lvl4EM","kindling","fixed_atk_","var_atk_","steeleDMG","resonanceDMG","shieldBase","shieldMaxHP","petriDur","lowHP","highHP","steeleDMGHP","resonanceDMGHP","holdDMGHP","vals","dmgc","enerRechConv","enerRechMax","sword","AquilaFavonia","weapon","refineIndex","CinnabarSpindle","FilletBlade","PrimordialJadeCutter","modStats","SkywardBlade","SwordOfDescension","TheBlackSword","TheFlute","TravelersHandySword","polearm","CrescentPike","DragonspineSpear","EngulfingLightning","conv","Halberd","SkywardSpine","StaffOfHoma","esj","esjadd","catalyst","EverlastingMoonglow","norm","EyeOfPerception","Frostbearer","OtherworldlyStory","PrototypeAmber","SkywardAtlas","claymore","DebateClub","LuxuriousSeaLord","PrototypeArchaic","RedhornStonethresher","SkywardPride","SnowTombedStarsilver","TheBell","WhiteIronGreatsword","bow","Messenger","RecurveBow","SkywardHarp","TheViridescentHunt","Albedo","Aloy","Amber","AratakiItto","Barbara","Beidou","Bennett","Chongyun","Diluc","Diona","Eula","Fischl","Gorou","HuTao","Jean","KaedeharaKazuha","Kaeya","KamisatoAyaka","Keqing","Klee","KujouSara","Lisa","Mona","Ningguang","Noelle","Qiqi","Razor","Rosaria","SangonomiyaKokomi","Sucrose","Tartaglia","Thoma","Traveler","Venti","Xiao","Xiangling","Xingqiu","Xinyan","YaeMiko","Yanfei","Yoimiya","Zhongli","artifact","Adventurer","EmblemOfSeveredFate","s4","OceanHuedClam","TravelingDoctor","crawlObject","f"],"mappings":"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","file":"static/js/1.3b1c98eb.chunk.worker.js","sourcesContent":["import { getTalentStatKey } from \"../Build/Build\"\r\nimport { StatKey } from \"../Types/artifact\"\r\nimport { FormulaItem } from \"../Types/character\"\r\nimport { ElementKey } from \"../Types/consts\"\r\nimport { BasicStats } from \"../Types/stats\"\r\n\r\n//for basic formula in the format of \"percent/100 * s[statKey]\"\r\nexport function basicDMGFormula(percent: number, stats: BasicStats, skillKey: string, elemental?: \"physical\" | ElementKey): FormulaItem {\r\n  const val = percent / 100\r\n  const statKey = getTalentStatKey(skillKey, stats, elemental)\r\n  return [s => val * s[statKey], [statKey]]\r\n}\r\nexport function basicHealingFormula(percent: number, scaleStatKey: StatKey, flat: number = 0): FormulaItem {\r\n  const ratio = percent / 100\r\n  return [s => ((ratio * s[scaleStatKey]) + flat) * s.heal_multi, [scaleStatKey, \"heal_multi\"]]\r\n}","import { getTalentStatKey } from \"../../../Build/Build\"\r\nimport { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [36.74, 39.73, 42.72, 46.99, 49.98, 53.4, 58.1, 62.8, 67.5, 72.62, 78.5, 85.41, 92.31, 99.22, 106.76],\r\n      [36.74, 39.73, 42.72, 46.99, 49.98, 53.4, 58.1, 62.8, 67.5, 72.62, 78.5, 85.41, 92.31, 99.22, 106.76],\r\n      [47.45, 51.32, 55.18, 60.7, 64.56, 68.98, 75.04, 81.11, 87.18, 93.81, 101.39, 110.32, 119.24, 128.16, 137.89],\r\n      [49.75, 53.8, 57.85, 63.64, 67.68, 72.31, 78.68, 85.04, 91.4, 98.35, 106.3, 115.65, 125.01, 134.36, 144.57],\r\n      [62.07, 67.13, 72.18, 79.4, 84.45, 90.22, 98.16, 106.1, 114.04, 122.7, 132.63, 144.3, 155.97, 167.64, 180.38]\r\n    ],\r\n  },\r\n  charged: {\r\n    atk1: [47.3, 51.15, 55, 60.5, 64.35, 68.75, 74.8, 80.85, 86.9, 93.5, 101.06, 109.96, 118.85, 127.74, 137.45],\r\n    atk2: [60.2, 65.1, 70, 77, 81.9, 87.5, 95.2, 102.9, 110.6, 119, 128.62, 139.94, 151.26, 162.58, 174.93],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04]\r\n  },\r\n  skill: {\r\n    press: [130.4, 140.18, 149.96, 163, 172.78, 182.56, 195.6, 208.64, 221.68, 234.72, 247.76, 260.8, 277.1, 293.4, 309.7],\r\n    blossom: [133.6, 143.62, 153.64, 167, 177.02, 187.04, 200.4, 213.76, 227.12, 240.48, 253.84, 267.2, 283.9, 300.6, 317.3]\r\n  },\r\n  burst: {\r\n    dmg: [367.2, 394.74, 422.28, 459, 486.54, 514.08, 550.8, 587.52, 624.24, 660.96, 697.68, 734.4, 780.3, 826.2, 872.1],\r\n    blossom: [72, 77.4, 82.8, 90, 95.4, 100.8, 108, 115.2, 122.4, 129.6, 136.8, 144, 153, 162, 171]\r\n  }\r\n}\r\nfunction burDMG(percent, stats, skillKey, stacks = 0): [(stat: any) => number, string[]] {\r\n  const val = percent / 100\r\n  const statKey = getTalentStatKey(skillKey, stats) + \"_multi\"\r\n  const stacksVal = stacks * 0.3\r\n  return [s => (val * s.finalATK + stacksVal * s.finalDEF) * s[statKey], [\"finalATK\", \"finalDEF\", statKey]]\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")\r\n  ])),\r\n  charged: {\r\n    atk1: stats => basicDMGFormula(data.charged.atk1[stats.tlvl.auto], stats, \"charged\"),\r\n    atk2: stats => basicDMGFormula(data.charged.atk2[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    press: stats => basicDMGFormula(data.skill.press[stats.tlvl.skill], stats, \"skill\"),\r\n    blossom: stats => {\r\n      const val = data.skill.blossom[stats.tlvl.skill] / 100\r\n      const statKey = getTalentStatKey(\"skill\", stats) + \"_multi\"\r\n      return [s => val * s.finalDEF * s[statKey], [\"finalDEF\", statKey]]\r\n    },\r\n    blossom50: stats => {\r\n      const val = data.skill.blossom[stats.tlvl.skill] / 100\r\n      const hitModeMultiKey = stats.hitMode === \"avgHit\" ? \"skill_avgHit_base_multi\" : stats.hitMode === \"critHit\" ? \"critHit_base_multi\" : \"\"\r\n      return [s => val * s.finalDEF * (hitModeMultiKey ? s[hitModeMultiKey] : 1) * (s.geo_skill_hit_base_multi + 0.25) * s.enemyLevel_multi * s.geo_enemyRes_multi,\r\n      [\"finalDEF\", ...(hitModeMultiKey ? [hitModeMultiKey] : []), \"geo_skill_hit_base_multi\", \"enemyLevel_multi\", \"geo_enemyRes_multi\"]]\r\n    }\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    dmg1c2: stats => burDMG(data.burst.dmg[stats.tlvl.burst], stats, \"burst\", 1),\r\n    dmg2c2: stats => burDMG(data.burst.dmg[stats.tlvl.burst], stats, \"burst\", 2),\r\n    dmg3c2: stats => burDMG(data.burst.dmg[stats.tlvl.burst], stats, \"burst\", 3),\r\n    dmg4c2: stats => burDMG(data.burst.dmg[stats.tlvl.burst], stats, \"burst\", 4),\r\n    blossom: stats => basicDMGFormula(data.burst.blossom[stats.tlvl.burst], stats, \"burst\"),\r\n    blossom1c2: stats => burDMG(data.burst.blossom[stats.tlvl.burst], stats, \"burst\", 1),\r\n    blossom2c2: stats => burDMG(data.burst.blossom[stats.tlvl.burst], stats, \"burst\", 2),\r\n    blossom3c2: stats => burDMG(data.burst.blossom[stats.tlvl.burst], stats, \"burst\", 3),\r\n    blossom4c2: stats => burDMG(data.burst.blossom[stats.tlvl.burst], stats, \"burst\", 4),\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","//Utility functionst to take data from datamined _gen.json data.\r\n//TODO: when we decide to use decimals instead of percent, this function needs to be changed. I\r\n//TODO: Ideaily, we retain the most accurate number in the src code, and do this toFixed on UI. \r\nexport function toTalentPercent(arr: number[]): number[] {\r\n  return arr.map(d => parseFloat((d * 100).toFixed(2)))\r\n}\r\n\r\nexport function toTalentInt(arr: number[]): number[] {\r\n  return arr.map(d => parseInt(d.toFixed()))\r\n}\r\nexport function singleToTalentPercent(num) {\r\n  return parseFloat((num * 100).toFixed(2))\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { toTalentPercent } from \"../../../Util/DataminedUtil\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\nimport skillParam_gen_pre from './skillParam_gen.json'\r\nconst skillParam_gen = skillParam_gen_pre as any\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      toTalentPercent(skillParam_gen.auto[0]),//1.1\r\n      toTalentPercent(skillParam_gen.auto[1]),//1.2\r\n      toTalentPercent(skillParam_gen.auto[2]),//2\r\n      toTalentPercent(skillParam_gen.auto[3]),//3\r\n      toTalentPercent(skillParam_gen.auto[4]),//4\r\n    ]\r\n  },\r\n  charged: {\r\n    hit: toTalentPercent(skillParam_gen.auto[5]),\r\n    full: toTalentPercent(skillParam_gen.auto[6]),\r\n  },\r\n  plunging: {\r\n    dmg: toTalentPercent(skillParam_gen.auto[7]),\r\n    low: toTalentPercent(skillParam_gen.auto[8]),\r\n    high: toTalentPercent(skillParam_gen.auto[9]),\r\n  },\r\n  skill: {\r\n    dmg: toTalentPercent(skillParam_gen.skill[0]),\r\n    bomblet: toTalentPercent(skillParam_gen.skill[1]),\r\n    atkDec: toTalentPercent(skillParam_gen.skill[2]),\r\n    atkDecDur: skillParam_gen.skill[3][0],\r\n    coil1: toTalentPercent(skillParam_gen.skill[4]),\r\n    coil2: toTalentPercent(skillParam_gen.skill[5]),\r\n    coil3: toTalentPercent(skillParam_gen.skill[6]),\r\n    coil4: toTalentPercent(skillParam_gen.skill[7]),\r\n    rushDur: skillParam_gen.skill[8][0],\r\n    cd: skillParam_gen.skill[9][0],\r\n  },\r\n  burst: {\r\n    dmg: toTalentPercent(skillParam_gen.burst[0]),\r\n    cd: skillParam_gen.burst[1][0],\r\n    cost: skillParam_gen.burst[2][0],\r\n  },\r\n  a1: {\r\n    duration: skillParam_gen.passive1[1],\r\n  }\r\n} as const\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\", name === \"hit\" ? undefined : \"electro\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    bomblet: stats => basicDMGFormula(data.skill.bomblet[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n  }\r\n} as const\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [36.12, 39.06, 42, 46.2, 49.14, 52.5, 57.12, 61.74, 66.36, 71.4, 76.44, 81.48, 86.52, 91.56, 96.6],\r\n      [36.12, 39.06, 42, 46.2, 49.14, 52.5, 57.12, 61.74, 66.36, 71.4, 76.44, 81.48, 86.52, 91.56, 96.6],\r\n      [46.44, 50.22, 54, 59.4, 63.18, 67.5, 73.44, 79.38, 85.32, 91.8, 98.28, 104.76, 111.24, 117.72, 124.2],\r\n      [47.3, 51.15, 55, 60.5, 64.35, 68.75, 74.8, 80.85, 86.9, 93.5, 100.1, 106.7, 113.3, 119.9, 126.5],\r\n      [59.34, 64.17, 69, 75.9, 80.73, 86.25, 93.84, 101.43, 109.02, 117.3, 125.58, 133.86, 142.14, 150.42, 158.7],\r\n    ],\r\n  },\r\n  charged: {\r\n    hit: [43.86, 47.43, 51, 56.1, 59.67, 63.75, 69.36, 74.97, 80.58, 86.7, 92.82, 98.94, 105.06, 111.18, 117.3],\r\n    full: [124, 133.3, 142.6, 155, 164.3, 173.6, 186, 198.4, 210.8, 223.2, 235.6, 248, 263.5, 279, 294.5]\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59]\r\n  },\r\n  skill: {\r\n    hp: [41.36, 44.46, 47.56, 51.7, 54.8, 57.9, 62.04, 66.18, 70.31, 74.45, 78.58, 82.72, 87.89, 93.06, 98.23],\r\n    dmg: [123.2, 132.44, 141.68, 154, 163.24, 172.48, 184.8, 197.12, 209.44, 221.76, 234.08, 246.4, 261.8, 277.2, 292.6],\r\n  },\r\n  burst: {\r\n    dmgPerWave: [28.08, 30.19, 32.29, 35.1, 37.21, 39.31, 42.12, 44.93, 47.74, 50.54, 53.35, 56.16, 59.67, 63.18, 66.69],\r\n    totDMG: [505.44, 543.35, 581.26, 631.8, 669.71, 707.62, 758.16, 808.7, 859.25, 909.79, 960.34, 1010.88, 1074.06, 1137.24, 1200.42],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    hit: stats => basicDMGFormula(data.charged.hit[stats.tlvl.auto], stats, \"charged\"),\r\n    full: stats => basicDMGFormula(data.charged.full[stats.tlvl.auto], stats, \"charged\", \"pyro\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    hp: stats => {\r\n      const hp = data.skill.hp[stats.tlvl.skill] / 100\r\n      return [(s) => hp * s.finalHP, [\"finalHP\"]]\r\n    },\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    detonationDMG: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill] + 200, stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmgPerWave: stats => basicDMGFormula(data.burst.dmgPerWave[stats.tlvl.burst], stats, \"burst\"),\r\n    totDMG: stats => basicDMGFormula(data.burst.totDMG[stats.tlvl.burst], stats, \"burst\"),\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { getTalentStatKey } from \"../../../Build/Build\"\r\nimport { FormulaItem, IFormulaSheet } from \"../../../Types/character\"\r\nimport { BasicStats } from \"../../../Types/stats\"\r\nimport { singleToTalentPercent, toTalentPercent } from \"../../../Util/DataminedUtil\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\nimport skillParam_gen_pre from './skillParam_gen.json'\r\nconst skillParam_gen = skillParam_gen_pre as any\r\nlet a = 0, s = 0, b = 0, p2 = 0, c4 = 0\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n    ]\r\n  },\r\n  charged: {\r\n    sSlash: toTalentPercent(skillParam_gen.auto[a++]),\r\n    akSlash: toTalentPercent(skillParam_gen.auto[a++]),\r\n    akFinal: toTalentPercent(skillParam_gen.auto[a++]),\r\n    stam: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: toTalentPercent(skillParam_gen.auto[a++]),\r\n    low: toTalentPercent(skillParam_gen.auto[a++]),\r\n    high: toTalentPercent(skillParam_gen.auto[a++]),\r\n  },\r\n  ss: { //Superlative Superstrength\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  skill: {\r\n    dmg: toTalentPercent(skillParam_gen.skill[s++]),\r\n    hp: toTalentPercent(skillParam_gen.skill[s++]),\r\n    duration: skillParam_gen.skill[s++][0],\r\n    ss_cd: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    atkSpd: toTalentPercent(skillParam_gen.burst[b++]),\r\n    defConv: toTalentPercent(skillParam_gen.burst[b++]),\r\n    resDec: toTalentPercent(skillParam_gen.burst[b++]),\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    def: singleToTalentPercent(skillParam_gen.passive2[p2++][0]),\r\n  },\r\n  constellation4: {\r\n    def_: singleToTalentPercent(skillParam_gen.constellation4[c4++]),\r\n    atk_: singleToTalentPercent(skillParam_gen.constellation4[c4++]),\r\n    duration: skillParam_gen.constellation4[c4++],\r\n  }\r\n} as const\r\n\r\nfunction defDMGFormula(percent: number, stats: BasicStats): FormulaItem {\r\n  const val = percent / 100\r\n  const defMulti = data.passive2.def / 100\r\n  const statKey = getTalentStatKey(\"charged\", stats) + \"_multi\"\r\n  return [s => (val * s.finalATK + defMulti * s.finalDEF) * s[statKey], [\"finalATK\", \"finalDEF\", statKey]]\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    sSlash: stats => basicDMGFormula(data.charged.sSlash[stats.tlvl.auto], stats, \"charged\"),\r\n    akSlash: stats => basicDMGFormula(data.charged.akSlash[stats.tlvl.auto], stats, \"charged\"),\r\n    akSlashA4: stats => defDMGFormula(data.charged.akSlash[stats.tlvl.auto], stats),\r\n    akFinal: stats => basicDMGFormula(data.charged.akFinal[stats.tlvl.auto], stats, \"charged\"),\r\n    akFinalA4: stats => defDMGFormula(data.charged.akFinal[stats.tlvl.auto], stats),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    hp: stats => {\r\n      const percent = data.skill.hp[stats.tlvl.skill] / 100\r\n      return [s => percent * s.finalHP, [\"finalHP\"]]\r\n    }\r\n  },\r\n  burst: {\r\n    defConv: stats => {\r\n      const val = data.burst.defConv[stats.tlvl.burst] / 100\r\n      return [s => val * (s.premod?.finalDEF ?? s.finalDEF), [\"finalDEF\"]]\r\n    }\r\n  },\r\n} as const\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [37.84, 40.68, 43.52, 47.3, 50.14, 52.98, 56.76, 60.54, 64.33, 68.11, 72.05, 77.19, 82.34, 87.49, 92.63],\r\n      [35.52, 38.18, 40.85, 44.4, 47.06, 49.73, 53.28, 56.83, 60.38, 63.94, 67.63, 72.46, 77.29, 82.12, 86.95],\r\n      [41.04, 44.12, 47.2, 51.3, 54.38, 57.46, 61.56, 65.66, 69.77, 73.87, 78.14, 83.72, 89.3, 94.88, 100.47],\r\n      [55.2, 59.34, 63.48, 69, 73.14, 77.28, 82.8, 88.32, 93.84, 99.36, 105.1, 112.61, 120.12, 127.62, 135.13],\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: [166.24, 178.71, 191.18, 207.8, 220.27, 232.74, 249.36, 265.98, 282.61, 299.23, 316.52, 339.13, 361.74, 384.35, 406.96],\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59]\r\n  },\r\n  skill: {\r\n    hp: [0.75, 0.81, 0.86, 0.94, 0.99, 1.05, 1.13, 1.2, 1.27, 1.35, 1.43, 1.5, 1.59, 1.69, 1.78],\r\n    hpFlat: [72, 79, 87, 96, 105, 114, 125, 135, 147, 159, 172, 185, 199, 213, 228],\r\n    contHP: [4, 4.3, 4.6, 5, 5.3, 5.6, 6, 6.4, 6.8, 7.2, 7.6, 8, 8.5, 9, 9.5],\r\n    contHPFlat: [385, 424, 465, 510, 559, 610, 664, 722, 783, 847, 915, 986, 1059, 1136, 1217],\r\n    dmg: [58.4, 62.78, 67.16, 73, 77.38, 81.76, 87.6, 93.44, 99.28, 105.12, 110.96, 116.8, 124.1, 131.4, 138.7],\r\n  },\r\n  burst: {\r\n    hp: [17.6, 18.92, 20.24, 22, 23.32, 24.64, 26.4, 28.16, 29.92, 31.68, 33.44, 35.2, 37.4, 39.6, 41.8],\r\n    flat: [1694, 1864, 2047, 2245, 2457, 2683, 2923, 3177, 3445, 3728, 4024, 4335, 4660, 4999, 5352],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    dmg: stats => basicDMGFormula(data.charged.dmg[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    regenPerHit: stats => {\r\n      const hp = data.skill.hp[stats.tlvl.skill] / 100\r\n      const flat = data.skill.hpFlat[stats.tlvl.skill]\r\n      return [s => (hp * s.finalHP + flat) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n    },\r\n    contRegen: stats => {\r\n      const hp = data.skill.contHP[stats.tlvl.skill] / 100\r\n      const flat = data.skill.contHPFlat[stats.tlvl.skill]\r\n      return [s => (hp * s.finalHP + flat) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n    },\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    regen: stats => {\r\n      const hp = data.burst.hp[stats.tlvl.burst] / 100\r\n      const flat = data.burst.flat[stats.tlvl.burst]\r\n      return [s => (hp * s.finalHP + flat) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n    },\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [71.12, 76.91, 82.7, 90.97, 96.76, 103.38, 112.47, 121.57, 130.67, 140.59, 151.96, 165.33, 178.71, 192.08, 206.67],\r\n      [70.86, 76.63, 82.4, 90.64, 96.41, 103, 112.06, 121.13, 130.19, 140.08, 151.41, 164.73, 178.06, 191.38, 205.92],\r\n      [88.32, 95.51, 102.7, 112.97, 120.16, 128.38, 139.67, 150.97, 162.27, 174.59, 188.71, 205.32, 221.92, 238.53, 256.65],\r\n      [86.52, 93.56, 100.6, 110.66, 117.7, 125.75, 136.82, 147.88, 158.95, 171.02, 184.85, 201.12, 217.39, 233.65, 251.4],\r\n      [112.14, 121.27, 130.4, 143.44, 152.57, 163, 177.34, 191.69, 206.03, 221.68, 239.61, 260.7, 281.78, 302.87, 325.87],\r\n    ],\r\n  },\r\n  charged: {\r\n    spinning: [56.24, 60.82, 65.4, 71.94, 76.52, 81.75, 88.94, 96.14, 103.33, 111.18, 120.17, 130.75, 141.32, 151.9, 163.43],\r\n    final: [101.82, 110.11, 118.4, 130.24, 138.53, 148, 161.02, 174.05, 187.07, 201.28, 217.56, 236.71, 255.85, 275, 295.88]\r\n  },\r\n  plunging: {\r\n    dmg: [74.59, 80.66, 86.73, 95.4, 101.47, 108.41, 117.95, 127.49, 137.03, 147.44, 157.85, 168.26, 178.66, 189.07, 199.48],\r\n    low: [149.14, 161.28, 173.42, 190.77, 202.91, 216.78, 235.86, 254.93, 274.01, 294.82, 315.63, 336.44, 357.25, 378.06, 398.87],\r\n    high: [186.29, 201.45, 216.62, 238.28, 253.44, 270.77, 294.6, 318.42, 342.25, 368.25, 394.24, 420.23, 446.23, 472.22, 498.21]\r\n  },\r\n  skill: {\r\n    hp: [14.4, 15.48, 16.56, 18, 19.08, 20.16, 21.6, 23.04, 24.48, 25.92, 27.36, 28.8, 30.6, 32.4, 34.2],\r\n    flat: [1386, 1525, 1675, 1837, 2010, 2195, 2392, 2600, 2819, 3050, 3293, 3547, 3813, 4090, 4379],\r\n    dmg: [121.6, 130.72, 139.84, 152, 161.12, 170.24, 182.4, 194.56, 206.72, 218.88, 231.04, 243.2, 258.4, 273.6, 288.8],\r\n    onHit: [160, 172, 184, 200, 212, 224, 240, 256, 272, 288, 304, 320, 340, 360, 380],\r\n  },\r\n  burst: {\r\n    dmg: [121.6, 130.72, 139.84, 152, 161.12, 170.24, 182.4, 194.56, 206.72, 218.88, 231.04, 243.2, 258.4, 273.6, 288.8],\r\n    lightningDMG: [96, 103.2, 110.4, 120, 127.2, 134.4, 144, 153.6, 163.2, 172.8, 182.4, 192, 204, 216, 228],\r\n    dmgRed: [20, 21, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 37, 38, 39],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) =>\r\n    [i, stats => basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    shield: stats => {\r\n      const percent = data.skill.hp[stats.tlvl.skill] / 100\r\n      const flat = data.skill.flat[stats.tlvl.skill]\r\n      return [s => (percent * s.finalHP + flat) * (1 + s.shield_ / 100), [\"finalHP\", \"shield_\"]]\r\n    },\r\n    shieldElectro: stats => {\r\n      const percent = data.skill.hp[stats.tlvl.skill] / 100\r\n      const flat = data.skill.flat[stats.tlvl.skill]\r\n      return [s => (percent * s.finalHP + flat) * (1 + s.shield_ / 100) * 2.5, [\"finalHP\", \"shield_\"]]\r\n    },\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    hit1: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill] + data.skill.onHit[stats.tlvl.skill], stats, \"skill\"),\r\n    hit2: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill] + 2 * data.skill.onHit[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    lightningDMG: stats => basicDMGFormula(data.burst.lightningDMG[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    shield: stats => [s => 0.16 * s.finalHP * (1 + s.shield_ / 100), [\"finalHP\", \"shield_\"]],\r\n    shieldElectro: stats => [s => 0.16 * s.finalHP * (1 + s.shield_ / 100) * 2.5, [\"finalHP\", \"shield_\"]],\r\n  },\r\n  constellation4: {\r\n    dmg: stats => basicDMGFormula(20, stats, \"electro\"),\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [44.55, 48.17, 51.8, 56.98, 60.61, 64.75, 70.45, 76.15, 81.84, 88.06, 94.28, 100.49, 106.71, 112.92, 119.14],\r\n      [42.74, 46.22, 49.7, 54.67, 58.15, 62.13, 67.59, 73.06, 78.53, 84.49, 90.45, 96.42, 102.38, 108.35, 114.31],\r\n      [54.61, 59.06, 63.5, 69.85, 74.3, 79.38, 86.36, 93.35, 100.33, 107.95, 115.57, 123.19, 130.81, 138.43, 146.05],\r\n      [59.68, 64.54, 69.4, 76.34, 81.2, 86.75, 94.38, 102.02, 109.65, 117.98, 126.31, 134.64, 142.96, 151.29, 159.62],\r\n      [71.9, 77.75, 83.6, 91.96, 97.81, 104.5, 113.7, 122.89, 132.09, 142.12, 152.15, 162.18, 172.22, 182.25, 192.28]\r\n    ],\r\n  },\r\n  charged: {\r\n    hitArr: [\r\n      [55.9, 60.45, 65, 71.5, 76.05, 81.25, 88.4, 95.55, 102.7, 110.5, 118.3, 126.1, 133.9, 141.7, 149.5],\r\n      [60.72, 65.66, 70.6, 77.66, 82.6, 88.25, 96.02, 103.78, 111.55, 120.02, 128.49, 136.96, 145.44, 153.91, 162.38],\r\n    ]\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04]\r\n  },\r\n  skill: {\r\n    press: [137.6, 147.92, 158.24, 172, 182.32, 192.64, 206.4, 220.16, 233.92, 247.68, 261.44, 275.2, 292.4, 309.6, 326.8],\r\n    lvl1hit1: [84, 90.3, 96.6, 105, 111.3, 117.6, 126, 134.4, 142.8, 151.2, 159.6, 168, 178.5, 189, 199.5],\r\n    lvl1hit2: [92, 98.9, 105.8, 115, 121.9, 128.8, 138, 147.2, 156.4, 165.6, 174.8, 184, 195.5, 207, 218.5],\r\n    lvl2hit1: [88, 94.6, 101.2, 110, 116.6, 123.2, 132, 140.8, 149.6, 158.4, 167.2, 176, 187, 198, 209],\r\n    lvl2hit2: [96, 103.2, 110.4, 120, 127.2, 134.4, 144, 153.6, 163.2, 172.8, 182.4, 192, 204, 216, 228],\r\n    explosion: [132, 141.9, 151.8, 165, 174.9, 184.8, 198, 211.2, 224.4, 237.6, 250.8, 264, 280.5, 297, 313.5]\r\n  },\r\n  burst: {\r\n    dmg: [232.8, 250.26, 267.72, 291, 308.46, 325.92, 349.2, 372.48, 395.76, 419.04, 442.32, 465.6, 494.7, 523.8, 552.9],\r\n    healHP: [6, 6.45, 6.9, 7.5, 7.95, 8.4, 9, 9.6, 10.2, 10.8, 11.4, 12, 12.75, 13.5, 14.25],\r\n    healHPFlat: [577, 635, 698, 765, 837, 914, 996, 1083, 1174, 1270, 1371, 1477, 1588, 1703, 1824],\r\n    atkRatio: [56, 60.2, 64.4, 70, 74.2, 78.4, 84, 89.6, 95.2, 100.8, 106.4, 112, 119, 126, 133]\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(data.charged.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries(Object.entries(data.skill).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")])),\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    regen: stats => {\r\n      const hp = data.burst.healHP[stats.tlvl.burst] / 100\r\n      const flat = data.burst.healHPFlat[stats.tlvl.burst]\r\n      return [s => (hp * s.finalHP + flat) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n    },\r\n    atkBonus: stats => {\r\n      const { constellation } = stats\r\n      const percent = (data.burst.atkRatio[stats.tlvl.burst] + (constellation < 1 ? 0 : 20)) / 100\r\n      return [s => percent * s.baseATK, [\"baseATK\"]]\r\n    }\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [70, 75.7, 81.4, 89.54, 95.24, 101.75, 110.7, 119.66, 128.61, 138.38, 148.15, 157.92, 167.68, 177.45, 187.22],\r\n      [63.12, 68.26, 73.4, 80.74, 85.88, 91.75, 99.82, 107.9, 115.97, 124.78, 133.59, 142.4, 151.2, 160.01, 168.82],\r\n      [80.32, 86.86, 93.4, 102.74, 109.28, 116.75, 127.02, 137.3, 147.57, 158.78, 169.99, 181.2, 192.4, 203.61, 214.82],\r\n      [101.22, 109.46, 117.7, 129.47, 137.71, 147.13, 160.07, 173.02, 185.97, 200.09, 214.21, 228.34, 242.46, 256.59, 270.71],\r\n    ],\r\n  },\r\n  charged: {\r\n    spinning: [56.29, 60.87, 65.45, 71.99, 76.57, 81.81, 89.01, 96.21, 103.41, 111.26, 119.12, 126.97, 134.82, 142.68, 150.53],\r\n    final: [101.78, 110.07, 118.35, 130.19, 138.47, 147.94, 160.96, 173.97, 186.99, 201.2, 215.4, 229.6, 243.8, 258, 272.21]\r\n  },\r\n  plunging: {\r\n    dmg: [74.59, 80.66, 86.73, 95.40, 101.47, 108.41, 117.95, 127.49, 137.03, 147.44, 157.85, 168.26, 178.66, 189.07, 199.48],\r\n    low: [149.14, 161.28, 173.42, 190.77, 202.91, 216.78, 235.86, 254.93, 274.01, 294.82, 315.63, 336.44, 357.25, 378.06, 398.87],\r\n    high: [186.29, 201.45, 216.62, 238.28, 253.44, 270.77, 294.6, 318.42, 342.25, 368.25, 394.24, 420.23, 446.23, 472.22, 498.21]\r\n  },\r\n  skill: {\r\n    dmg: [172.04, 184.94, 197.85, 215.05, 227.95, 240.86, 258.06, 275.26, 292.47, 309.67, 326.88, 344.08, 365.59, 387.09, 408.60],\r\n    infusionDuration: [2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3, 3, 3, 3],\r\n  },\r\n  burst: {\r\n    dmg: [142.40, 153.08, 163.76, 178, 188.68, 199.36, 213.60, 227.84, 242.08, 256.32, 270.56, 284.80, 302.60, 320.40, 338.20],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    dmg: stats => basicDMGFormula(50, stats, \"elemental\"),\r\n  },\r\n  passive2: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"elemental\"),\r\n  }\r\n}\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n\r\n  normal: {\r\n    hitArr: [\r\n      [89.7, 97, 104.3, 114.73, 122.03, 130.38, 141.85, 153.32, 164.79, 177.31, 191.65, 208.52, 225.38, 242.25, 260.65],\r\n      [87.63, 94.77, 101.9, 112.09, 119.22, 127.38, 138.58, 149.79, 161, 173.23, 187.24, 203.72, 220.2, 236.67, 254.65],\r\n      [98.81, 106.86, 114.9, 126.39, 134.43, 143.63, 156.26, 168.9, 181.54, 195.33, 211.13, 229.71, 248.29, 266.87, 287.14],\r\n      [133.99, 144.89, 155.8, 171.38, 182.29, 194.75, 211.89, 229.03, 246.16, 264.86, 286.28, 311.48, 336.67, 361.86, 389.34],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinning: [68.8, 74.4, 80, 88, 93.6, 100, 108.8, 117.6, 126.4, 136, 147, 159.94, 172.87, 185.81, 199.92],\r\n    final: [124.7, 134.85, 145, 159.5, 169.65, 181.25, 197.2, 213.15, 229.1, 246.5, 266.44, 289.88, 313.33, 336.78, 362.36]\r\n  },\r\n  plunging: {\r\n    dmg: [89.51, 96.79, 104.08, 114.48, 121.77, 130.1, 141.54, 152.99, 164.44, 176.93, 189.42, 201.91, 214.4, 226.89, 239.37],\r\n    low: [178.97, 193.54, 208.11, 228.92, 243.49, 260.13, 283.03, 305.92, 328.81, 353.78, 378.76, 403.73, 428.7, 453.68, 478.65],\r\n    high: [223.55, 241.74, 259.94, 285.93, 304.13, 324.92, 353.52, 382.11, 410.7, 441.89, 473.09, 504.28, 535.47, 566.66, 597.86]\r\n  },\r\n  skill: {\r\n    hit1: [94.4, 101.48, 108.56, 118, 125.08, 132.16, 141.6, 151.04, 160.48, 169.92, 179.36, 188.8, 200.6, 212.4, 224.2],\r\n    hit2: [97.6, 104.92, 112.24, 122, 129.32, 136.64, 146.4, 156.16, 165.92, 175.68, 185.44, 195.2, 207.4, 219.6, 231.8],\r\n    hit3: [128.8, 138.46, 148.12, 161, 170.66, 180.32, 193.2, 206.08, 218.96, 231.84, 244.72, 257.6, 273.7, 289.8, 305.9],\r\n  },\r\n  burst: {\r\n    slashing: [204, 219.3, 234.6, 255, 270.3, 285.6, 306, 326.4, 346.8, 367.2, 387.6, 408, 433.5, 459, 484.5],\r\n    dot: [60, 64.5, 69, 75, 79.5, 84, 90, 96, 102, 108, 114, 120, 127.5, 135, 142.5],\r\n    explosion: [204, 219.3, 234.6, 255, 270.3, 285.6, 306, 326.4, 346.8, 367.2, 387.6, 408, 433.5, 459, 484.5],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: {\r\n    dmg: stats => basicDMGFormula(data.plunging.dmg[stats.tlvl.auto], stats, \"plunging\"),\r\n    low: stats => basicDMGFormula(data.plunging.low[stats.tlvl.auto], stats, \"plunging\"),\r\n    high: stats => basicDMGFormula(data.plunging.high[stats.tlvl.auto], stats, \"plunging\"),\r\n  },\r\n  skill: {\r\n    ...Object.fromEntries(Object.entries(data.skill).map(([name, arr]) =>\r\n      [name, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")])),\r\n    hit2b: stats => basicDMGFormula(data.skill.hit2[stats.tlvl.skill] + 40, stats, \"skill\"),\r\n    hit3b: stats => basicDMGFormula(data.skill.hit3[stats.tlvl.skill] + 40, stats, \"skill\"),\r\n  },\r\n  burst: Object.fromEntries(Object.entries(data.burst).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.burst], stats, \"burst\")])),\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [36.12, 39.06, 42, 46.2, 49.14, 52.5, 57.12, 61.74, 66.36, 71.4, 77.18, 83.97, 90.76, 97.55, 104.96],\r\n      [33.54, 36.27, 39, 42.9, 45.63, 48.75, 53.04, 57.33, 61.62, 66.3, 71.66, 77.97, 84.28, 90.58, 97.46],\r\n      [45.58, 49.29, 53, 58.3, 62.01, 66.25, 72.08, 77.91, 83.74, 90.1, 97.39, 105.96, 114.53, 123.1, 132.45],\r\n      [43, 46.5, 50, 55, 58.5, 62.5, 68, 73.5, 79, 85, 91.88, 99.96, 108.05, 116.13, 124.95],\r\n      [53.75, 58.13, 62.5, 68.75, 73.13, 78.13, 85, 91.88, 98.75, 106.25, 114.84, 124.95, 135.06, 145.16, 156.19]\r\n    ],\r\n  },\r\n  charged: {\r\n    hit: [43.86, 47.43, 51, 56.1, 59.67, 63.75, 69.36, 74.97, 80.58, 86.7, 93.71, 101.96, 110.21, 118.45, 127.45],\r\n    full: [124, 133.3, 142.6, 155, 164.3, 173.6, 186, 198.4, 210.8, 223.2, 236.1, 252.96, 269.82, 286.69, 303.55]\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59]\r\n  },\r\n  skill: {\r\n    dmgPerPaw: [41.92, 45.06, 48.21, 52.4, 55.54, 58.69, 62.88, 67.07, 71.26, 75.46, 79.65, 83.84, 89.08, 94.32, 99.56],\r\n    shieldFlat: [693, 762, 837, 918, 1005, 1097, 1195, 1299, 1409, 1524, 1646, 1773, 1905, 2044, 2188],\r\n    shieldHp: [7.2, 7.74, 8.28, 9, 9.54, 10.08, 10.8, 11.52, 12.24, 12.96, 13.68, 14.4, 15.3, 16.2, 17.1],\r\n    durationPerPaw: [1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.4, 2.4, 2.4, 2.4, 2.4, 2.4, 2.4, 2.4]\r\n  },\r\n  burst: {\r\n    dmg: [80, 86, 92, 100, 106, 112, 120, 128, 136, 144, 152, 160, 170, 180, 190],\r\n    continuousDmg: [52.64, 56.59, 60.54, 65.8, 69.75, 73.7, 78.96, 84.22, 89.49, 94.75, 100.02, 105.28, 111.86, 118.44, 125.02],\r\n    hpFlat: [513, 565, 620, 680, 744, 813, 885, 962, 1044, 1129, 1219, 1313, 1411, 1514, 1621],\r\n    hpPercent: [5.34, 5.74, 6.14, 6.67, 7.07, 7.47, 8, 8.54, 9.07, 9.6, 10.14, 10.67, 11.34, 12.01, 12.67]\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    hit: stats => basicDMGFormula(data.charged.hit[stats.tlvl.auto], stats, \"charged\"),\r\n    full: stats => basicDMGFormula(data.charged.full[stats.tlvl.auto], stats, \"charged\", \"cryo\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    shieldCryo: stats => {\r\n      const hp = data.skill.shieldHp[stats.tlvl.skill] / 100\r\n      const flat = data.skill.shieldFlat[stats.tlvl.skill]\r\n      const shdStr = 2.5 * (stats.constellation >= 2 ? 1.15 : 1)\r\n      return [s => (hp * s.finalHP + flat) * (1 + s.shield_ / 100) * shdStr, [\"finalHP\", \"shield_\"]]\r\n    },\r\n    shield: stats => {\r\n      const hp = data.skill.shieldHp[stats.tlvl.skill] / 100\r\n      const flat = data.skill.shieldFlat[stats.tlvl.skill]\r\n      const shdStr = (stats.constellation >= 2 ? 1.15 : 1)\r\n      return [s => (hp * s.finalHP + flat) * (1 + s.shield_ / 100) * shdStr, [\"finalHP\", \"shield_\"]]\r\n    },\r\n    shieldHoldCryo: stats => {\r\n      const hp = data.skill.shieldHp[stats.tlvl.skill] / 100\r\n      const flat = data.skill.shieldFlat[stats.tlvl.skill]\r\n      const shdStr = 2.5 * 1.75 * (stats.constellation >= 2 ? 1.15 : 1)\r\n      return [s => (hp * s.finalHP + flat) * (1 + s.shield_ / 100) * shdStr, [\"finalHP\", \"shield_\"]]\r\n    },\r\n    shieldHold: stats => {\r\n      const hp = data.skill.shieldHp[stats.tlvl.skill] / 100\r\n      const flat = data.skill.shieldFlat[stats.tlvl.skill]\r\n      const shdStr = 1.75 * (stats.constellation >= 2 ? 1.15 : 1)\r\n      return [s => (hp * s.finalHP + flat) * (1 + s.shield_ / 100) * shdStr, [\"finalHP\", \"shield_\"]]\r\n    },\r\n    dmg: stats => basicDMGFormula(data.skill.dmgPerPaw[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    regen: stats => {\r\n      const hp = data.burst.hpPercent[stats.tlvl.burst] / 100\r\n      const flat = data.burst.hpFlat[stats.tlvl.burst]\r\n      return [s => (hp * s.finalHP + flat) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n    },\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    continuousDmg: stats => basicDMGFormula(data.burst.continuousDmg[stats.tlvl.burst], stats, \"burst\"),\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { FormulaItem, IFormulaSheet } from \"../../../Types/character\"\r\nimport { toTalentPercent } from \"../../../Util/DataminedUtil\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\nimport skillParam_gen_pre from './skillParam_gen.json'\r\nconst skillParam_gen = skillParam_gen_pre as any\r\nlet a = 0, s = 0, b = 0\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n      toTalentPercent(skillParam_gen.auto[a++]),//x2\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n      toTalentPercent(skillParam_gen.auto[a++]),//x2\r\n    ]\r\n  },\r\n  charged: {\r\n    spinning: toTalentPercent(skillParam_gen.auto[a++]),\r\n    final: toTalentPercent(skillParam_gen.auto[a++]),\r\n    stam: skillParam_gen.auto[a++][0],\r\n    maxDuration: skillParam_gen.auto[a++][0]\r\n  },\r\n  plunging: {\r\n    dmg: toTalentPercent(skillParam_gen.auto[a++]),\r\n    low: toTalentPercent(skillParam_gen.auto[a++]),\r\n    high: toTalentPercent(skillParam_gen.auto[a++]),\r\n  },\r\n  skill: {\r\n    pressDMG: toTalentPercent(skillParam_gen.skill[s++]),\r\n    holdDMG: toTalentPercent(skillParam_gen.skill[s++]),\r\n    brandDMG: toTalentPercent(skillParam_gen.skill[s++]),\r\n    phyResDec: toTalentPercent(skillParam_gen.skill[s++]),\r\n    cyroResDec: toTalentPercent(skillParam_gen.skill[s++]),\r\n    resDecDuration: skillParam_gen.skill[s++][0],\r\n    cdPress: skillParam_gen.skill[s++][0],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n    //TODO: 14?\r\n    //TODO: neg of dec\r\n    //TODO: neg of dec\r\n    //TODO: 18?\r\n  },\r\n  burst: {\r\n    dmg: toTalentPercent(skillParam_gen.burst[b++]),\r\n    baseDMG: toTalentPercent(skillParam_gen.burst[b++]),\r\n    stackDMG: toTalentPercent(skillParam_gen.burst[b++]),\r\n    maxStack: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  }\r\n} as const\r\nconst physicalBurst25 = (val, stats): FormulaItem => {\r\n  val = val / 100\r\n  const hitModeMultiKey = stats.hitMode === \"avgHit\" ? \"burst_avgHit_base_multi\" : stats.hitMode === \"critHit\" ? \"critHit_base_multi\" : \"\"\r\n  return [s => val * s.finalATK * (hitModeMultiKey ? s[hitModeMultiKey] : 1) * (s.physical_burst_hit_base_multi + 0.25) * s.enemyLevel_multi * s.physical_enemyRes_multi, [\"finalATK\", ...(hitModeMultiKey ? [hitModeMultiKey] : []), \"physical_burst_hit_base_multi\", \"enemyLevel_multi\", \"physical_enemyRes_multi\"]]\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    spinning: stats => basicDMGFormula(data.charged.spinning[stats.tlvl.auto], stats, \"charged\"),\r\n    final: stats => basicDMGFormula(data.charged.final[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    pressDMG: stats => basicDMGFormula(data.skill.pressDMG[stats.tlvl.skill], stats, \"skill\"),\r\n    holdDMG: stats => basicDMGFormula(data.skill.holdDMG[stats.tlvl.skill], stats, \"skill\"),\r\n    brandDMG: stats => basicDMGFormula(data.skill.brandDMG[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    ...Object.fromEntries([...Array(31).keys()].map(i =>\r\n      [i, stats => basicDMGFormula(data.burst.baseDMG[stats.tlvl.burst] + i * data.burst.stackDMG[stats.tlvl.burst], stats, \"burst\", \"physical\")])),\r\n    ...Object.fromEntries([...Array(31).keys()].map(i =>\r\n      [`${i}_50`, stats => physicalBurst25(data.burst.baseDMG[stats.tlvl.burst] + i * data.burst.stackDMG[stats.tlvl.burst], stats)]))\r\n  },\r\n  passive1: {\r\n    dmg: stats => basicDMGFormula(data.burst.baseDMG[stats.tlvl.burst] / 2, stats, \"burst\", \"physical\"),\r\n    dmg50: stats => physicalBurst25(data.burst.baseDMG[stats.tlvl.burst] / 2, stats)\r\n  },\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [44.12, 47.71, 51.3, 56.43, 60.02, 64.13, 69.77, 75.41, 81.05, 87.21, 93.37, 99.52, 105.68, 111.83, 117.99],\r\n      [46.78, 50.59, 54.4, 59.84, 63.65, 68, 73.98, 79.97, 85.95, 92.48, 99.01, 105.54, 112.06, 118.59, 125.12],\r\n      [58.14, 62.87, 67.6, 74.36, 79.09, 84.5, 91.94, 99.37, 106.81, 114.92, 123.03, 131.14, 139.26, 147.37, 155.48],\r\n      [57.71, 62.4, 67.1, 73.81, 78.51, 83.88, 91.26, 98.64, 106.02, 114.07, 122.12, 130.17, 138.23, 146.28, 154.33],\r\n      [72.07, 77.93, 83.8, 92.18, 98.05, 104.75, 113.97, 123.19, 132.4, 142.46, 152.52, 162.57, 172.63, 182.68, 192.74],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimedShot: [43.86, 47.43, 51, 56.1, 59.67, 63.75, 69.36, 74.97, 80.58, 86.7, 92.82, 98.94, 105.06, 111.18, 117.3],\r\n    fullAimedShot: [124, 133.3, 142.6, 155, 164.3, 173.6, 186, 198.4, 210.8, 223.2, 235.6, 248, 263.5, 279, 294.5]\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59]\r\n  },\r\n  skill: {\r\n    oz: [88.8, 95.46, 102.12, 111, 117.66, 124.32, 133.2, 142.08, 150.96, 159.84, 168.72, 177.6, 188.7, 199.8, 210.9],\r\n    dmg: [115.44, 124.1, 132.76, 144.3, 152.96, 161.62, 173.16, 184.7, 196.25, 207.79, 219.34, 230.88, 245.31, 259.74, 274.17],\r\n  },\r\n  burst: {\r\n    dmg: [208, 223.6, 239.2, 260, 275.6, 291.2, 312, 332.8, 353.6, 374.4, 395.2, 416, 442, 468, 494],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    aimShot: stats => basicDMGFormula(data.charged.aimedShot[stats.tlvl.auto], stats, \"charged\"),\r\n    fullAimedShot: stats => basicDMGFormula(data.charged.fullAimedShot[stats.tlvl.auto], stats, \"charged\", \"electro\"),\r\n    fullAimedShotOz: stats => basicDMGFormula(data.charged.fullAimedShot[stats.tlvl.auto] * (152.7 / 100), stats, \"charged\", \"electro\"),\r\n  },\r\n  plunging: {\r\n    dmg: stats => basicDMGFormula(data.plunging.dmg[stats.tlvl.auto], stats, \"plunging\"),\r\n    low: stats => basicDMGFormula(data.plunging.low[stats.tlvl.auto], stats, \"plunging\"),\r\n    high: stats => basicDMGFormula(data.plunging.high[stats.tlvl.auto], stats, \"plunging\"),\r\n  },\r\n  skill: {\r\n    oz: stats => basicDMGFormula(data.skill.oz[stats.tlvl.skill], stats, \"skill\"),\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill] + (stats.constellation >= 2 ? 200 : 0), stats, \"skill\"),\r\n    activeChar: stats => basicDMGFormula(30, stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    addDmg: stats => basicDMGFormula(222, stats, \"burst\"),\r\n    regen: stats => [s => 0.2 * s.finalHP * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n  },\r\n  passive2: {\r\n    dmg: stats => basicDMGFormula(80, stats, \"skill\"),\r\n  },\r\n  constellation1: {\r\n    dmg: stats => basicDMGFormula(22, stats, \"normal\"),\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [31.73, 34.32, 36.9, 40.59, 43.17, 46.13, 50.18, 54.24, 58.3, 62.73, 67.8, 73.77, 79.74, 85.7, 92.21],\r\n      [35.6, 38.5, 41.4, 45.54, 48.44, 51.75, 56.3, 60.86, 65.41, 70.38, 76.07, 82.77, 89.46, 96.16, 103.46],\r\n      [45.49, 49.2, 52.9, 58.19, 61.89, 66.13, 71.94, 77.76, 83.58, 89.93, 97.2, 105.76, 114.31, 122.87, 132.2],\r\n      [45.49, 49.2, 52.9, 58.19, 61.89, 66.13, 71.94, 77.76, 83.58, 89.93, 97.2, 105.76, 114.31, 122.87, 132.2],\r\n      [48.25, 52.17, 56.1, 61.71, 65.64, 70.13, 76.3, 82.47, 88.64, 95.37, 103.08, 112.16, 121.23, 130.3, 140.19],\r\n      [57.62, 62.31, 67, 73.7, 78.39, 83.75, 91.12, 98.49, 105.86, 113.9, 123.11, 133.95, 144.78, 155.61, 167.43],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimedShot: [43.86, 47.43, 51, 56.1, 59.67, 63.75, 69.36, 74.97, 80.58, 86.7, 92.82, 98.94, 105.06, 111.18, 117.3],\r\n    aimShot1: [124, 133.3, 142.6, 155, 164.3, 173.6, 186, 198.4, 210.8, 223.2, 235.6, 248, 263.5, 279, 294.5],\r\n    frostflake: [128, 137.6, 147.2, 160, 169.6, 179.2, 192, 204.8, 217.6, 230.4, 243.2, 256, 272, 288, 304],\r\n    frostflakeBloom: [217.6, 233.92, 250.24, 272, 288.32, 304.64, 326.4, 348.16, 369.92, 391.68, 413.44, 435.2, 462.4, 489.6, 516.8]\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59]\r\n  },\r\n  skill: {\r\n    hp: [120, 129, 138, 150, 159, 168, 180, 192, 204, 216, 228, 240, 255, 270, 285],\r\n    dmg: [132, 141.9, 151.8, 165, 174.9, 184.8, 198, 211.2, 224.4, 237.6, 250.8, 264, 280.5, 297, 313.5],\r\n  },\r\n  burst: {\r\n    dmg: [70.27, 75.54, 80.81, 87.84, 93.11, 98.38, 105.41, 112.44, 119.46, 126.49, 133.52, 140.54, 149.33, 158.11, 166.9],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    aimShot: stats => basicDMGFormula(data.charged.aimedShot[stats.tlvl.auto], stats, \"charged\"),\r\n    aimShot1: stats => basicDMGFormula(data.charged.aimShot1[stats.tlvl.auto], stats, \"charged\", \"cryo\"),\r\n    frostflake: stats => {\r\n      if (stats.hitMode === \"avgHit\") {\r\n        const [conditionalNum] = stats.conditionalValues?.character?.Ganyu?.a1 ?? []\r\n        if (conditionalNum) {\r\n          const val = data.charged.frostflake[stats.tlvl.auto] / 100\r\n          //cryo_charged_hit or cryo_melt_charged_hit\r\n          const statKey = `cryo${stats.reactionMode === \"cryo_melt\" ? \"_melt\" : \"\"}_charged_hit`\r\n          //cryo charged atk hit * (1 + min(20% + critRate, 100) critDmg_)\r\n          return [s => val * s[statKey] * (1 + Math.min(20 + s.critRate_ + s.charged_critRate_, 100) * s.critDMG_ / 10000), [statKey, \"critRate_\", \"critDMG_\", \"charged_critRate_\"]]\r\n        }\r\n      }\r\n      return basicDMGFormula(data.charged.frostflake[stats.tlvl.auto], stats, \"charged\", \"cryo\")\r\n    },\r\n    frostflakeBloom: stats => {\r\n      if (stats.hitMode === \"avgHit\") {\r\n        const [conditionalNum] = stats.conditionalValues?.character?.Ganyu?.a1 ?? []\r\n        if (conditionalNum) {\r\n          const val = data.charged.frostflakeBloom[stats.tlvl.auto] / 100\r\n          //cryo_charged_hit or cryo_melt_charged_hit\r\n          const statKey = `cryo${stats.reactionMode === \"cryo_melt\" ? \"_melt\" : \"\"}_charged_hit`\r\n          //cryo charged atk hit * (1 + min(20% + critRate, 100) critDmg_)\r\n          return [s => val * s[statKey] * (1 + Math.min(20 + s.critRate_ + s.charged_critRate_, 100) * s.critDMG_ / 10000), [statKey, \"critRate_\", \"critDMG_\", \"charged_critRate_\"]]\r\n        }\r\n      }\r\n      return basicDMGFormula(data.charged.frostflakeBloom[stats.tlvl.auto], stats, \"charged\", \"cryo\")\r\n    },\r\n  },\r\n  plunging: {\r\n    dmg: stats => basicDMGFormula(data.plunging.dmg[stats.tlvl.auto], stats, \"plunging\"),\r\n    low: stats => basicDMGFormula(data.plunging.low[stats.tlvl.auto], stats, \"plunging\"),\r\n    high: stats => basicDMGFormula(data.plunging.high[stats.tlvl.auto], stats, \"plunging\"),\r\n  },\r\n  skill: {\r\n    hp: stats => {\r\n      const hp = data.skill.hp[stats.tlvl.skill] / 100\r\n      return [(s) => hp * s.finalHP, [\"finalHP\"]]\r\n    },\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { getTalentStatKey } from \"../../../Build/Build\"\r\nimport { FormulaItem, IFormulaSheet } from \"../../../Types/character\"\r\nimport { BasicStats } from \"../../../Types/stats\"\r\nimport { singleToTalentPercent, toTalentInt, toTalentPercent } from \"../../../Util/DataminedUtil\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\nimport skillParam_gen_pre from './skillParam_gen.json'\r\nconst skillParam_gen = skillParam_gen_pre as any\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0, c4 = 0, c6 = 0\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n    ],\r\n  },\r\n  charged: {\r\n    hit: toTalentPercent(skillParam_gen.auto[a++]),\r\n    full: toTalentPercent(skillParam_gen.auto[a++]),\r\n  },\r\n  plunging: {\r\n    dmg: toTalentPercent(skillParam_gen.auto[a++]),\r\n    low: toTalentPercent(skillParam_gen.auto[a++]),\r\n    high: toTalentPercent(skillParam_gen.auto[a++]),\r\n  },\r\n  skill: {\r\n    dmg: toTalentPercent(skillParam_gen.skill[s++]),\r\n    def_: toTalentInt(skillParam_gen.skill[s++]),\r\n    geo_dmg_: toTalentPercent(skillParam_gen.skill[s++]),\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: toTalentPercent(skillParam_gen.burst[b++]),\r\n    dmgCollapse: toTalentPercent(skillParam_gen.burst[b++]),\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    def_: singleToTalentPercent(skillParam_gen.passive1[p1++][0]),\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    skill_def_: singleToTalentPercent(skillParam_gen.passive2[p2++][0]),\r\n    burst_def_: singleToTalentPercent(skillParam_gen.passive2[p2++][0]),\r\n  },\r\n  constellation4: {\r\n    heal_def_: singleToTalentPercent(skillParam_gen.constellation4[c4++]),\r\n  },\r\n  constellation6: {\r\n    g1: singleToTalentPercent(skillParam_gen.constellation6[c6++]),\r\n    g2: singleToTalentPercent(skillParam_gen.constellation6[c6++]),\r\n    g3: singleToTalentPercent(skillParam_gen.constellation6[c6++]),\r\n    duration: skillParam_gen.constellation6[c6++][0],\r\n  }\r\n} as const\r\n\r\nfunction defDMGFormula(percent: number, defPercent: number, stats: BasicStats, skillKey: string): FormulaItem {\r\n  const val = percent / 100\r\n  const defMulti = defPercent / 100\r\n  const statKey = getTalentStatKey(skillKey, stats) + \"_multi\"\r\n  return [s => (val * s.finalATK + defMulti * s.finalDEF) * s[statKey], [\"finalATK\", \"finalDEF\", statKey]]\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula((arr[stats.tlvl.auto]), stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\", name === \"hit\" ? undefined : \"geo\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    dmgA4: stats => defDMGFormula(data.skill.dmg[stats.tlvl.skill], data.passive2.skill_def_, stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => {\r\n      const percent = (data.burst.dmg[stats.tlvl.burst] + (stats.ascension >= 4 ? data.passive2.burst_def_ : 0)) / 100\r\n      const key = getTalentStatKey(\"burst\", stats) + \"_multi\"\r\n      return [s => percent * s.finalDEF * s[key], [key, \"finalDEF\"]]\r\n    },\r\n    dmgCollapse: stats => {\r\n      const percent = (data.burst.dmgCollapse[stats.tlvl.burst] + (stats.ascension >= 4 ? data.passive2.burst_def_ : 0)) / 100\r\n      const key = getTalentStatKey(\"burst\", stats) + \"_multi\"\r\n      return [s => percent * s.finalDEF * s[key], [key, \"finalDEF\"]]\r\n    },\r\n  },\r\n  constellation4: {\r\n    heal: stats => {\r\n      const percent = data.constellation4.heal_def_ / 100\r\n      return [s => percent * s.finalDEF * s.heal_multi, [\"finalDEF\", \"heal_multi\"]]\r\n    },\r\n  }\r\n} as const\r\nexport default formula","import { getTalentStatKey } from \"../../../Build/Build\"\r\nimport { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [46.89, 50.08, 53.28, 57.54, 60.74, 64.47, 69.26, 74.06, 78.85, 83.65, 88.44, 93.24, 98.04, 102.83, 107.63],\r\n      [48.25, 51.54, 54.83, 59.22, 62.51, 66.35, 71.28, 76.22, 81.15, 86.09, 91.02, 95.96, 100.89, 105.83, 110.76],\r\n      [61.05, 65.21, 69.38, 74.93, 79.09, 83.94, 90.19, 96.43, 102.68, 108.92, 115.16, 121.41, 127.65, 133.89, 140.14],\r\n      [65.64, 70.12, 74.59, 80.56, 85.03, 90.26, 96.97, 103.68, 110.4, 117.11, 123.82, 130.54, 137.25, 143.96, 150.68],\r\n      [33.27, 35.54, 37.81, 40.84, 43.1, 45.75, 49.15, 52.56, 55.96, 59.36, 62.77, 66.17, 69.57, 72.98, 76.38],//5.1\r\n      [35.2, 37.6, 40, 43.2, 45.6, 48.4, 52, 55.6, 59.2, 62.8, 66.4, 70, 73.6, 77.2, 80.8],//5.2\r\n      [85.96, 91.82, 97.68, 105.49, 111.36, 118.19, 126.98, 135.78, 144.57, 153.36, 162.15, 170.94, 179.73, 188.52, 197.31],//6\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: [135.96, 145.23, 154.5, 166.86, 176.13, 186.95, 200.85, 214.76, 228.66, 242.57, 256.47, 270.38, 284.28, 298.19, 312.09],\r\n  },\r\n  plunging: {\r\n    dmg: [65.42, 69.88, 74.34, 80.29, 84.75, 89.95, 96.64, 103.33, 110.02, 116.71, 123.4, 130.1, 136.79, 143.48, 150.17],\r\n    low: [130.81, 139.73, 148.65, 160.54, 169.46, 179.86, 193.24, 206.62, 220, 233.38, 246.76, 260.13, 273.51, 286.89, 300.27],\r\n    high: [163.39, 174.53, 185.67, 200.52, 211.66, 224.66, 241.37, 258.08, 274.79, 291.5, 308.21, 324.92, 341.63, 358.34, 375.05],\r\n  },\r\n  skill: {\r\n    atk_inc: [3.84, 4.07, 4.3, 4.6, 4.83, 5.06, 5.36, 5.66, 5.96, 6.26, 6.56, 6.85, 7.15, 7.45, 7.75],\r\n    dmg: [64, 68.8, 73.6, 80, 84.8, 89.6, 96, 102.4, 108.8, 115.2, 121.6, 128, 136, 144, 152],\r\n  },\r\n  burst: {\r\n    dmg: [303.27, 321.43, 339.59, 363.2, 381.36, 399.52, 423.13, 446.74, 470.34, 493.95, 517.56, 541.17, 564.78, 588.38, 611.99],\r\n    low_dmg: [379.09, 401.79, 424.49, 454, 476.7, 499.4, 528.91, 558.42, 587.93, 617.44, 646.95, 676.46, 705.97, 735.48, 764.99],\r\n    regen: [6.26, 6.64, 7.01, 7.5, 7.88, 8.25, 8.74, 9.23, 9.71, 10.2, 10.69, 11.18, 11.66, 12.15, 12.64],\r\n    low_regen: [8.35, 8.85, 9.35, 10, 10.5, 11, 11.65, 12.3, 12.95, 13.6, 14.25, 14.9, 15.55, 16.2, 16.85]\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    dmg: stats => basicDMGFormula(data.charged.dmg[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    atk_inc: stats => {\r\n      const val = data.skill.atk_inc[stats.tlvl.skill] / 100\r\n      return [s => Math.min(val * (s.premod?.finalHP ?? s.finalHP), 4 * s.baseATK), [\"finalHP\", \"baseATK\"]]\r\n    },\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    dmgC2: stats => {\r\n      const val = data.skill.dmg[stats.tlvl.skill] / 100\r\n      const statKey = getTalentStatKey(\"skill\", stats) + \"_multi\"\r\n      return [s => (val * s.finalATK + 0.1 * s.finalHP) * s[statKey], [\"finalHP\", \"finalATK\", statKey]]\r\n    }\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    low_dmg: stats => basicDMGFormula(data.burst.low_dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    regen: stats => {\r\n      const val = data.burst.regen[stats.tlvl.burst] / 100\r\n      return [s => val * s.finalHP * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n    },\r\n    low_regen: stats => {\r\n      const val = data.burst.low_regen[stats.tlvl.burst] / 100\r\n      return [s => val * s.finalHP * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n    },\r\n  },\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [48.33, 52.27, 56.2, 61.82, 65.75, 70.25, 76.43, 82.61, 88.8, 95.54, 103.27, 112.36, 121.44, 130.53, 140.44],\r\n      [45.58, 49.29, 53, 58.3, 62.01, 66.25, 72.08, 77.91, 83.74, 90.1, 97.39, 105.96, 114.53, 123.1, 132.45],\r\n      [60.29, 65.19, 70.1, 77.11, 82.02, 87.63, 95.34, 103.05, 110.76, 119.17, 128.81, 140.14, 151.48, 162.81, 175.18],\r\n      [65.88, 71.24, 76.6, 84.26, 89.62, 95.75, 104.18, 112.6, 121.03, 130.22, 140.75, 153.14, 165.52, 177.91, 191.42],\r\n      [79.21, 85.65, 92.1, 101.31, 107.76, 115.13, 125.26, 135.39, 145.52, 156.57, 169.23, 184.13, 199.02, 213.91, 230.16],\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: [162.02, 175.21, 188.4, 207.24, 220.43, 235.5, 256.22, 276.95, 297.67, 320.28, 346.19, 376.65, 407.11, 437.58, 470.81],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04]\r\n  },\r\n  skill: {\r\n    dmg: [292, 313.9, 335.8, 365, 386.9, 408.8, 438, 467.2, 496.4, 525.6, 554.8, 584, 620.5, 657, 693.5],\r\n  },\r\n  burst: {\r\n    skill: [424.8, 456.66, 488.52, 531, 562.86, 594.72, 637.2, 679.68, 722.16, 764.64, 807.12, 849.6, 902.7, 955.8, 1008.9],\r\n    field_dmg: [78.4, 84.28, 90.16, 98, 103.88, 109.76, 117.6, 125.44, 133.28, 141.12, 148.96, 156.8, 166.6, 176.4, 186.2],\r\n    heal_flat: [1540, 1694, 1861, 2041, 2234, 2439, 2657, 2888, 3132, 3389, 3659, 3941, 4236, 4544, 4865],\r\n    heal_atk: [251.2, 270.04, 288.88, 314, 332.84, 351.68, 376.8, 401.92, 427.04, 452.16, 477.28, 502.4, 533.8, 565.2, 596.6],\r\n    regen_flat: [154, 169, 186, 204, 223, 244, 266, 289, 313, 339, 366, 394, 424, 454, 487],\r\n    regen_atk: [25.12, 27, 28.89, 31.4, 33.28, 35.17, 37.68, 40.19, 42.7, 45.22, 47.73, 50.24, 53.38, 56.52, 59.66],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    dmg: stats => basicDMGFormula(data.charged.dmg[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    dmg_hold: stats => {\r\n      const val = data.skill.dmg[stats.tlvl.skill] / 100\r\n      const hitModeMultiKey = stats.hitMode === \"avgHit\" ? \"skill_avgHit_base_multi\" : stats.hitMode === \"critHit\" ? \"critHit_base_multi\" : \"\"\r\n      return [s => val * s.finalATK * (hitModeMultiKey ? s[hitModeMultiKey] : 1) * (s.anemo_skill_hit_base_multi + 0.4) * s.enemyLevel_multi * s.anemo_enemyRes_multi,\r\n      [\"finalATK\", ...(hitModeMultiKey ? [hitModeMultiKey] : []), \"anemo_skill_hit_base_multi\", \"enemyLevel_multi\", \"anemo_enemyRes_multi\"]]\r\n    }\r\n  },\r\n  burst: {\r\n    skill: stats => basicDMGFormula(data.burst.skill[stats.tlvl.burst], stats, \"burst\"),\r\n    field_dmg: stats => basicDMGFormula(data.burst.field_dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    heal: stats => {\r\n      const atk = data.burst.heal_atk[stats.tlvl.burst] / 100\r\n      const flat = data.burst.heal_flat[stats.tlvl.burst]\r\n      return [s => (atk * s.finalATK + flat) * s.heal_multi, [\"finalATK\", \"heal_multi\"]]\r\n    },\r\n    regen: stats => {\r\n      const atk = data.burst.regen_atk[stats.tlvl.burst] / 100\r\n      const flat = data.burst.regen_flat[stats.tlvl.burst]\r\n      return [s => (atk * s.finalATK + flat) * s.heal_multi, [\"finalATK\", \"heal_multi\"]]\r\n    },\r\n  },\r\n  passive1: {\r\n    dmg: stats => [s => 0.15 * s.finalATK * s.heal_multi, [\"finalATK\", \"heal_multi\"]],\r\n  },\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}\r\n","import { ElementKey } from \"../../Types/consts\";\r\n\r\nexport const absorbableEle = [\"hydro\", \"pyro\", \"cryo\", \"electro\"] as ElementKey[]","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\nimport { absorbableEle } from \"../dataUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [44.98, 48.64, 52.3, 57.53, 61.19, 65.38, 71.13, 76.88, 82.63, 88.91, 96.1, 104.56, 113.02, 121.47, 130.7],//1\r\n      [45.24, 48.92, 52.6, 57.86, 61.54, 65.75, 71.54, 77.32, 83.11, 89.42, 96.65, 105.16, 113.66, 122.17, 131.45],//2\r\n      [25.8, 27.9, 30, 33, 35.1, 37.5, 40.8, 44.1, 47.4, 51, 55.13, 59.98, 64.83, 69.68, 74.97],//3.1\r\n      [30.96, 33.48, 36, 39.6, 42.12, 45, 48.96, 52.92, 56.88, 61.2, 66.15, 71.97, 77.79, 83.61, 89.96],//3.2\r\n      [60.72, 65.66, 70.6, 77.66, 82.6, 88.25, 96.02, 103.78, 111.55, 120.02, 129.73, 141.14, 152.56, 163.98, 176.43],//4\r\n      [25.37, 27.44, 29.5, 32.45, 34.52, 36.88, 40.12, 43.37, 46.61, 50.15, 54.21, 58.98, 63.75, 68.52, 73.72],//5x3\r\n    ],\r\n  },\r\n  charged: {\r\n    hit1: [43, 46.5, 50, 55, 58.5, 62.5, 68, 73.5, 79, 85, 91.88, 99.96, 108.05, 116.13, 124.95],\r\n    hit2: [74.65, 80.72, 86.8, 95.48, 101.56, 108.5, 118.05, 127.6, 137.14, 147.56, 159.5, 173.53, 187.57, 201.6, 216.91]\r\n  },\r\n  plunging: {\r\n    dmg: [81.83, 88.49, 95.16, 104.67, 111.33, 118.94, 129.41, 139.88, 150.35, 161.76, 173.18, 184.6, 196.02, 207.44, 218.86],\r\n    low: [163.63, 176.95, 190.27, 209.3, 222.62, 237.84, 258.77, 279.7, 300.63, 323.46, 346.29, 369.12, 391.96, 414.79, 437.62],\r\n    high: [204.39, 221.02, 237.66, 261.42, 278.06, 297.07, 323.21, 349.36, 375.5, 404.02, 432.54, 461.06, 489.57, 518.09, 546.61]\r\n  },\r\n  skill: {\r\n    press: [192, 206.4, 220.8, 240, 254.4, 268.8, 288, 307.2, 326.4, 345.6, 364.8, 384, 408, 432, 456],\r\n    hold: [260.8, 280.36, 299.92, 326, 345.56, 365.12, 391.2, 417.28, 443.36, 469.44, 495.52, 521.6, 554.2, 586.8, 619.4]\r\n  },\r\n  burst: {\r\n    dmg: [262.4, 282.08, 301.76, 328, 347.68, 367.36, 393.6, 419.84, 446.08, 472.32, 498.56, 524.8, 557.6, 590.4, 623.2],\r\n    dot: [120, 129, 138, 150, 159, 168, 180, 192, 204, 216, 228, 240, 255, 270, 285],\r\n    add: [36, 38.7, 41.4, 45, 47.7, 50.4, 54, 57.6, 61.2, 64.8, 68.4, 72, 76.5, 81, 85.5]\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    hit1: stats => basicDMGFormula(data.charged.hit1[stats.tlvl.auto], stats, \"charged\"),\r\n    hit2: stats => basicDMGFormula(data.charged.hit2[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: {\r\n    dmg: stats => basicDMGFormula(data.plunging.dmg[stats.tlvl.auto], stats, \"plunging\"),\r\n    low: stats => basicDMGFormula(data.plunging.low[stats.tlvl.auto], stats, \"plunging\"),\r\n    high: stats => basicDMGFormula(data.plunging.high[stats.tlvl.auto], stats, \"plunging\"),\r\n  },\r\n  skill: {\r\n    press: stats => basicDMGFormula(data.skill.press[stats.tlvl.skill], stats, \"skill\"),\r\n    hold: stats => basicDMGFormula(data.skill.hold[stats.tlvl.skill], stats, \"skill\"),\r\n    pdmg: stats => basicDMGFormula(data.plunging.dmg[stats.tlvl.auto], stats, \"plunging\", \"anemo\"),\r\n    plow: stats => basicDMGFormula(data.plunging.low[stats.tlvl.auto], stats, \"plunging\", \"anemo\"),\r\n    phigh: stats => basicDMGFormula(data.plunging.high[stats.tlvl.auto], stats, \"plunging\", \"anemo\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    dot: stats => basicDMGFormula(data.burst.dot[stats.tlvl.burst], stats, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(eleKey => [eleKey, stats => basicDMGFormula(data.burst.add[stats.tlvl.burst], stats, \"burst\", eleKey)]))\r\n  },\r\n  passive1: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, stats => basicDMGFormula(200, stats, \"plunging\", eleKey)])),\r\n  passive2: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, stats => [s => (s.premod?.eleMas ?? s.eleMas) * 0.04, ['eleMas']]])),\r\n  constellation6: {\r\n    bonus: stats => [s => (s.premod?.eleMas ?? s.eleMas) * 0.2, ['eleMas']]\r\n  }\r\n}\r\n\r\nexport default formula\r\n","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [53.75, 58.13, 62.5, 68.75, 73.13, 78.13, 85, 91.88, 98.75, 106.25, 114.84, 124.95, 135.06, 145.16, 156.19],\r\n      [51.69, 55.89, 60.1, 66.11, 70.32, 75.13, 81.74, 88.35, 94.96, 102.17, 110.43, 120.15, 129.87, 139.59, 150.19],\r\n      [65.27, 70.59, 75.9, 83.49, 88.8, 94.88, 103.22, 111.57, 119.92, 129.03, 139.47, 151.74, 164.01, 176.29, 189.67],\r\n      [70.86, 76.63, 82.4, 90.64, 96.41, 103, 112.06, 121.13, 130.19, 140.08, 151.41, 164.73, 178.06, 191.38, 205.92],\r\n      [88.24, 95.42, 102.6, 112.86, 120.04, 128.25, 139.54, 150.82, 162.11, 174.42, 188.53, 205.12, 221.71, 238.3, 256.4]\r\n    ]\r\n  },\r\n  charged: {\r\n    hitArr: [\r\n      [55.04, 59.52, 64, 70.4, 74.88, 80, 87.04, 94.08, 101.12, 108.8, 117.6, 127.95, 138.3, 148.65, 159.94,],\r\n      [73.1, 79.05, 85, 93.5, 99.45, 106.25, 115.6, 124.95, 134.3, 144.5, 156.19, 169.93, 183.68, 197.42, 212.42],\r\n    ]\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04]\r\n  },\r\n  skill: {\r\n    dmg: [191.2, 205.54, 219.88, 239, 253.34, 267.68, 286.8, 305.92, 325.04, 344.16, 363.28, 382.4, 406.3, 430.2, 454.1],\r\n  },\r\n  burst: {\r\n    dmg: [77.6, 83.42, 89.24, 97, 102.82, 108.64, 116.4, 124.16, 131.92, 139.68, 147.44, 155.2, 164.9, 174.6, 184.3],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(data.charged.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n  passive1: {\r\n    dmg: stats => [s => 0.15 * s.finalATK * s.heal_multi, [\"finalATK\", \"heal_multi\"]],\r\n  },\r\n  constellation4: {\r\n    shield: stats => [s => 0.3 * s.finalHP * (1 + s.shield_ / 100), [\"finalHP\", \"shield_\"]],\r\n    shieldCryo: stats => [s => 0.3 * s.finalHP * (1 + s.shield_ / 100) * 2.5, [\"finalHP\", \"shield_\"]],\r\n  },\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [45.73, 49.45, 53.17, 58.49, 62.21, 66.46, 72.31, 78.16, 84.01, 90.39, 96.77, 103.15, 109.53, 115.91, 122.29],\r\n      [48.68, 52.65, 56.61, 62.27, 66.23, 70.76, 76.99, 83.22, 89.44, 96.24, 103.03, 109.82, 116.62, 123.41, 130.2],\r\n      [62.62, 67.72, 72.82, 80.1, 85.19, 91.02, 99.03, 107.04, 115.05, 123.79, 132.53, 141.26, 150, 158.74, 167.48],\r\n      [22.65, 24.49, 26.33, 28.97, 30.81, 32.92, 35.81, 38.71, 41.61, 44.77, 47.93, 51.09, 54.25, 57.41, 60.57],//×3\r\n      [78.18, 84.55, 90.91, 100, 106.36, 113.64, 123.64, 133.64, 143.64, 154.55, 165.45, 176.36, 187.27, 198.18, 209.09]\r\n    ]\r\n  },\r\n  charged: {\r\n    hit: [55.13, 59.61, 64.1, 70.51, 75, 80.13, 87.18, 94.23, 101.28, 108.97, 116.66, 124.35, 132.05, 139.74, 147.43],//×3\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04],\r\n  },\r\n  skill: {\r\n    dmg: [239.2, 257.14, 275.08, 299, 316.94, 334.88, 358.8, 382.72, 406.64, 430.56, 454.48, 478.4, 508.3, 538.2, 568.1]\r\n  },\r\n  burst: {\r\n    cutting: [112.3, 120.72, 129.15, 140.38, 148.8, 157.22, 168.45, 179.68, 190.91, 202.14, 213.37, 224.6, 238.64, 252.68, 266.71],\r\n    bloom: [168.45, 181.08, 193.72, 210.56, 223.2, 235.83, 252.68, 269.52, 286.36, 303.21, 320.05, 336.9, 357.96, 379.01, 400.07],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\")\r\n  },\r\n  burst: {\r\n    cutting: stats => basicDMGFormula(data.burst.cutting[stats.tlvl.burst], stats, \"burst\"),\r\n    bloom: stats => basicDMGFormula(data.burst.bloom[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: stats => basicDMGFormula(data.burst.cutting[stats.tlvl.burst] / 5, stats, \"burst\"),\r\n  }\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { singleToTalentPercent, toTalentPercent } from \"../../../Util/DataminedUtil\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\nimport skillParam_gen_pre from './skillParam_gen.json'\r\nconst skillParam_gen = skillParam_gen_pre as any\r\nlet a = 0, s = 0, b = 0\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      toTalentPercent(skillParam_gen.auto[a++]),//1\r\n      toTalentPercent(skillParam_gen.auto[a++]),//2\r\n      toTalentPercent(skillParam_gen.auto[a++]),//3\r\n      toTalentPercent(skillParam_gen.auto[a++]),//4.1\r\n      toTalentPercent(skillParam_gen.auto[a++]),//4.2\r\n      toTalentPercent(skillParam_gen.auto[a++]),//5\r\n    ],\r\n  },\r\n  charged: {\r\n    hit1: toTalentPercent(skillParam_gen.auto[a++]),\r\n    hit2: toTalentPercent(skillParam_gen.auto[a++]),\r\n    stam: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: toTalentPercent(skillParam_gen.auto[a++]),\r\n    low: toTalentPercent(skillParam_gen.auto[a++]),\r\n    high: toTalentPercent(skillParam_gen.auto[a++]),\r\n  },\r\n  skill: {\r\n    stilleto: toTalentPercent(skillParam_gen.skill[s++]),\r\n    slashing: toTalentPercent(skillParam_gen.skill[s++]),\r\n    thunderclasp_slash: toTalentPercent(skillParam_gen.skill[s++]),\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    skill: toTalentPercent(skillParam_gen.burst[b++]),\r\n    consec_slash: toTalentPercent(skillParam_gen.burst[b++]),\r\n    last: toTalentPercent(skillParam_gen.burst[b++]),\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  constellation1: {\r\n    dmg: singleToTalentPercent(skillParam_gen.constellation1[0]),\r\n  },\r\n  constellation4: {\r\n    duration: skillParam_gen.constellation4[0],\r\n    atk_: singleToTalentPercent(skillParam_gen.constellation4[1]),\r\n  },\r\n  constellation6: {\r\n    electro_: singleToTalentPercent(skillParam_gen.constellation6[0]),\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    hit1: stats => basicDMGFormula(data.charged.hit1[stats.tlvl.auto], stats, \"charged\"),\r\n    hit2: stats => basicDMGFormula(data.charged.hit2[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    stilleto: stats => basicDMGFormula(data.skill.stilleto[stats.tlvl.skill], stats, \"skill\"),\r\n    slashing: stats => basicDMGFormula(data.skill.slashing[stats.tlvl.skill], stats, \"skill\"),\r\n    thunderclap_slashing: stats => basicDMGFormula(data.skill.thunderclasp_slash[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    skill: stats => basicDMGFormula(data.burst.skill[stats.tlvl.burst], stats, \"burst\"),\r\n    consec_slash: stats => basicDMGFormula(data.burst.consec_slash[stats.tlvl.burst], stats, \"burst\"),\r\n    last: stats => basicDMGFormula(data.burst.last[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    dmg: stats => basicDMGFormula(data.constellation1.dmg, stats, \"elemental\"),\r\n  }\r\n} as const\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [72.16, 77.57, 82.98, 90.2, 95.61, 101.02, 108.24, 115.46, 122.67, 129.89, 137.39, 147.21, 157.02, 166.83, 176.65],\r\n      [62.4, 67.08, 71.76, 78, 82.68, 87.36, 93.6, 99.84, 106.08, 112.32, 118.81, 127.3, 135.78, 144.27, 152.76],\r\n      [89.92, 96.66, 103.41, 112.4, 119.14, 125.89, 134.88, 143.87, 152.86, 161.86, 171.21, 183.44, 195.67, 207.9, 220.12]\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: [157.36, 169.16, 180.96, 196.7, 208.5, 220.3, 236.04, 251.78, 267.51, 283.25, 299.61, 321.01, 342.42, 363.82, 385.22],\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59]\r\n  },\r\n  skill: {\r\n    jumpyDmg: [95.2, 102.34, 109.48, 119, 126.14, 133.28, 142.8, 152.32, 161.84, 171.36, 180.88, 190.4, 202.3, 214.2, 226.1],\r\n    mineDmg: [32.8, 35.26, 37.72, 41, 43.46, 45.92, 49.2, 52.48, 55.76, 59.04, 62.32, 65.6, 69.7, 73.8, 77.9],\r\n  },\r\n  burst: {\r\n    dmg: [42.64, 45.84, 49.04, 53.3, 56.5, 59.7, 63.96, 68.22, 72.49, 76.75, 81.02, 85.28, 90.61, 95.94, 101.27],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    dmg: stats => basicDMGFormula(data.charged.dmg[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: {\r\n    dmg: stats => basicDMGFormula(data.plunging.dmg[stats.tlvl.auto], stats, \"plunging\"),\r\n    low: stats => basicDMGFormula(data.plunging.low[stats.tlvl.auto], stats, \"plunging\"),\r\n    high: stats => basicDMGFormula(data.plunging.high[stats.tlvl.auto], stats, \"plunging\"),\r\n  },\r\n  skill: {\r\n    jumpyDmg: stats => basicDMGFormula(data.skill.jumpyDmg[stats.tlvl.skill], stats, \"skill\"),\r\n    mineDmg: stats => basicDMGFormula(data.skill.mineDmg[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst] * 1.2, stats, \"burst\"),\r\n  },\r\n  constellation4: {\r\n    dmg: stats => basicDMGFormula(555, stats, \"elemental\"),\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { toTalentPercent } from \"../../../Util/DataminedUtil\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\nimport skillParam_gen_pre from './skillParam_gen.json'\r\nconst skillParam_gen = skillParam_gen_pre as any\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      toTalentPercent(skillParam_gen.auto[0]),//x2\r\n      toTalentPercent(skillParam_gen.auto[1]),\r\n      toTalentPercent(skillParam_gen.auto[2]),\r\n      toTalentPercent(skillParam_gen.auto[3]),//x2\r\n      toTalentPercent(skillParam_gen.auto[4]),\r\n    ]\r\n  },\r\n  charged: {\r\n    hit: toTalentPercent(skillParam_gen.auto[5]),\r\n    full: toTalentPercent(skillParam_gen.auto[6]),\r\n  },\r\n  plunging: {\r\n    dmg: toTalentPercent(skillParam_gen.auto[7]),\r\n    low: toTalentPercent(skillParam_gen.auto[8]),\r\n    high: toTalentPercent(skillParam_gen.auto[9]),\r\n  },\r\n  skill: {\r\n    dmg: toTalentPercent(skillParam_gen.skill[0]),\r\n    atkRatio: toTalentPercent(skillParam_gen.skill[1]),\r\n    duration: skillParam_gen.skill[2][0],\r\n    cd: skillParam_gen.skill[3][0]\r\n  },\r\n  burst: {\r\n    dmg: toTalentPercent(skillParam_gen.burst[0]),\r\n    cluster: toTalentPercent(skillParam_gen.burst[1]),\r\n    cd: skillParam_gen.burst[2][0],\r\n    cost: skillParam_gen.burst[3][0],\r\n  }\r\n} as const\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\", name === \"hit\" ? undefined : \"electro\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    atkBonus: stats => {\r\n      const percent = (data.skill.atkRatio[stats.tlvl.skill]) / 100\r\n      return [s => percent * s.baseATK, [\"baseATK\"]]\r\n    }\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    cluster: stats => basicDMGFormula(data.burst.cluster[stats.tlvl.burst], stats, \"burst\")\r\n  },\r\n  c2: {\r\n    dmg: stats => basicDMGFormula(0.3 * data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n  }\r\n} as const\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [39.6, 42.57, 45.54, 49.5, 52.47, 55.44, 59.4, 63.36, 67.32, 71.28, 75.4, 80.78, 86.17, 91.56, 96.94],\r\n      [35.92, 38.61, 41.31, 44.9, 47.59, 50.29, 53.88, 57.47, 61.06, 64.66, 68.39, 73.28, 78.16, 83.05, 87.93],\r\n      [42.8, 46.01, 49.22, 53.5, 56.71, 59.92, 64.2, 68.48, 72.76, 77.04, 81.49, 87.31, 93.13, 98.95, 104.77],\r\n      [54.96, 59.08, 63.2, 68.7, 72.82, 76.94, 82.44, 87.94, 93.43, 98.93, 104.64, 112.12, 119.59, 127.07, 134.54],\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: [177.12, 190.4, 203.69, 221.4, 234.68, 247.97, 265.68, 283.39, 301.1, 318.82, 337.24, 361.32, 385.41, 409.5, 433.59],\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59],\r\n  },\r\n  skill: {\r\n    dmg: [80, 86, 92, 100, 106, 112, 120, 128, 136, 144, 152, 160, 170, 180, 190],\r\n    stack0: [320, 344, 368, 400, 424, 448, 480, 512, 544, 576, 608, 640, 680, 720, 760],\r\n    stack1: [368, 395.6, 423.2, 460, 487.6, 515.2, 552, 588.8, 625.6, 662.4, 699.2, 736, 782, 828, 874],\r\n    stack2: [424, 455.8, 487.6, 530, 561.8, 593.6, 636, 678.4, 720.8, 763.2, 805.6, 848, 901, 954, 1007],\r\n    stack3: [487.2, 523.74, 560.28, 609, 645.54, 682.08, 730.8, 779.52, 828.24, 876.96, 925.68, 974.4, 1035.3, 1096.2, 1157.1],\r\n\r\n  },\r\n  burst: {\r\n    summon: [9.14, 9.825, 10.51, 11.425, 12.11, 12.795, 13.71, 14.625, 15.5375, 16.4525, 17.365, 18.28, 19.4225, 20.565, 21.7075],//not shown in game nor honey, just dmg/4\r\n    dmg: [36.56, 39.3, 42.04, 45.7, 48.44, 51.18, 54.84, 58.5, 62.15, 65.81, 69.46, 73.12, 77.69, 82.26, 86.83],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries(Object.entries(data.skill).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")])),\r\n  burst: Object.fromEntries(Object.entries(data.burst).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.burst], stats, \"burst\")])),\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [37.6, 40.42, 43.24, 47, 49.82, 52.64, 56.4, 60.16, 63.92, 67.68, 71.44, 75.2, 79.9, 84.6, 89.3],\r\n      [36, 38.7, 41.4, 45, 47.7, 50.4, 54, 57.6, 61.2, 64.8, 68.4, 72, 76.5, 81, 85.5],\r\n      [44.8, 48.16, 51.52, 56, 59.36, 62.72, 67.2, 71.68, 76.16, 80.64, 85.12, 89.6, 95.2, 100.8, 106.4],\r\n      [56.16, 60.37, 64.58, 70.2, 74.41, 78.62, 84.24, 89.86, 95.47, 101.09, 106.7, 112.32, 119.34, 126.36, 133.38],\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: [149.72, 160.95, 172.18, 187.15, 198.38, 209.61, 224.58, 239.55, 254.52, 269.5, 285.07, 305.43, 325.79, 346.15, 366.51],\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59],\r\n  },\r\n  skill: {\r\n    dmg: [132.8, 142.76, 152.72, 166, 175.96, 185.92, 199.2, 212.48, 225.76, 239.04, 252.32, 265.6, 282.2, 298.8, 315.4],\r\n    dot: [32, 34.4, 36.8, 40, 42.4, 44.8, 48, 51.2, 54.4, 57.6, 60.8, 64, 68, 72, 76],\r\n  },\r\n  burst: {\r\n    bubble_explosion: [442.4, 475.58, 508.76, 553, 586.18, 619.36, 663.6, 707.84, 752.08, 796.32, 840.56, 884.8, 940.1, 995.4, 1050.7],\r\n    dmg_: [42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 60, 60, 60, 60, 60],\r\n    omen_duration: [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 5, 5, 5, 5, 5, 5]\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries(Object.entries(data.skill).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")])),\r\n  burst: {\r\n    bubble_explosion: stats => basicDMGFormula(data.burst.bubble_explosion[stats.tlvl.burst], stats, \"burst\")\r\n  },\r\n  passive1: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill] / 2, stats, \"skill\"),\r\n  },\r\n  passive2: {\r\n    bonus: stats => [s => (s.premod?.enerRech_ ?? s.enerRech_) * 0.2, [\"enerRech_\"]]\r\n  }\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hit: [28, 30.1, 32.2, 35, 37.1, 39.2, 42, 44.8, 47.6, 50.4, 53.31, 57.12, 60.93, 64.74, 68.54]\r\n  },\r\n  charged: {\r\n    dmg: [174.08, 187.14, 200.19, 217.6, 230.66, 243.71, 261.12, 278.53, 295.94, 313.34, 331.45, 355.12, 378.8, 402.47, 426.15],\r\n    jade: [49.6, 53.32, 57.04, 62, 65.72, 69.44, 74.4, 79.36, 84.32, 89.28, 94.44, 101.18, 107.93, 114.68, 121.42],\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59]\r\n  },\r\n  skill: {\r\n    inheri_hp: [50.1, 53.1, 56.1, 60, 63, 66, 69.9, 73.8, 77.7, 81.6, 85.5, 89.4, 93.3, 97.2, 101.1],\r\n    dmg: [230.4, 247.68, 264.96, 288, 305.28, 322.56, 345.6, 368.64, 391.68, 414.72, 437.76, 460.8, 489.6, 518.4, 547.2],\r\n  },\r\n  burst: {\r\n    dmg_per_gem: [86.96, 93.48, 100, 108.7, 115.22, 121.74, 130.44, 139.14, 147.83, 156.53, 165.22, 173.92, 184.79, 195.66, 206.53],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: {\r\n    hit: stats => basicDMGFormula(data.normal.hit[stats.tlvl.auto], stats, \"normal\")\r\n  },\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    inheri_hp: stats => {\r\n      const val = data.skill.inheri_hp[stats.tlvl.skill] / 100\r\n      return [s => val * s.finalHP, [\"finalHP\"]]\r\n    },\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg_per_gem: stats => basicDMGFormula(data.burst.dmg_per_gem[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n}\r\nexport default formula","import { getTalentStatKey } from \"../../../Build/Build\"\r\nimport { IFormulaSheet } from \"../../../Types/character\"\r\nimport { toTalentInt, toTalentPercent } from \"../../../Util/DataminedUtil\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\nimport skillParam_gen_pre from './skillParam_gen.json'\r\nconst skillParam_gen = skillParam_gen_pre as any\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n    ]\r\n  },\r\n  charged: {\r\n    spinning: toTalentPercent(skillParam_gen.auto[a++]),\r\n    final: toTalentPercent(skillParam_gen.auto[a++]),\r\n    stam: skillParam_gen.auto[a++][0],\r\n    maxDuration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: toTalentPercent(skillParam_gen.auto[a++]),\r\n    low: toTalentPercent(skillParam_gen.auto[a++]),\r\n    high: toTalentPercent(skillParam_gen.auto[a++]),\r\n  },\r\n  skill: {\r\n    shield_def_: toTalentPercent(skillParam_gen.skill[s++]),\r\n    heal_def_: toTalentPercent(skillParam_gen.skill[s++]),\r\n    heal_trigger: toTalentPercent(skillParam_gen.skill[s++]),\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    skill_dmg: toTalentPercent(skillParam_gen.skill[s++]),\r\n    shield_flat: toTalentInt(skillParam_gen.skill[s++]),\r\n    heal_flat: toTalentInt(skillParam_gen.skill[s++]),\r\n  },\r\n  burst: {\r\n    burst_dmg: toTalentPercent(skillParam_gen.burst[b++]),\r\n    skill_dmg: toTalentPercent(skillParam_gen.burst[b++]),\r\n    bonus: toTalentPercent(skillParam_gen.burst[b++]),\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    trigger_chance: skillParam_gen.passive1[p1++][0],\r\n    dmg_def_: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n    cd: skillParam_gen.passive1[p1++][0],\r\n  }\r\n} as const\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    spinning: stats => basicDMGFormula(data.charged.spinning[stats.tlvl.auto], stats, \"charged\"),\r\n    final: stats => basicDMGFormula(data.charged.final[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    skill_dmg: stats => {\r\n      const percent = data.skill.skill_dmg[stats.tlvl.skill] / 100, key = getTalentStatKey(\"skill\", stats) + \"_multi\"\r\n      return [s => percent * s[key] * s.finalDEF, [key, \"finalDEF\"]]\r\n    },\r\n    shield: stats => {\r\n      const percent = data.skill.shield_def_[stats.tlvl.skill] / 100, flat = data.skill.shield_flat[stats.tlvl.skill]\r\n      return [s => (percent * s.finalDEF + flat) * (1 + s.shield_ / 100) * 1.5, [\"finalDEF\", \"shield_\"]]\r\n    },\r\n    heal: stats => {\r\n      const percent = data.skill.heal_def_[stats.tlvl.skill] / 100, flat = data.skill.heal_flat[stats.tlvl.skill]\r\n      return [s => (percent * s.finalDEF + flat) * s.heal_multi, [\"finalDEF\", \"heal_multi\"]]\r\n    },\r\n  },\r\n  burst: {\r\n    burst_dmg: stats => basicDMGFormula(data.burst.burst_dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    skill_dmg: stats => basicDMGFormula(data.burst.skill_dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    bonus: stats => {\r\n      const val = (data.burst.bonus[stats.tlvl.burst] + (stats.constellation >= 6 ? 50 : 0)) / 100\r\n      return [s => val * (s.premod?.finalDEF ?? s.finalDEF), [\"finalDEF\"]]\r\n    }\r\n  },\r\n  passive1: {\r\n    hp: stats => [s => data.passive1.dmg_def_ * s.finalDEF * (1 + s.shield_ / 100) * 1.5, [\"finalDEF\", \"shield_\"]],\r\n  },\r\n  constellation4: {\r\n    dmg: stats => basicDMGFormula(400, stats, \"elemental\"),\r\n  },\r\n} as const\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [37.75, 40.83, 43.9, 48.29, 51.36, 54.88, 59.7, 64.53, 69.36, 74.63, 79.9, 85.17, 90.43, 95.7, 100.97],//1\r\n      [38.87, 42.04, 45.2, 49.72, 52.88, 56.5, 61.47, 66.44, 71.42, 76.84, 82.26, 87.69, 93.11, 98.54, 103.96],//2\r\n      [24.17, 26.13, 28.1, 30.91, 32.88, 35.13, 38.22, 41.31, 44.4, 47.77, 51.14, 54.51, 57.89, 61.26, 64.63],//3 x2\r\n      [24.68, 26.69, 28.7, 31.57, 33.58, 35.88, 39.03, 42.19, 45.35, 48.79, 52.23, 55.68, 59.12, 62.57, 66.01],//4 x2\r\n      [63.04, 68.17, 73.3, 80.63, 85.76, 91.63, 99.69, 107.75, 115.81, 124.61, 133.41, 142.2, 151, 159.79, 168.59],//5\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: [64.33, 69.56, 74.8, 82.28, 87.52, 93.5, 101.73, 109.96, 118.18, 127.16, 136.14, 145.11, 154.09, 163.06, 172.0],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04],\r\n  },\r\n\r\n  skill: {\r\n    hit: [96, 103.2, 110.4, 120, 127.2, 134.4, 144, 153.6, 163.2, 172.8, 182.4, 192, 204, 216, 228],\r\n    herald: [36, 38.7, 41.4, 45, 47.7, 50.4, 54, 57.6, 61.2, 64.8, 68.4, 72, 76.5, 81, 85.5],\r\n    hitregen: {\r\n      base: [67, 74, 81, 89, 98, 107, 116, 126, 137, 148, 160, 172, 185, 199, 213],\r\n      atk: [10.56, 11.35, 12.14, 13.2, 13.99, 14.78, 15.84, 16.9, 17.95, 19.01, 20.06, 21.12, 22.44, 23.76, 25.08],\r\n    },\r\n    continuousregen: {\r\n      base: [451, 496, 544, 597, 653, 713, 777, 845, 916, 991, 1070, 1153, 1239, 1329, 1423],\r\n      atk: [69.6, 74.82, 80.04, 87, 92.22, 97.44, 104.4, 111.36, 118.32, 125.28, 132.24, 139.2, 147.9, 156.6, 165.3],\r\n    },\r\n  },\r\n  burst: {\r\n    dmg: [284.8, 306.16, 327.52, 356, 377.36, 398.72, 427.2, 455.68, 484.16, 512.64, 541.12, 569.6, 605.2, 640.8, 676.4],\r\n    healing: {\r\n      base: [577, 635, 698, 765, 837, 914, 996, 1083, 1174, 1270, 1371, 1477, 1588, 1703, 1824],\r\n      atk: [90, 96.75, 103.5, 112.5, 119.25, 126, 135, 144, 153, 162, 171, 180, 191.25, 202.5, 213.75],\r\n    }\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto] * (i === 2 || i === 3 ? 2 : 1), stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    hit: stats => basicDMGFormula(data.skill.hit[stats.tlvl.skill], stats, \"skill\"),\r\n    herald: stats => basicDMGFormula(data.skill.herald[stats.tlvl.skill], stats, \"skill\"),\r\n    hitregen: stats => {\r\n      const base = data.skill.hitregen.base[stats.tlvl.skill];\r\n      const atk = data.skill.hitregen.atk[stats.tlvl.skill] / 100;\r\n      return [s => (atk * s.finalATK + base) * s.heal_multi, [\"finalATK\", \"heal_multi\"]]\r\n    },\r\n    continuousregen: stats => {\r\n      const base = data.skill.continuousregen.base[stats.tlvl.skill];\r\n      const atk = data.skill.continuousregen.atk[stats.tlvl.skill] / 100;\r\n      return [s => (atk * s.finalATK + base) * s.heal_multi, [\"finalATK\", \"heal_multi\"]]\r\n    },\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    healing: stats => {\r\n      const base = data.burst.healing.base[stats.tlvl.burst];\r\n      const atk = data.burst.healing.atk[stats.tlvl.burst] / 100;\r\n      return [s => (atk * s.finalATK + base) * s.heal_multi, [\"finalATK\", \"heal_multi\"]]\r\n    },\r\n  },\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { getTalentStatKey } from \"../../../Build/Build\"\r\nimport { FormulaItem, IFormulaSheet } from \"../../../Types/character\"\r\nimport { BasicStats } from \"../../../Types/stats\"\r\nimport { toTalentPercent } from \"../../../Util/DataminedUtil\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\nimport skillParam_gen_pre from './skillParam_gen.json'\r\nconst skillParam_gen = skillParam_gen_pre as any\r\nexport const energyCosts = [40, 50, 60, 70, 80, 90] as const\r\nexport const resolveStacks = [10, 20, 30, 40, 50, 60] as const\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      toTalentPercent(skillParam_gen.auto[0]),\r\n      toTalentPercent(skillParam_gen.auto[1]),\r\n      toTalentPercent(skillParam_gen.auto[2]),\r\n      toTalentPercent(skillParam_gen.auto[3]),//x2\r\n      toTalentPercent(skillParam_gen.auto[5]),\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: toTalentPercent(skillParam_gen.auto[6]),\r\n    stam: skillParam_gen.auto[7][0]\r\n  },\r\n  plunging: {\r\n    dmg: toTalentPercent(skillParam_gen.auto[8]),\r\n    low: toTalentPercent(skillParam_gen.auto[9]),\r\n    high: toTalentPercent(skillParam_gen.auto[10]),\r\n  },\r\n  skill: {\r\n    skillDMG: toTalentPercent(skillParam_gen.skill[0]),\r\n    coorDMG: toTalentPercent(skillParam_gen.skill[1]),\r\n    duration: skillParam_gen.skill[2][0],\r\n    eleBurConv: toTalentPercent(skillParam_gen.skill[3]),\r\n    cd: skillParam_gen.skill[4][0],\r\n  },\r\n  burst: {\r\n    dmg: toTalentPercent(skillParam_gen.burst[0]),\r\n    resolve: toTalentPercent(skillParam_gen.burst[1]),\r\n    resolve_: toTalentPercent(skillParam_gen.burst[2]),\r\n    resGain: toTalentPercent(skillParam_gen.burst[3]),\r\n    hit1: toTalentPercent(skillParam_gen.burst[4]),\r\n    hit2: toTalentPercent(skillParam_gen.burst[5]),\r\n    hit3: toTalentPercent(skillParam_gen.burst[6]),\r\n    hit41: toTalentPercent(skillParam_gen.burst[7]),\r\n    hit42: toTalentPercent(skillParam_gen.burst[8]),\r\n    hit5: toTalentPercent(skillParam_gen.burst[9]),\r\n    charged1: toTalentPercent(skillParam_gen.burst[10]),\r\n    charged2: toTalentPercent(skillParam_gen.burst[11]),\r\n    stam: skillParam_gen.burst[12][0],\r\n    plunge: toTalentPercent(skillParam_gen.burst[13]),\r\n    plungeLow: toTalentPercent(skillParam_gen.burst[14]),\r\n    plungeHigh: toTalentPercent(skillParam_gen.burst[15]),\r\n    enerGen: skillParam_gen.burst[16],\r\n    duration: skillParam_gen.burst[17][0],\r\n    cd: skillParam_gen.burst[18][0],\r\n    enerCost: skillParam_gen.burst[19][0],\r\n  }\r\n} as const\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    dmg: stats => basicDMGFormula(data.charged.dmg[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    skillDMG: stats => skillDMG(data.skill.skillDMG[stats.tlvl.skill], stats),\r\n    coorDMG: stats => skillDMG(data.skill.coorDMG[stats.tlvl.skill], stats),\r\n    eleBurConv: stats => {\r\n      const val = data.skill.eleBurConv[stats.tlvl.skill]\r\n      const enerCost = data.burst.enerCost\r\n      return [s => val * enerCost, []]\r\n    },\r\n    ...Object.fromEntries(energyCosts.map(c => [c, stats => {\r\n      const val = data.skill.eleBurConv[stats.tlvl.skill]\r\n      return [s => val * c, []]\r\n    }]))\r\n  },\r\n  burst: {\r\n    dmg: stats => burstDMG(data.burst.dmg[stats.tlvl.burst], stats, true),\r\n    hit1: stats => burstDMG(data.burst.hit1[stats.tlvl.burst], stats),\r\n    hit2: stats => burstDMG(data.burst.hit2[stats.tlvl.burst], stats),\r\n    hit3: stats => burstDMG(data.burst.hit3[stats.tlvl.burst], stats),\r\n    hit41: stats => burstDMG(data.burst.hit41[stats.tlvl.burst], stats),\r\n    hit42: stats => burstDMG(data.burst.hit42[stats.tlvl.burst], stats),\r\n    hit5: stats => burstDMG(data.burst.hit5[stats.tlvl.burst], stats),\r\n    charged1: stats => burstDMG(data.burst.charged1[stats.tlvl.burst], stats),\r\n    charged2: stats => burstDMG(data.burst.charged2[stats.tlvl.burst], stats),\r\n    plunge: stats => burstDMG(data.burst.plunge[stats.tlvl.burst], stats),\r\n    plungeLow: stats => burstDMG(data.burst.plungeLow[stats.tlvl.burst], stats),\r\n    plungeHigh: stats => burstDMG(data.burst.plungeHigh[stats.tlvl.burst], stats),\r\n  },\r\n  a4: {\r\n    eleDMG: stats => {\r\n      return [s => ((s.premod?.enerRech_ ?? s.enerRech_) - 100) * 0.4, [\"enerRech_\"]]\r\n    }\r\n  }\r\n} as const\r\n\r\nfunction enemyLevelMultiC2(s) {\r\n  return (100 + s.characterLevel) / (100 + s.characterLevel + (100 + s.enemyLevel) * (Math.max((1 - s.enemyDEFRed_ / 100) * 0.4, 0.1)))\r\n}\r\nfunction burstDMG(percent: number, stats: BasicStats, intial = false): FormulaItem {\r\n  const resolveStack = getResolve(stats)\r\n  const resolve = resolveStack ? ((intial ? data.burst.resolve[stats.tlvl.burst] : data.burst.resolve_[stats.tlvl.burst]) * resolveStack) / 100 : 0\r\n  const multi = percent / 100 + resolve\r\n\r\n  if (stats.constellation < 2) {\r\n    const statKey = getTalentStatKey(\"burst\", stats)\r\n    return [s => multi * s[statKey], [statKey]]\r\n  }\r\n  const hitModeMultiKey = stats.hitMode === \"avgHit\" ? \"burst_avgHit_base_multi\" : stats.hitMode === \"critHit\" ? \"critHit_base_multi\" : \"\"\r\n  return [s =>\r\n    multi * s.finalATK * (hitModeMultiKey ? s[hitModeMultiKey] : 1) * s.electro_burst_hit_base_multi * enemyLevelMultiC2(s) * s.electro_enemyRes_multi\r\n    , [\"finalATK\", ...(hitModeMultiKey ? [hitModeMultiKey] : []), \"electro_burst_hit_base_multi\", \"characterLevel\", \"enemyLevel\", \"enemyDEFRed_\", \"electro_enemyRes_multi\"]]\r\n}\r\nfunction skillDMG(percent: number, stats: BasicStats): FormulaItem {\r\n  const multi = percent / 100\r\n  if (stats.constellation < 2)\r\n    return basicDMGFormula(percent, stats, \"skill\")\r\n\r\n  const hitModeMultiKey = stats.hitMode === \"avgHit\" ? \"skill_avgHit_base_multi\" : stats.hitMode === \"critHit\" ? \"critHit_base_multi\" : \"\"\r\n  return [s =>\r\n    multi * s.finalATK * (hitModeMultiKey ? s[hitModeMultiKey] : 1) * s.electro_skill_hit_base_multi * enemyLevelMultiC2(s) * s.electro_enemyRes_multi\r\n    , [\"finalATK\", ...(hitModeMultiKey ? [hitModeMultiKey] : []), \"electro_skill_hit_base_multi\", \"characterLevel\", \"enemyLevel\", \"enemyDEFRed_\", \"electro_enemyRes_multi\"]]\r\n}\r\nexport function getResolve(stats: BasicStats) {\r\n  const [num, condEleKey] = stats.conditionalValues?.character?.RaidenShogun?.q ?? []\r\n  if (num && condEleKey) return parseInt(condEleKey)\r\n  return 0\r\n}\r\nexport default formula","import { getTalentStatKey } from \"../../../Build/Build\"\r\nimport { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [95.92, 102.46, 109, 117.72, 124.26, 131.89, 141.7, 151.51, 161.32, 171.13, 180.94, 190.75, 200.56, 210.37, 220.18],\r\n      [82.63, 88.27, 93.9, 101.41, 107.05, 113.62, 122.07, 130.52, 138.97, 147.42, 155.87, 164.33, 172.78, 181.23, 189.68],\r\n      [103.31, 110.36, 117.4, 126.79, 133.84, 142.05, 152.62, 163.19, 173.75, 184.32, 194.88, 205.45, 216.02, 226.58, 237.15],\r\n      [136.05, 145.32, 154.6, 166.97, 176.24, 187.07, 200.98, 214.89, 228.81, 242.72, 256.64, 270.55, 284.46, 298.38, 312.29],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinning: [62.54, 67.63, 72.72, 79.99, 85.08, 90.9, 98.9, 106.9, 114.9, 123.62, 132.35, 141.08, 149.8, 158.53, 167.26],\r\n    final: [113.09, 122.3, 131.5, 144.65, 153.86, 164.38, 178.84, 193.31, 207.77, 223.55, 239.33, 255.11, 270.89, 286.67, 302.45]\r\n  },\r\n  plunging: {\r\n    dmg: [82.05, 88.72, 95.4, 104.94, 111.62, 119.25, 129.75, 140.24, 150.74, 162.19, 173.63, 185.08, 196.53, 207.98, 219.43],\r\n    low: [164.06, 177.41, 190.77, 209.84, 223.2, 238.46, 259.44, 280.43, 301.41, 324.3, 347.19, 370.09, 392.98, 415.87, 438.76],\r\n    high: [204.92, 221.6, 238.28, 262.1, 278.78, 297.85, 324.06, 350.27, 376.48, 405.07, 433.66, 462.26, 490.85, 519.44, 548.04]\r\n  },\r\n  skill: {\r\n    press: [199.2, 214.14, 229.08, 249, 263.94, 278.88, 298.8, 318.72, 338.64, 358.56, 378.48, 398.4, 423.3, 448.2, 473.1],\r\n    hold: [295.2, 317.34, 339.48, 369, 391.14, 413.28, 442.8, 472.32, 501.84, 531.36, 560.88, 590.4, 627.3, 664.2, 701.1],\r\n  },\r\n  burst: {\r\n    summon: [160, 172, 184, 200, 212, 224, 240, 256, 272, 288, 304, 320, 340, 360, 380],\r\n    dmg: [24, 25.8, 27.6, 30, 31.8, 33.6, 36, 38.4, 40.8, 43.2, 45.6, 48, 51, 54, 57],\r\n    atkspd: [26, 28, 30, 32, 34, 36, 37, 38, 39, 40, 40, 40, 40, 40, 40],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    press: stats => basicDMGFormula(data.skill.press[stats.tlvl.skill], stats, \"skill\"),\r\n    hold: stats => basicDMGFormula(data.skill.hold[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    summon: stats => basicDMGFormula(data.burst.summon[stats.tlvl.burst], stats, \"burst\"),\r\n    ...Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n      basicDMGFormula(data.burst.dmg[stats.tlvl.burst] * percentArr[stats.tlvl.auto] / 100, stats, \"burst\")])),\r\n    ...Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [`c${i}`, stats => {\r\n      const normVal = percentArr[stats.tlvl.auto] /100\r\n      const normStatKey = getTalentStatKey(\"normal\", stats)\r\n\r\n      const burstVal = data.burst.dmg[stats.tlvl.burst] * percentArr[stats.tlvl.auto] / 10000\r\n      const burstStatKey = getTalentStatKey(\"burst\", stats)\r\n      return [s => normVal * s[normStatKey] + burstVal * s[burstStatKey], [normStatKey, burstStatKey]]\r\n    }])),\r\n  },\r\n  constellation6: {\r\n    dmg: stats => basicDMGFormula(100, stats, \"elemental\"),\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}\r\n","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [52.46, 56.73, 61, 67.1, 71.37, 76.25, 82.96, 89.67, 96.38, 103.7, 111.02, 118.34, 125.66, 132.98, 140.3],//1\r\n      [51.6, 55.8, 60, 66, 70.2, 75, 81.6, 88.2, 94.8, 102, 109.2, 116.4, 123.6, 130.8, 138],//2\r\n      [31.82, 34.41, 37, 40.7, 43.29, 46.25, 50.32, 54.39, 58.46, 62.9, 67.34, 71.78, 76.22, 80.66, 85.1],//3 x2\r\n      [69.66, 75.33, 81, 89.1, 94.77, 101.25, 110.16, 119.07, 127.98, 137.7, 147.42, 157.14, 166.86, 176.58, 186.3],//4\r\n      [41.62, 45.01, 48.4, 53.24, 56.63, 60.5, 65.82, 71.15, 76.47, 82.28, 88.09, 93.9, 99.7, 105.51, 111.32],//5.1\r\n      [43, 46.5, 50, 55, 58.5, 62.5, 68, 73.5, 79, 85, 91, 97, 103, 109, 115]//5.2\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: [136.74, 147.87, 159, 174.9, 186.03, 198.75, 216.24, 233.73, 251.22, 270.3, 289.38, 308.46, 327.54, 346.62, 365.7],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04],\r\n  },\r\n  skill: {\r\n    hit1: [58.4, 62.78, 67.16, 73, 77.38, 81.76, 87.6, 93.44, 99.28, 105.12, 110.96, 116.8, 124.1, 131.4, 138.7],\r\n    hit2: [136, 146.2, 156.4, 170, 180.2, 190.4, 204, 217.6, 231.2, 244.8, 258.4, 272, 289, 306, 323]\r\n  },\r\n  burst: {\r\n    hit1: [104, 111.8, 119.6, 130, 137.8, 145.6, 156, 166.4, 176.8, 187.2, 197.6, 208, 221, 234, 247],\r\n    hit2: [152, 163.4, 174.8, 190, 201.4, 212.8, 228, 243.2, 258.4, 273.6, 288.8, 304, 323, 342, 361],\r\n    dot: [132, 141.9, 151.8, 165, 174.9, 184.8, 198, 211.2, 224.4, 237.6, 250.8, 264, 280.5, 297, 313.5],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula((arr[stats.tlvl.auto]), stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries(Object.entries(data.skill).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")])),\r\n  burst: Object.fromEntries(Object.entries(data.burst).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.burst], stats, \"burst\")])),\r\n  passive2: {\r\n    critConv: stats => [s => (s.premod?.critRate_ ?? s.critRate_) * 0.15, [\"critRate_\"]]\r\n  }\r\n} as const\r\nexport default formula","import { getTalentStatKey } from \"../../../Build/Build\"\r\nimport { FormulaItem, IFormulaSheet } from \"../../../Types/character\"\r\nimport { BasicStats } from \"../../../Types/stats\"\r\nimport { singleToTalentPercent, toTalentInt, toTalentPercent } from \"../../../Util/DataminedUtil\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\nimport skillParam_gen_pre from './skillParam_gen.json'\r\nconst skillParam_gen = skillParam_gen_pre as any\r\nlet a = 0, s = 0, b = 0, c6 = 0\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: toTalentPercent(skillParam_gen.auto[a++]),\r\n    stam: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: toTalentPercent(skillParam_gen.auto[a++]),\r\n    low: toTalentPercent(skillParam_gen.auto[a++]),\r\n    high: toTalentPercent(skillParam_gen.auto[a++]),\r\n  },\r\n  skill: {\r\n    heal_: toTalentPercent(skillParam_gen.skill[s++]),\r\n    heal: toTalentInt(skillParam_gen.skill[s++]),\r\n    dmg: toTalentPercent(skillParam_gen.skill[s++]),\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: toTalentPercent(skillParam_gen.burst[b++]),\r\n    heal_: toTalentPercent(skillParam_gen.burst[b++]),\r\n    heal: toTalentInt(skillParam_gen.burst[b++]),\r\n    nBonus: toTalentPercent(skillParam_gen.burst[b++]),\r\n    cBonus: toTalentPercent(skillParam_gen.burst[b++]),\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n    sBonus: toTalentPercent(skillParam_gen.burst[b++]),\r\n  },\r\n  p2: {\r\n    heal_ratio: singleToTalentPercent(skillParam_gen.passive2[0][0]),\r\n  },\r\n  c1: {\r\n    hp_: singleToTalentPercent(skillParam_gen.constellation1[0]),\r\n  },\r\n  c2: {\r\n    s_heal_: singleToTalentPercent(skillParam_gen.constellation2[1]),\r\n    nc_heal_: singleToTalentPercent(skillParam_gen.constellation2[2]),\r\n  },\r\n  c4: {\r\n    atkSPD_: singleToTalentPercent(skillParam_gen.constellation4[0]),\r\n    energy: skillParam_gen.constellation4[1]\r\n  },\r\n  c6: {\r\n    hp_: singleToTalentPercent(skillParam_gen.constellation6[c6++]),\r\n    hydro_: singleToTalentPercent(skillParam_gen.constellation6[c6++]),\r\n    duration: skillParam_gen.constellation6[c6++]\r\n  },\r\n} as const\r\n\r\nfunction hpDMGFormula(percent: number, hpPercent: number, stats: BasicStats, skillKey: string): FormulaItem {\r\n  const val = percent / 100\r\n  const hpMulti = hpPercent / 100\r\n  const hasA4 = stats.ascension >= 4 && [\"normal\", \"charged\"].includes(skillKey)\r\n  const statKey = getTalentStatKey(skillKey, stats) + \"_multi\"\r\n  const heal_ratio = data.p2.heal_ratio / 100\r\n  return [s => (val * s.finalATK + (hpMulti + (hasA4 ? (heal_ratio * s.heal_ / 100) : 0)) * s.finalHP) * s[statKey], [\"finalATK\", \"finalHP\", ...(hasA4 ? [\"heal_\"] : []), statKey]]\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: {\r\n    ...Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n      basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n    ...Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [`${i}HP`, stats =>\r\n      hpDMGFormula(percentArr[stats.tlvl.auto], data.burst.nBonus[stats.tlvl.burst], stats, \"normal\")])),\r\n  },\r\n  charged: {\r\n    dmg: stats => basicDMGFormula(data.charged.dmg[stats.tlvl.auto], stats, \"charged\"),\r\n    dmgHP: stats => hpDMGFormula(data.charged.dmg[stats.tlvl.auto], data.burst.cBonus[stats.tlvl.burst], stats, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    dmgHP: stats => hpDMGFormula(data.charged.dmg[stats.tlvl.skill], data.burst.sBonus[stats.tlvl.burst], stats, \"skill\"),\r\n    regen: stats => {\r\n      const hp = data.skill.heal_[stats.tlvl.skill] / 100\r\n      const flat = data.skill.heal[stats.tlvl.skill]\r\n      return [s => (hp * s.finalHP + flat) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n    },\r\n    regenC2: stats => {\r\n      const hp = (data.skill.heal_[stats.tlvl.skill] + data.c2.s_heal_) / 100\r\n      const flat = data.skill.heal[stats.tlvl.skill]\r\n      return [s => (hp * s.finalHP + flat) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n    },\r\n  },\r\n  burst: {\r\n    dmg: stats => {\r\n      const val = data.burst.dmg[stats.tlvl.burst] / 100\r\n      const statKey = `${getTalentStatKey(\"burst\", stats)}_multi`\r\n      return [s => val * s.finalHP * s[statKey], [\"finalHP\", statKey]]\r\n    },\r\n    regen: stats => {\r\n      const hp = data.burst.heal_[stats.tlvl.burst] / 100\r\n      const flat = data.burst.heal[stats.tlvl.burst]\r\n      return [s => (hp * s.finalHP + flat) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n    },\r\n    regenC2: stats => {\r\n      const hp = (data.burst.heal_[stats.tlvl.burst] + data.c2.nc_heal_) / 100\r\n      const flat = data.burst.heal[stats.tlvl.burst]\r\n      return [s => (hp * s.finalHP + flat) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n    },\r\n  },\r\n  c1: {\r\n    dmg: stats => {\r\n      const val = data.c1.hp_ / 100\r\n      const statKey = getTalentStatKey(\"elemental\", stats) + \"_multi\"\r\n      return [s => val * s.finalHP * s[statKey], [\"finalHP\", statKey]]\r\n    }\r\n  }\r\n} as const\r\nexport default formula","import { getTalentStatKey } from \"../../../Build/Build\"\r\nimport { IFormulaSheet } from \"../../../Types/character\"\r\nimport { toTalentInt, toTalentPercent } from \"../../../Util/DataminedUtil\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\nimport { absorbableEle } from \"../dataUtil\"\r\nimport skillParam_gen_pre from './skillParam_gen.json'\r\nconst skillParam_gen = skillParam_gen_pre as any\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      toTalentPercent(skillParam_gen.auto[0]),\r\n      toTalentPercent(skillParam_gen.auto[1]),\r\n      toTalentPercent(skillParam_gen.auto[2]),//x2\r\n      toTalentPercent(skillParam_gen.auto[4]),\r\n    ]\r\n  },\r\n  charged: {\r\n    spinning: toTalentPercent(skillParam_gen.auto[5]),\r\n    final: toTalentPercent(skillParam_gen.auto[6]),\r\n  },\r\n  plunging: {\r\n    dmg: toTalentPercent(skillParam_gen.auto[9]),\r\n    low: toTalentPercent(skillParam_gen.auto[10]),\r\n    high: toTalentPercent(skillParam_gen.auto[11]),\r\n  },\r\n  skill: {\r\n    dmg: toTalentPercent(skillParam_gen.skill[0]),\r\n    ele_dmg: toTalentPercent(skillParam_gen.skill[1]),\r\n    kick_press: toTalentPercent(skillParam_gen.skill[2]),\r\n    kick_hold: toTalentPercent(skillParam_gen.skill[3]),\r\n    ele_kick: toTalentPercent(skillParam_gen.skill[4]),\r\n  },\r\n  burst: {\r\n    dmg: toTalentPercent(skillParam_gen.burst[0]),\r\n    heal: toTalentInt(skillParam_gen.burst[1]),\r\n    heal_: toTalentPercent(skillParam_gen.burst[2]),\r\n    muji_dmg: toTalentPercent(skillParam_gen.burst[3]),\r\n    muji_heal: toTalentInt(skillParam_gen.burst[4]),\r\n    muji_heal_: toTalentPercent(skillParam_gen.burst[5]),\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    kick_press: stats => {\r\n      const skillPercent = data.skill.kick_press[stats.tlvl.skill]\r\n      if (stats.constellation < 2) return basicDMGFormula(skillPercent, stats, \"skill\")\r\n      const hitModeMultiKey = stats.hitMode === \"avgHit\" ? \"skill_avgHit_base_multi\" : stats.hitMode === \"critHit\" ? \"critHit_base_multi\" : \"\"\r\n      return [s => skillPercent / 100 * s.finalATK * (hitModeMultiKey ? s[hitModeMultiKey] : 1) * (s.anemo_skill_hit_base_multi + 0.033) * s.enemyLevel_multi * s.anemo_enemyRes_multi,\r\n      [\"finalATK\", ...(hitModeMultiKey ? [hitModeMultiKey] : []), \"anemo_skill_hit_base_multi\", \"enemyLevel_multi\", \"anemo_enemyRes_multi\"]]\r\n    },\r\n    kick_hold: stats => {\r\n      const skillPercent = data.skill.kick_hold[stats.tlvl.skill]\r\n      const basic = () => basicDMGFormula(skillPercent, stats, \"skill\")\r\n      if (stats.constellation < 2) return basic()\r\n      const [num] = stats.conditionalValues?.character?.Sayu?.c2 ?? []\r\n      if (!num) return basic()\r\n\r\n      const multi = num * 0.033\r\n      const hitModeMultiKey = stats.hitMode === \"avgHit\" ? \"skill_avgHit_base_multi\" : stats.hitMode === \"critHit\" ? \"critHit_base_multi\" : \"\"\r\n      return [s => skillPercent / 100 * s.finalATK * (hitModeMultiKey ? s[hitModeMultiKey] : 1) * (s.anemo_skill_hit_base_multi + multi) * s.enemyLevel_multi * s.anemo_enemyRes_multi,\r\n      [\"finalATK\", ...(hitModeMultiKey ? [hitModeMultiKey] : []), \"anemo_skill_hit_base_multi\", \"enemyLevel_multi\", \"anemo_enemyRes_multi\"]]\r\n    },\r\n    ...Object.fromEntries([\r\n      ...absorbableEle.map(eleKey => [eleKey, stats => basicDMGFormula(data.skill.ele_dmg[stats.tlvl.skill], stats, \"skill\", eleKey)]),\r\n      ...absorbableEle.map(eleKey => [`${eleKey}_kick`, stats => {\r\n        const skillPercent = data.skill.ele_kick[stats.tlvl.skill]\r\n        const basic = () => basicDMGFormula(data.skill.ele_kick[stats.tlvl.skill], stats, \"skill\", eleKey)\r\n        if (stats.constellation < 2) return basic()\r\n        const [num] = stats.conditionalValues?.character?.Sayu?.c2 ?? []\r\n        if (!num) return basic()\r\n\r\n        const multi = num * 0.033\r\n        const hitModeMultiKey = stats.hitMode === \"avgHit\" ? \"skill_avgHit_base_multi\" : stats.hitMode === \"critHit\" ? \"critHit_base_multi\" : \"\"\r\n        return [s => skillPercent / 100 * s.finalATK * (hitModeMultiKey ? s[hitModeMultiKey] : 1) * (s[`${eleKey}_skill_hit_base_multi`] + multi) * s.enemyLevel_multi * s[`${eleKey}_enemyRes_multi`],\r\n        [\"finalATK\", ...(hitModeMultiKey ? [hitModeMultiKey] : []), `${eleKey}_skill_hit_base_multi`, \"enemyLevel_multi\", `${eleKey}_enemyRes_multi`]]\r\n      }])\r\n    ])\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    heal: stats => {\r\n      const atk = data.burst.heal_[stats.tlvl.burst] / 100\r\n      const flat = data.burst.heal[stats.tlvl.burst]\r\n      return [s => (atk * s.finalATK + flat) * s.heal_multi, [\"finalATK\", \"heal_multi\"]]\r\n    },\r\n    muji_dmg: stats => {\r\n      if (stats.constellation < 6)\r\n        return basicDMGFormula(data.burst.muji_dmg[stats.tlvl.burst], stats, \"burst\")\r\n      else {\r\n        const val = data.burst.muji_dmg[stats.tlvl.burst] / 100\r\n        const statKey = getTalentStatKey(\"burst\", stats)\r\n        return [s => (val + Math.min(4, 0.002 * s.eleMas)) * s[statKey], [statKey, \"eleMas\"]]\r\n      }\r\n    },\r\n    muji_heal: stats => {\r\n      const atk = data.burst.muji_heal_[stats.tlvl.burst] / 100\r\n      const flat = data.burst.muji_heal[stats.tlvl.burst]\r\n      if (stats.constellation < 6) return [s => (atk * s.finalATK + flat) * s.heal_multi, [\"finalATK\", \"heal_multi\"]]\r\n      else return [s => (atk * s.finalATK + flat + Math.min(6000, 3 * s.eleMas)) * s.heal_multi, [\"finalATK\", \"heal_multi\", \"eleMas\"]]\r\n    },\r\n  },\r\n  passive1: {\r\n    heal: stats => [s => (1.2 * s.eleMas + 300) * s.heal_multi, [\"eleMas\", \"heal_multi\"]],\r\n  },\r\n  passive2: {\r\n    heal: stats => {\r\n      const atk = data.burst.muji_heal_[stats.tlvl.burst] / 100\r\n      const flat = data.burst.muji_heal[stats.tlvl.burst]\r\n      return [s => 0.2 * (atk * s.finalATK + flat) * s.heal_multi, [\"finalATK\", \"heal_multi\"]]\r\n    },\r\n  }\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\";\r\nimport { absorbableEle } from \"../dataUtil\";\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [33.46, 35.97, 38.48, 41.83, 44.34, 46.85, 50.2, 53.54, 56.89, 60.24, 63.58, 66.93, 71.11, 75.29, 79.48], // 1\r\n      [30.62, 32.91, 35.21, 38.27, 40.57, 42.86, 45.92, 48.99, 52.05, 55.11, 58.17, 61.23, 65.06, 68.89, 72.71], // 2\r\n      [38.45, 41.33, 44.22, 48.06, 50.94, 53.83, 57.67, 61.52, 65.36, 69.21, 73.05, 76.9, 81.7, 86.51, 91.31], // 3\r\n      [47.92, 51.51, 55.11, 59.9, 63.49, 67.08, 71.88, 76.67, 81.46, 86.25, 91.04, 95.84, 101.82, 107.81, 113.8], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: [120.16, 129.17, 138.18, 150.2, 159.21, 168.22, 180.24, 192.26, 204.27, 216.29, 228.3, 240.32, 255.34, 270.36, 285.38],\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59],\r\n  },\r\n  skill: {\r\n    press: [211.2, 227.04, 242.88, 264, 279.84, 295.68, 316.8, 337.92, 359.04, 380.16, 401.28, 422.4, 448.8, 475.2, 501.6],\r\n  },\r\n  burst: {\r\n    dot: [148, 159.1, 170.2, 185, 196.1, 207.2, 222, 236.8, 251.6, 266.4, 281.2, 296, 314.5, 333, 351.5],\r\n    dmg_: [44, 47.3, 50.6, 55, 58.3, 61.6, 66, 70.4, 74.8, 79.2, 83.6, 88, 93.5, 99, 104.5],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries(Object.entries(data.skill).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")])),\r\n  burst: {\r\n    dot: stats => basicDMGFormula(data.burst.dot[stats.tlvl.burst], stats, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(eleKey =>\r\n      [eleKey, stats => basicDMGFormula(data.burst.dmg_[stats.tlvl.burst], stats, \"burst\", eleKey)]))\r\n  },\r\n  passive2: {\r\n    em: stats => [s => (s.premod?.eleMas ?? s.eleMas) * 0.2, ['eleMas']]\r\n  }\r\n}\r\nexport default formula\r\n","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [41.28, 44.64, 48, 52.8, 56.16, 60, 65.28, 70.56, 75.84, 81.6, 87.36, 93.12, 98.88, 104.64, 110.4],//1\r\n      [46.27, 50.03, 53.8, 59.18, 62.95, 67.25, 73.17, 79.09, 85, 91.46, 97.92, 104.37, 110.83, 117.28, 123.74],//2\r\n      [55.38, 59.89, 64.4, 70.84, 75.35, 80.5, 87.58, 94.67, 101.75, 109.48, 117.21, 124.94, 132.66, 140.39, 148.12],//3\r\n      [57.02, 61.66, 66.3, 72.93, 77.57, 82.88, 90.17, 97.46, 104.75, 112.71, 120.67, 128.62, 136.58, 144.53, 152.49],//4\r\n      [60.89, 65.84, 70.8, 77.88, 82.84, 88.5, 96.29, 104.08, 111.86, 120.36, 128.86, 137.35, 145.85, 154.34, 162.84],//5\r\n      [72.76, 78.68, 84.6, 93.06, 98.98, 105.75, 115.06, 124.36, 133.67, 143.82, 153.97, 164.12, 174.28, 184.43, 194.58],//6\r\n    ],\r\n  },\r\n  charged: {\r\n    hit: [43.86, 47.43, 51, 56.1, 59.67, 63.75, 69.36, 74.97, 80.58, 86.7, 92.82, 98.94, 105.06, 111.18, 117.3],\r\n    full: [124, 133.3, 142.6, 155, 164.3, 173.6, 186, 198.4, 210.8, 223.2, 235.6, 248, 263.5, 279, 294.5],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04],\r\n  },\r\n  skill: {\r\n    hitArr: [\r\n      [38.87, 42.04, 45.2, 49.72, 52.88, 56.5, 61.47, 66.44, 71.42, 76.84, 82.26, 87.69, 93.11, 98.54, 103.96],//1\r\n      [41.62, 45.01, 48.4, 53.24, 56.63, 60.5, 65.82, 71.15, 76.47, 82.28, 88.09, 93.9, 99.7, 105.51, 111.32],//2\r\n      [56.33, 60.92, 65.5, 72.05, 76.64, 81.88, 89.08, 96.29, 103.49, 111.35, 119.21, 127.07, 134.93, 142.79, 150.65],//3\r\n      [59.94, 64.82, 69.7, 76.67, 81.55, 87.13, 94.79, 102.46, 110.13, 118.49, 126.85, 135.22, 143.58, 151.95, 160.31],//4\r\n      [55.3, 59.8, 64.3, 70.73, 75.23, 80.38, 87.45, 94.52, 101.59, 109.31, 117.03, 124.74, 132.46, 140.17, 147.89],//5\r\n      [35.43, 38.32, 41.2, 45.32, 48.2, 51.5, 56.03, 60.56, 65.1, 70.04, 74.98, 79.93, 84.87, 89.82, 94.76],//6.1 (1st hit)\r\n      [37.67, 40.73, 43.8, 48.18, 51.25, 54.75, 59.57, 64.39, 69.2, 74.46, 79.72, 84.97, 90.23, 95.48, 100.74],//6.2 (2nd hit)\r\n    ],\r\n    skillDmg: [72, 77.4, 82.8, 90, 95.4, 100.8, 108, 115.2, 122.4, 129.6, 136.8, 144, 153, 162, 171],\r\n    charged1: [60.2, 65.1, 70, 77, 81.9, 87.5, 95.2, 102.9, 110.6, 119, 127.4, 135.8, 144.2, 152.6, 161],//1st hit\r\n    charged2: [71.98, 77.84, 83.7, 92.07, 97.93, 104.62, 113.83, 123.04, 132.25, 142.29, 152.33, 162.38, 172.42, 182.47, 192.51],//2nd hit\r\n  },\r\n  burst: {\r\n    melee: [464, 498.8, 533.6, 580, 614.8, 649.6, 696, 742.4, 788.8, 835.2, 881.6, 928, 986, 1044, 1102],\r\n    ranged: [378.4, 406.78, 435.16, 473, 501.38, 529.76, 567.6, 605.44, 643.28, 681.12, 718.96, 756.8, 804.1, 851.4, 898.7],\r\n  },\r\n  riptide: {\r\n    flash: [12.4, 13.33, 14.26, 15.5, 16.43, 17.36, 18.6, 19.84, 21.08, 22.32, 23.56, 24.8, 26.35, 27.9, 29.45],//x3, fully charged\r\n    burst: [62, 66.65, 71.3, 77.5, 82.15, 86.8, 93, 99.2, 105.4, 111.6, 117.8, 124, 131.75, 139.5, 147.25],//death\r\n    slash: [60.2, 65.1, 70, 77, 81.9, 87.5, 95.2, 102.9, 110.6, 119, 127.4, 135.8, 144.2, 152.6, 161],//melee\r\n    blast: [120, 129, 138, 150, 159, 168, 180, 192, 204, 216, 228, 240, 255, 270, 285],//burst\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: {\r\n    ...Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n      basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n    flash: stats => basicDMGFormula(data.riptide.flash[stats.tlvl.auto], stats, \"normal\", \"hydro\"),\r\n    burst: stats => basicDMGFormula(data.riptide.burst[stats.tlvl.auto], stats, \"normal\", \"hydro\"),\r\n  },\r\n  charged: {\r\n    hit: stats => basicDMGFormula(data.charged.hit[stats.tlvl.auto], stats, \"charged\"),\r\n    full: stats => basicDMGFormula(data.charged.full[stats.tlvl.auto], stats, \"charged\", \"hydro\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    ...Object.fromEntries(data.skill.hitArr.map((percentArr, i) => [i, stats =>\r\n      basicDMGFormula(percentArr[stats.tlvl.skill], stats, \"normal\", \"hydro\")])),\r\n    skillDmg: stats => basicDMGFormula(data.skill.skillDmg[stats.tlvl.skill], stats, \"skill\"),\r\n    charged1: stats => basicDMGFormula(data.skill.charged1[stats.tlvl.skill], stats, \"charged\", \"hydro\"),\r\n    charged2: stats => basicDMGFormula(data.skill.charged2[stats.tlvl.skill], stats, \"charged\", \"hydro\"),\r\n    slash: stats => basicDMGFormula(data.riptide.slash[stats.tlvl.skill], stats, \"skill\", \"hydro\"),\r\n  },\r\n  burst: {\r\n    melee: stats => basicDMGFormula(data.burst.melee[stats.tlvl.burst], stats, \"burst\"),\r\n    ranged: stats => basicDMGFormula(data.burst.ranged[stats.tlvl.burst], stats, \"burst\"),\r\n    blast: stats => basicDMGFormula(data.riptide.blast[stats.tlvl.burst], stats, \"burst\", \"hydro\"),\r\n  },\r\n}\r\nexport default formula\r\n","import { getTalentStatKey } from \"../../../Build/Build\"\r\nimport { IFormulaSheet } from \"../../../Types/character\"\r\nimport { singleToTalentPercent, toTalentInt, toTalentPercent } from \"../../../Util/DataminedUtil\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\nimport skillParam_gen_pre from './skillParam_gen.json'\r\nconst skillParam_gen = skillParam_gen_pre as any\r\nlet a = 0, s = 0, b = 0, p1 = 0, c6 = 0;\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: toTalentPercent(skillParam_gen.auto[a++]),\r\n    stam: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: toTalentPercent(skillParam_gen.auto[a++]),\r\n    low: toTalentPercent(skillParam_gen.auto[a++]),\r\n    high: toTalentPercent(skillParam_gen.auto[a++]),\r\n  },\r\n  skill: {\r\n    dmg: toTalentPercent(skillParam_gen.skill[s++]),\r\n    shieldHp_: toTalentPercent(skillParam_gen.skill[s++]),\r\n    shieldHp: toTalentInt(skillParam_gen.skill[s++]),\r\n    duration: skillParam_gen.skill[s++][0],\r\n    maxShieldHp_: toTalentPercent(skillParam_gen.skill[s++]),\r\n    maxShieldHp: toTalentInt(skillParam_gen.skill[s++]),\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: toTalentPercent(skillParam_gen.burst[b++]),\r\n    dmgCollapse: toTalentPercent(skillParam_gen.burst[b++]),\r\n    shieldHp_: toTalentPercent(skillParam_gen.burst[b++]),\r\n    shieldHp: toTalentInt(skillParam_gen.burst[b++]),\r\n    shieldDuration: skillParam_gen.burst[b++][0],\r\n    triggerDuration: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    shield_: singleToTalentPercent(skillParam_gen.passive1[p1++][0]),\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n    maxStack: skillParam_gen.passive1[p1++][0],\r\n    trigger: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    hp_: singleToTalentPercent(skillParam_gen.passive2[0][0]),\r\n  },\r\n  constellation2: {\r\n    duration: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    auto_: singleToTalentPercent(skillParam_gen.constellation6[c6++]),\r\n    duration: skillParam_gen.constellation6[c6++],\r\n  }\r\n} as const\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula((arr[stats.tlvl.auto]), stats, \"normal\")])),\r\n  charged: {\r\n    dmg: stats => basicDMGFormula(data.charged.dmg[stats.tlvl.auto], stats, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    shield: stats => {\r\n      const hp = data.skill.shieldHp_[stats.tlvl.skill] / 100\r\n      const flat = data.skill.shieldHp[stats.tlvl.skill]\r\n      const shdStr = 1\r\n      return [s => (hp * s.finalHP + flat) * (1 + s.shield_ / 100) * shdStr, [\"finalHP\", \"shield_\"]]\r\n    },\r\n    shieldPyro: stats => {\r\n      const hp = data.skill.shieldHp_[stats.tlvl.skill] / 100\r\n      const flat = data.skill.shieldHp[stats.tlvl.skill]\r\n      const shdStr = 2.5\r\n      return [s => (hp * s.finalHP + flat) * (1 + s.shield_ / 100) * shdStr, [\"finalHP\", \"shield_\"]]\r\n    },\r\n    maxShield: stats => {\r\n      const hp = data.skill.maxShieldHp_[stats.tlvl.skill] / 100\r\n      const flat = data.skill.maxShieldHp[stats.tlvl.skill]\r\n      const shdStr = 1\r\n      return [s => (hp * s.finalHP + flat) * (1 + s.shield_ / 100) * shdStr, [\"finalHP\", \"shield_\"]]\r\n    },\r\n    maxShieldPyro: stats => {\r\n      const hp = data.skill.maxShieldHp_[stats.tlvl.skill] / 100\r\n      const flat = data.skill.maxShieldHp[stats.tlvl.skill]\r\n      const shdStr = 2.5\r\n      return [s => (hp * s.finalHP + flat) * (1 + s.shield_ / 100) * shdStr, [\"finalHP\", \"shield_\"]]\r\n    },\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    dmgCollapse: stats => basicDMGFormula(data.burst.dmgCollapse[stats.tlvl.burst], stats, \"burst\"),\r\n    dmgCollapseA4: stats => {\r\n      const val = data.burst.dmgCollapse[stats.tlvl.burst] / 100\r\n      const hp_ = data.passive2.hp_ / 100\r\n      const statKey = getTalentStatKey(\"burst\", stats) + \"_multi\"\r\n      return [s => (val * s.finalATK + hp_ * s.finalHP) * s[statKey], [\"finalHP\", \"finalATK\", statKey]]\r\n    },\r\n    shield: stats => {\r\n      const hp = data.burst.shieldHp_[stats.tlvl.burst] / 100\r\n      const flat = data.burst.shieldHp[stats.tlvl.burst]\r\n      const shdStr = 1\r\n      return [s => (hp * s.finalHP + flat) * (1 + s.shield_ / 100) * shdStr, [\"finalHP\", \"shield_\"]]\r\n    },\r\n    shieldPyro: stats => {\r\n      const hp = data.burst.shieldHp_[stats.tlvl.burst] / 100\r\n      const flat = data.burst.shieldHp[stats.tlvl.burst]\r\n      const shdStr = 2.5\r\n      return [s => (hp * s.finalHP + flat) * (1 + s.shield_ / 100) * shdStr, [\"finalHP\", \"shield_\"]]\r\n    },\r\n  }\r\n} as const\r\nexport default formula","import { IFormulaSheet } from \"../../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\"\r\nimport { absorbableEle } from \"../../dataUtil\"\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [44.46, 48.08, 51.7, 56.87, 60.49, 64.63, 70.31, 76, 81.69, 87.89, 94.09, 100.3, 106.5, 112.71, 118.91],\r\n      [43.43, 46.97, 50.5, 55.55, 59.09, 63.13, 68.68, 74.23, 79.79, 85.85, 91.91, 97.97, 104.03, 110.09, 116.15],\r\n      [52.98, 57.29, 61.6, 67.76, 72.07, 77, 83.78, 90.55, 97.33, 104.72, 112.11, 119.5, 126.9, 134.29, 141.68],\r\n      [58.31, 63.05, 67.8, 74.58, 79.33, 84.75, 92.21, 99.67, 107.12, 115.26, 123.4, 131.53, 139.67, 147.8, 155.94],\r\n      [70.78, 76.54, 82.3, 90.53, 96.29, 102.88, 111.93, 120.98, 130.03, 139.91, 149.79, 159.66, 169.54, 179.41, 189.29],\r\n    ],\r\n  },\r\n  charged: {\r\n    hitArr: [\r\n      [55.9, 60.45, 65, 71.5, 76.05, 81.25, 88.4, 95.55, 102.7, 110.5, 118.3, 126.1, 133.9, 141.7, 149.5],\r\n      [60.72, 65.66, 70.6, 77.66, 82.6, 88.25, 96.02, 103.78, 111.55, 120.02, 128.49, 136.96, 145.44, 153.91, 162.38],\r\n      [72.24, 78.12, 84, 92.4, 98.28, 105, 114.24, 123.48, 132.72, 142.8, 152.88, 162.96, 173.04, 183.12, 193.2],\r\n    ],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04]\r\n  },\r\n  skill: {\r\n    initial_dmg: [12, 12.9, 13.8, 15, 15.9, 16.8, 18, 19.2, 20.4, 21.6, 22.8, 24, 25.5, 27, 28.5],\r\n    initial_max: [16.8, 18.06, 19.32, 21, 22.26, 23.52, 25.2, 26.88, 28.56, 30.24, 31.92, 33.6, 35.7, 37.8, 39.9],\r\n    storm_dmg: [176, 189.2, 202.4, 220, 233.2, 246.4, 264, 281.6, 299.2, 316.8, 334.4, 352, 374, 396, 418],\r\n    storm_max: [192, 206.4, 220.8, 240, 254.4, 268.8, 288, 307.2, 326.4, 345.6, 364.8, 384, 408, 432, 456],\r\n  },\r\n  burst: {\r\n    dmg: [80.8, 86.86, 92.92, 101, 107.06, 113.12, 121.2, 129.28, 137.36, 145.44, 153.52, 161.6, 171.7, 181.8, 191.9],\r\n    dmg_: [24.8, 26.66, 28.52, 31, 32.86, 34.72, 37.2, 39.68, 42.16, 44.64, 47.12, 49.6, 52.7, 55.8, 58.9],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(data.charged.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries(Object.entries(data.skill).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")])),\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(eleKey =>\r\n      [eleKey, stats => basicDMGFormula(data.burst.dmg_[stats.tlvl.burst], stats, \"burst\", eleKey)]))\r\n  },\r\n  passive2: {\r\n    heal: stats => [s => 0.02 * s.finalHP * s.heal_multi, [\"finalHP\", \"heal_multi\"]],\r\n  },\r\n  passive1: {\r\n    windAuto: stats => basicDMGFormula(60, stats, \"normal\", \"anemo\"),\r\n  }\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [44.46, 48.08, 51.7, 56.87, 60.49, 64.63, 70.31, 76, 81.69, 87.89, 94.09, 100.3, 106.5, 112.71, 118.91],\r\n      [43.43, 46.97, 50.5, 55.55, 59.09, 63.13, 68.68, 74.23, 79.79, 85.85, 91.91, 97.97, 104.03, 110.09, 116.15],\r\n      [52.98, 57.29, 61.6, 67.76, 72.07, 77, 83.78, 90.55, 97.33, 104.72, 112.11, 119.5, 126.9, 134.29, 141.68],\r\n      [58.31, 63.05, 67.8, 74.58, 79.33, 84.75, 92.21, 99.67, 107.12, 115.26, 123.4, 131.53, 139.67, 147.8, 155.94],\r\n      [70.78, 76.54, 82.3, 90.53, 96.29, 102.88, 111.93, 120.98, 130.03, 139.91, 149.79, 159.66, 169.54, 179.41, 189.29],\r\n    ],\r\n  },\r\n  charged: {\r\n    hitArr: [\r\n      [55.9, 60.45, 65, 71.5, 76.05, 81.25, 88.4, 95.55, 102.7, 110.5, 118.3, 126.1, 133.9, 141.7, 149.5],\r\n      [60.72, 65.66, 70.6, 77.66, 82.6, 88.25, 96.02, 103.78, 111.55, 120.02, 128.49, 136.96, 145.44, 153.91, 162.38],\r\n      [72.24, 78.12, 84, 92.4, 98.28, 105, 114.24, 123.48, 132.72, 142.8, 152.88, 162.96, 173.04, 183.12, 193.2],\r\n    ],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04]\r\n  },\r\n  skill: {\r\n    dmg: [248, 266.6, 285.2, 310, 328.6, 347.2, 372, 396.8, 421.6, 446.4, 471.2, 496, 527, 558, 589],\r\n  },\r\n  burst: {\r\n    dmg: [148, 159.1, 170.2, 185, 196.1, 207.2, 222, 236.8, 251.6, 266.4, 281.2, 296, 314.5, 333, 351.5],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(data.charged.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    exp: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\")\r\n  },\r\n  burst: Object.fromEntries(Object.entries(data.burst).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.burst], stats, \"burst\")])),//not optimizationTarget, dont need to precompute\r\n  passive2: {\r\n    geoAuto: stats => basicDMGFormula(60, stats, \"normal\", \"geo\"),\r\n  }\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [44.46, 48.08, 51.7, 56.87, 60.49, 64.63, 70.31, 76, 81.69, 87.89, 94.09, 100.3, 106.5, 112.71, 118.91],\r\n      [43.43, 46.97, 50.5, 55.55, 59.09, 63.13, 68.68, 74.23, 79.79, 85.85, 91.91, 97.97, 104.03, 110.09, 116.15],\r\n      [52.98, 57.29, 61.6, 67.76, 72.07, 77, 83.78, 90.55, 97.33, 104.72, 112.11, 119.5, 126.9, 134.29, 141.68],\r\n      [58.31, 63.05, 67.8, 74.58, 79.33, 84.75, 92.21, 99.67, 107.12, 115.26, 123.4, 131.53, 139.67, 147.8, 155.94],\r\n      [70.78, 76.54, 82.3, 90.53, 96.29, 102.88, 111.93, 120.98, 130.03, 139.91, 149.79, 159.66, 169.54, 179.41, 189.29],\r\n    ],\r\n  },\r\n  charged: {\r\n    hitArr: [\r\n      [55.9, 60.45, 65, 71.5, 76.05, 81.25, 88.4, 95.55, 102.7, 110.5, 118.3, 126.1, 133.9, 141.7, 149.5],\r\n      [60.72, 65.66, 70.6, 77.66, 82.6, 88.25, 96.02, 103.78, 111.55, 120.02, 128.49, 136.96, 145.44, 153.91, 162.38],\r\n      [72.24, 78.12, 84, 92.4, 98.28, 105, 114.24, 123.48, 132.72, 142.8, 152.88, 162.96, 173.04, 183.12, 193.2],\r\n    ],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04]\r\n  },\r\n  skill: {\r\n    dmg: [78.66, 84.56, 90.46, 98.33, 104.23, 110.13, 118, 125.86, 133.73, 141.6, 149.46, 157.33, 167.16, 176.99, 186.83],\r\n    enerRegen: [3, 3, 3, 3.5, 3.5, 3.5, 4, 4, 4, 4, 4, 4, 4, 4, 4],\r\n  },\r\n  burst: {\r\n    dmg: [114.4, 122.98, 131.56, 143, 151.58, 160.16, 171.6, 183.04, 194.48, 205.92, 217.36, 228.8, 243.1, 257.4, 271.7],\r\n    thunder: [32.8, 35.26, 37.72, 41, 43.46, 45.92, 49.2, 52.48, 55.76, 59.04, 62.32, 65.6, 69.7, 73.8, 77.9],\r\n    enerRegen: [0.8, 0.8, 0.8, 0.9, 0.9, 0.9, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(data.charged.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) =>\r\n    [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    enerRechInc: stats => {\r\n      if (stats.ascension < 4) return [s => 20, []]\r\n      return [s => 20 + (s.premod?.enerRech_ ?? s.enerRech_) / 10, [\"enerRech_\"]]\r\n    }\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    thunder: stats => basicDMGFormula(data.burst.thunder[stats.tlvl.burst], stats, \"burst\"),\r\n    //TODO: this needs testing\r\n    thunder3: stats => basicDMGFormula(data.burst.thunder[stats.tlvl.burst] + 100, stats, \"burst\")\r\n  }\r\n}\r\nexport default formula","\r\nimport anemo from './anemo/data'\r\nimport geo from './geo/data'\r\nimport electro from './electro/data'\r\n\r\nconst data = {\r\n  anemo,\r\n  geo,\r\n  electro,\r\n}\r\nexport default data","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\nimport { absorbableEle } from \"../dataUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [20.38, 22.04, 23.7, 26.07, 27.73, 29.63, 32.23, 34.84, 37.45, 40.29, 43.55, 47.38, 51.21, 55.05, 59.23],//1\r\n      [44.38, 47.99, 51.6, 56.76, 60.37, 64.5, 70.18, 75.85, 81.53, 87.72, 94.82, 103.16, 111.5, 119.85, 128.95],//2\r\n      [52.37, 56.64, 60.9, 66.99, 71.25, 76.13, 82.82, 89.52, 96.22, 103.53, 111.9, 121.75, 131.6, 141.45, 152.19],//3\r\n      [26.06, 28.18, 30.3, 33.33, 35.45, 37.87, 41.21, 44.54, 47.87, 51.51, 55.68, 60.58, 65.48, 70.37, 75.72],//4\r\n      [50.65, 54.78, 58.9, 64.79, 68.91, 73.63, 80.1, 86.58, 93.06, 100.13, 108.23, 117.75, 127.28, 136.8, 147.19],//5\r\n      [70.95, 76.73, 82.5, 90.75, 96.53, 103.13, 112.2, 121.28, 130.35, 140.25, 151.59, 164.93, 178.27, 191.61, 206.17],//6\r\n    ]\r\n  },\r\n  charged: {\r\n    hit: [43.86, 47.43, 51, 56.1, 59.67, 63.75, 69.36, 74.97, 80.58, 86.7, 93.71, 101.96, 110.21, 118.45, 127.45],\r\n    full: [124, 133.3, 142.6, 155, 164.3, 173.6, 186, 198.4, 210.8, 223.2, 236.1, 252.96, 269.82, 286.69, 303.55],\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59],\r\n  },\r\n  skill: {\r\n    press: [276, 296.7, 317.4, 345, 365.7, 386.4, 414, 441.6, 469.2, 496.8, 524.4, 552, 586.5, 621, 655.5],\r\n    hold: [380, 408.5, 437, 475, 503.5, 532, 570, 608, 646, 684, 722, 760, 807.5, 855, 902.5],\r\n  },\r\n  burst: {\r\n    hit: [37.6, 40.42, 43.24, 47, 49.82, 52.64, 56.4, 60.16, 63.92, 67.68, 71.44, 75.2, 79.9, 84.6, 89.3],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    hit: stats => basicDMGFormula(data.charged.hit[stats.tlvl.auto], stats, \"charged\"),\r\n    full: stats => basicDMGFormula(data.charged.full[stats.tlvl.auto], stats, \"charged\", \"anemo\"),\r\n    hit_bonus: stats => basicDMGFormula(data.charged.hit[stats.tlvl.auto] * 0.33, stats, \"charged\"),\r\n    full_bonus: stats => basicDMGFormula(data.charged.full[stats.tlvl.auto] * 0.33, stats, \"charged\", \"anemo\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries(Object.entries(data.skill).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")])),\r\n  burst: Object.fromEntries([\r\n    [\"hit\", stats => basicDMGFormula(data.burst.hit[stats.tlvl.burst], stats, \"burst\")],\r\n    ...absorbableEle.map(eleKey => [eleKey, stats => basicDMGFormula(data.burst.hit[stats.tlvl.burst] / 2, stats, \"burst\", eleKey)]),\r\n    ...absorbableEle.flatMap(eleKey => [\r\n      [`${eleKey}_tot_7`, stats => totBurst(stats, eleKey, 7)],\r\n      [`${eleKey}_tot_14`, stats => totBurst(stats, eleKey, 14)],\r\n    ])\r\n  ]),\r\n}\r\nfunction totBurst(stats, absorptionEle, swirlTicks) {\r\n  const ultTicks = 20\r\n  const absorptionTicks = 15\r\n  const burstStatKey = `anemo_burst_${stats.hitMode}`\r\n  const absorptionStatKey = `${absorptionEle}_burst_${stats.hitMode}`\r\n  const swirlStatKey = `${absorptionEle}_swirl_hit`\r\n  const burstScaling = data.burst.hit[stats.tlvl.burst] / 100\r\n  return [s => ultTicks * burstScaling * s[burstStatKey] + absorptionTicks * 0.5 * burstScaling * s[absorptionStatKey] + swirlTicks * s[swirlStatKey], [burstStatKey, absorptionStatKey, swirlStatKey]]\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [27.54, 29.42, 31.3, 33.8, 35.68, 37.87, 40.69, 43.51, 46.32, 49.14, 51.96, 54.78, 57.59, 60.41, 63.23],//1 hits twice\r\n      [56.94, 60.82, 64.7, 69.88, 73.76, 78.29, 84.11, 89.93, 95.76, 101.58, 107.4, 113.23, 119.05, 124.87, 130.69],//2\r\n      [68.55, 73.23, 77.9, 84.13, 88.81, 94.26, 101.27, 108.28, 115.29, 122.3, 129.31, 136.33, 143.34, 150.35, 157.36],//3\r\n      [37.66, 40.23, 42.8, 46.22, 48.79, 51.79, 55.64, 59.49, 63.34, 67.2, 71.05, 74.9, 78.75, 82.6, 86.46],//4 hits twice\r\n      [71.54, 76.42, 81.3, 87.8, 92.68, 98.37, 105.69, 113.01, 120.32, 127.64, 134.96, 142.28, 149.59, 156.91, 164.23],\r\n      [95.83, 102.37, 108.9, 117.61, 124.15, 131.77, 141.57, 151.37, 161.17, 170.97, 180.77, 190.58, 200.38, 210.18, 219.98],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: [121.09, 129.34, 137.6, 148.61, 156.86, 166.5, 178.88, 191.26, 203.65, 216.03, 228.42, 240.8, 253.18, 265.57, 277.95],\r\n  },\r\n  plunging: {\r\n    dmg: [81.83, 88.49, 95.16, 104.67, 111.33, 118.94, 129.41, 139.88, 150.35, 161.76, 173.18, 184.6, 196.02, 207.44, 218.86],\r\n    low: [163.63, 176.95, 190.27, 209.3, 222.62, 237.84, 258.77, 279.7, 300.63, 323.46, 346.29, 369.12, 391.96, 414.79, 437.62],\r\n    high: [204.39, 221.02, 237.66, 261.42, 278.06, 297.07, 323.21, 349.36, 375.5, 404.02, 432.54, 461.06, 489.57, 518.09, 546.61],\r\n  },\r\n  skill: {\r\n    hit: [252.8, 271.76, 290.72, 316, 334.96, 353.92, 379.2, 404.48, 429.76, 455.04, 480.32, 505.6, 537.2, 568.8, 600.4],\r\n  },\r\n  burst: {\r\n    atk_bonus: [58.45, 61.95, 65.45, 70, 73.5, 77, 81.55, 86.1, 90.65, 95.2, 99.75, 104.3, 108.85, 113.4, 117.95],\r\n    drain: [3, 3, 3, 2.5, 2.5, 2.5, 2, 2, 2, 2, 2, 2, 2, 2, 2],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto] * ((i === 0 || i === 3) ? 2 : 1), stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries(Object.entries(data.skill).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")])),\r\n  burst: {}\r\n}\r\n\r\nexport default formula\r\n","import { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [42.05, 45.48, 48.9, 53.79, 57.21, 61.13, 66.5, 71.88, 77.26, 83.13, 89.85, 97.76, 105.67, 113.58, 122.2],//1\r\n      [42.14, 45.57, 49, 53.9, 57.33, 61.25, 66.64, 72.03, 77.42, 83.3, 90.04, 97.96, 105.88, 113.81, 122.45],//2\r\n      [26.06, 28.18, 30.3, 33.33, 35.45, 37.87, 41.21, 44.54, 47.87, 51.51, 55.68, 60.58, 65.48, 70.37, 75.72],//3 x2\r\n      [14.1, 15.25, 16.4, 18.04, 19.19, 20.5, 22.3, 24.11, 25.91, 27.88, 30.14, 32.79, 35.44, 38.09, 40.98],//4 x4\r\n      [71.04, 76.82, 82.6, 90.86, 96.64, 103.25, 112.34, 121.42, 130.51, 140.42, 151.78, 165.13, 178.49, 191.85, 206.42],//5\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: [121.69, 131.6, 141.5, 155.65, 165.56, 176.88, 192.44, 208.01, 223.57, 240.55, 260.01, 282.89, 305.77, 328.65, 353.61],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04],\r\n  },\r\n  skill: {\r\n    dmg: [111.28, 119.63, 127.97, 139.1, 147.45, 155.79, 166.92, 178.05, 189.18, 200.3, 211.43, 222.56, 236.47, 250.38, 264.29],\r\n  },\r\n  burst: {\r\n    hit1: [72, 77.4, 82.8, 90, 95.4, 100.8, 108, 115.2, 122.4, 129.6, 136.8, 144, 153, 162, 171],\r\n    hit2: [88, 94.6, 101.2, 110, 116.6, 123.2, 132, 140.8, 149.6, 158.4, 167.2, 176, 187, 198, 209],\r\n    hit3: [109.6, 117.82, 126.04, 137, 145.22, 153.44, 164.4, 175.36, 186.32, 197.28, 208.24, 219.2, 232.9, 246.6, 260.3],\r\n    dmg: [112, 120.4, 128.8, 140, 148.4, 156.8, 168, 179.2, 190.4, 201.6, 212.8, 224, 238, 252, 266],\r\n  }\r\n}\r\nconst formula = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    hit1: stats => basicDMGFormula(data.burst.hit1[stats.tlvl.burst], stats, \"burst\"),\r\n    hit2: stats => basicDMGFormula(data.burst.hit2[stats.tlvl.burst], stats, \"burst\"),\r\n    hit3: stats => basicDMGFormula(data.burst.hit3[stats.tlvl.burst], stats, \"burst\"),\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: stats => basicDMGFormula(75, stats, \"elemental\"),\r\n  }\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\nimport { toTalentPercent } from \"../../../Util/DataminedUtil\"\r\nimport skillParam_gen_pre from './skillParam_gen.json'\r\nconst skillParam_gen = skillParam_gen_pre as any\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      toTalentPercent(skillParam_gen.auto[0]),\r\n      toTalentPercent(skillParam_gen.auto[1]),\r\n      toTalentPercent(skillParam_gen.auto[2]),//x2\r\n      toTalentPercent(skillParam_gen.auto[4]),\r\n      toTalentPercent(skillParam_gen.auto[5]),//x2\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: toTalentPercent(skillParam_gen.auto[7]),\r\n    hit2: toTalentPercent(skillParam_gen.auto[8]),\r\n    stam: skillParam_gen.auto[9][0]\r\n  },\r\n  plunging: {\r\n    dmg: toTalentPercent(skillParam_gen.auto[10]),\r\n    low: toTalentPercent(skillParam_gen.auto[11]),\r\n    high: toTalentPercent(skillParam_gen.auto[12]),\r\n  },\r\n  skill: {\r\n    hit1: toTalentPercent(skillParam_gen.skill[0]),\r\n    hit2: toTalentPercent(skillParam_gen.skill[1]),\r\n    dmgRed: toTalentPercent(skillParam_gen.skill[2]),\r\n    duration: skillParam_gen.skill[3][0],\r\n    cd: skillParam_gen.skill[4][0],\r\n  },\r\n  burst: {\r\n    dmg: toTalentPercent(skillParam_gen.burst[0]),\r\n    duration: skillParam_gen.burst[1][0],\r\n    cd: skillParam_gen.burst[2][0],\r\n    cost: skillParam_gen.burst[3][0],\r\n  },\r\n} as const\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) =>\r\n    [i, stats => basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    hit1: stats => basicDMGFormula(data.charged.hit1[stats.tlvl.auto], stats, \"charged\"),\r\n    hit2: stats => basicDMGFormula(data.charged.hit2[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries([\r\n    ...[\"hit1\", \"hit2\"].map(name =>\r\n      [name, stats => basicDMGFormula(data.skill[name][stats.tlvl.skill], stats, \"skill\")]),\r\n    ...[\"hit1\", \"hit2\"].map(name =>\r\n      [`${name}RainCutter`, stats => basicDMGFormula(1.5 * data.skill[name][stats.tlvl.skill], stats, \"skill\")]),\r\n    [\"dmgRed\", stats => {\r\n      const flat = data.skill.dmgRed[stats.tlvl.skill]\r\n      return [s => (flat + Math.min(24, 0.2 * s.hydro_dmg_)), [\"hydro_dmg_\"]]\r\n    }],\r\n  ]),\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n} as const\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { basicDMGFormula } from \"../../../Util/FormulaUtil\";\r\nimport { getTalentStatKey } from \"../../../Build/Build\";\r\nimport { FormulaItem, IFormulaSheet } from \"../../../Types/character\";\r\n\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [76.54, 82.77, 89, 97.9, 104.13, 111.25, 121.04, 130.83, 140.62, 151.3, 161.98, 172.66, 183.34, 194.02, 204.7],//1\r\n      [73.96, 79.98, 86, 94.6, 100.62, 107.5, 116.96, 126.42, 135.88, 146.2, 156.52, 166.84, 177.16, 187.48, 197.8],//2\r\n      [95.46, 103.23, 111, 122.1, 129.87, 138.75, 150.96, 163.17, 175.38, 188.7, 202.02, 215.34, 228.66, 241.98, 255.3],//3\r\n      [115.84, 125.27, 134.7, 148.17, 157.6, 168.38, 183.19, 198.01, 212.83, 228.99, 245.15, 261.32, 277.48, 293.65, 309.81],//4\r\n    ]\r\n  },\r\n  charged: {\r\n    spinning: [62.55, 67.64, 72.73, 80, 85.09, 90.91, 98.91, 106.91, 114.91, 123.64, 132.36, 141.09, 149.82, 158.55, 167.27],\r\n    final: [113.09, 122.3, 131.5, 144.65, 153.86, 164.38, 178.84, 193.31, 207.77, 223.55, 239.33, 255.11, 270.89, 286.67, 302.45],\r\n  },\r\n  plunging: {\r\n    dmg: [74.59, 80.66, 86.73, 95.4, 101.47, 108.41, 117.95, 127.49, 137.03, 147.44, 157.85, 168.26, 178.66, 189.07, 199.48],\r\n    low: [149.14, 161.28, 173.42, 190.77, 202.91, 216.78, 235.86, 254.93, 274.01, 294.82, 315.63, 336.44, 357.25, 378.06, 398.87],\r\n    high: [186.29, 201.45, 216.62, 238.28, 253.44, 270.77, 294.6, 318.42, 342.25, 368.25, 394.24, 420.23, 446.23, 472.22, 498.21],\r\n  },\r\n  skill: {\r\n    dmg: [169.6, 182.32, 195.04, 212, 224.72, 237.44, 254.4, 271.36, 288.32, 305.28, 322.24, 339.2, 360.4, 381.6, 402.8],\r\n    def1: [104.04, 111.84, 119.65, 130.05, 137.85, 145.66, 156.06, 166.46, 176.87, 187.27, 197.68, 208.08, 221.09, 234.09, 247.1],\r\n    flat1: [501, 551, 605, 663, 726, 793, 864, 939, 1018, 1101, 1189, 1281, 1377, 1477, 1581],\r\n    def2: [122.4, 131.58, 140.76, 153, 162.18, 171.36, 183.6, 195.84, 208.08, 220.32, 232.56, 244.8, 260.1, 275.4, 290.7],\r\n    flat2: [589, 648, 712, 780, 854, 932, 1016, 1104, 1197, 1296, 1399, 1507, 1620, 1737, 1860],\r\n    def3: [144, 154.8, 165.6, 180, 190.8, 201.6, 216, 230.4, 244.8, 259.2, 273.6, 288, 306, 324, 342],\r\n    flat3: [693, 762, 837, 918, 1005, 1097, 1195, 1299, 1409, 1524, 1646, 1773, 1905, 2044, 2188],\r\n    dot: [33.6, 36.12, 38.64, 42, 44.52, 47.04, 50.4, 53.76, 57.12, 60.48, 63.84, 67.2, 71.4, 75.6, 79.8],\r\n  },\r\n  burst: {\r\n    dmg: [340.8, 366.36, 391.92, 426, 451.56, 477.12, 511.2, 545.28, 579.36, 613.44, 647.52, 681.6, 724.2, 766.8, 809.4],\r\n    dot: [40, 43, 46, 50, 53, 56, 60, 64, 68, 72, 76, 80, 85, 90, 95],\r\n  }\r\n}\r\nfunction nyanDMG(percent, defMulti, stats, skillKey = \"charged\"): FormulaItem {\r\n  const val = percent / 100\r\n  const statKey = getTalentStatKey(skillKey, stats) + \"_multi\"\r\n  return [s => val * (s.finalATK + defMulti * s.finalDEF) * s[statKey], [\"finalATK\", \"finalDEF\", statKey]]\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats => basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    spinning: stats => basicDMGFormula(data.charged.spinning[stats.tlvl.auto], stats, \"charged\"),\r\n    spinningDEF: stats => nyanDMG(data.charged.spinning[stats.tlvl.auto], 0.5, stats),\r\n    final: stats => basicDMGFormula(data.charged.final[stats.tlvl.auto], stats, \"charged\"),\r\n    finalDEF: stats => nyanDMG(data.charged.final[stats.tlvl.auto], 0.5, stats),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    ...Object.fromEntries([...Array(3)].map((_, i) => i + 1).flatMap(i => [\r\n      [`shield${i}`, stats => {\r\n        const percent = data.skill[`def${i}`][stats.tlvl.skill] / 100\r\n        const flat = data.skill[`flat${i}`][stats.tlvl.skill]\r\n        return [s => (percent * s.finalDEF + flat) * (1 + s.shield_ / 100), [\"finalDEF\", \"shield_\"]]\r\n      }],\r\n      [`shield${i}Pyro`, stats => {\r\n        const percent = data.skill[`def${i}`][stats.tlvl.skill] / 100\r\n        const flat = data.skill[`flat${i}`][stats.tlvl.skill]\r\n        return [s => (percent * s.finalDEF + flat) * (1 + s.shield_ / 100) * 2.5, [\"finalDEF\", \"shield_\"]]\r\n      }],\r\n    ])),\r\n    dot: stats => basicDMGFormula(data.skill.dot[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => {\r\n      const val = data.burst.dmg[stats.tlvl.burst] / 100\r\n      const statKey = stats.constellation >= 2 ? `physical_burst_critHit` : `physical_burst_${stats.hitMode}`\r\n      return [s => val * s[statKey], [statKey]]\r\n    },\r\n    dot: stats => basicDMGFormula(data.burst.dot[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n}\r\nexport default formula\r\n","import { getTalentStatKey } from \"../../../Build/Build\"\r\nimport { FormulaItem, IFormulaSheet } from \"../../../Types/character\"\r\nimport { BasicStats } from \"../../../Types/stats\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [39.66, 42.63, 45.61, 49.57, 52.55, 55.52, 59.49, 63.45, 67.42, 71.39, 75.35, 79.32, 84.27, 89.23, 94.19],\r\n      [38.52, 41.41, 44.3, 48.15, 51.04, 53.93, 57.78, 61.63, 65.48, 69.33, 73.19, 77.04, 81.85, 86.67, 91.48],\r\n      [56.89, 61.16, 65.42, 71.11, 75.38, 79.64, 85.33, 91.02, 96.71, 102.4, 108.09, 113.78, 120.89, 128, 135.11],\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: [142.89, 153.61, 164.33, 178.62, 189.34, 200.05, 214.34, 228.63, 242.92, 257.21, 271.5, 285.79, 303.65, 321.51, 339.38],\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59],\r\n  },\r\n  skill: {\r\n    lvl1: [60.67, 65.22, 69.77, 75.84, 80.39, 84.94, 91.01, 97.08, 103.14, 109.21, 115.28, 121.34, 128.93, 136.51, 144.1],\r\n    lvl2: [75.84, 81.53, 87.22, 94.8, 100.49, 106.18, 113.76, 121.34, 128.93, 136.51, 144.1, 151.68, 161.16, 170.64, 180.12],\r\n    lvl3: [94.8, 101.91, 109.02, 118.5, 125.61, 132.72, 142.2, 151.68, 161.16, 170.64, 180.12, 189.6, 201.45, 213.3, 225.15],\r\n    lvl4: [118.5, 127.39, 136.28, 148.13, 157.01, 165.9, 177.75, 189.6, 201.45, 213.3, 225.15, 237, 251.81, 266.63, 281.44],\r\n\r\n  },\r\n  burst: {\r\n    dmg: [260, 279.5, 299, 325, 344.5, 364, 390, 416, 442, 468, 494, 520, 552.5, 585, 617.5],\r\n    thunderbolt: [333.82, 358.85, 383.89, 417.27, 442.31, 467.34, 500.72, 534.11, 567.49, 600.87, 634.25, 667.63, 709.36, 751.09, 792.81],\r\n  }\r\n}\r\nfunction emDMGFormula(percent: number, stats: BasicStats, skillKey: string): FormulaItem {\r\n  const val = percent / 100\r\n  const emMulti = 0.15 / 100\r\n  const statKey = \"electro_skill_hit_base_multi\"\r\n  // const statKey = getTalentStatKey(\"skill\", stats) + \"_base_multi\"\r\n  const critKey = \"critHit_base_multi\";\r\n  const avgHitKey = \"skill_avgHit_base_multi\";\r\n  const levelKey = \"enemyLevel_multi\";\r\n  const resKey = \"electro_enemyRes_multi\";\r\n  // return [s => val * s.finalATK * (s[statKey] + (emMulti * s.eleMas) * s[levelKey] * s[resKey]), [\"finalATK\", statKey, \"eleMas\", levelKey, resKey]]\r\n  if (stats.hitMode === \"critHit\") {\r\n    return [s => val * s.finalATK * (s[statKey] + emMulti * s[\"eleMas\"]) * s[levelKey] * s[resKey] * s[critKey], [\"finalATK\", statKey, \"eleMas\", levelKey, resKey, critKey]]\r\n  } else if (stats.hitMode === \"avgHit\") {\r\n    return [s => val * s.finalATK * (s[statKey] + emMulti * s[\"eleMas\"]) * s[levelKey] * s[resKey] * s[avgHitKey], [\"finalATK\", statKey, \"eleMas\", levelKey, resKey, avgHitKey]]\r\n  } else {\r\n    return [s => val * s.finalATK * (s[statKey] + emMulti * s[\"eleMas\"]) * s[levelKey] * s[resKey], [\"finalATK\", statKey, \"eleMas\", levelKey, resKey]]\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    lvl1: stats => basicDMGFormula(data.skill.lvl1[stats.tlvl.skill], stats, \"skill\"),\r\n    lvl2: stats => basicDMGFormula(data.skill.lvl2[stats.tlvl.skill], stats, \"skill\"),\r\n    lvl3: stats => basicDMGFormula(data.skill.lvl3[stats.tlvl.skill], stats, \"skill\"),\r\n    lvl4: stats => basicDMGFormula(data.skill.lvl4[stats.tlvl.skill], stats, \"skill\"),\r\n\r\n    lvl1EM: stats => emDMGFormula(data.skill.lvl1[stats.tlvl.skill], stats, \"skill\"),\r\n    lvl2EM: stats => emDMGFormula(data.skill.lvl2[stats.tlvl.skill], stats, \"skill\"),\r\n    lvl3EM: stats => emDMGFormula(data.skill.lvl3[stats.tlvl.skill], stats, \"skill\"),\r\n    lvl4EM: stats => emDMGFormula(data.skill.lvl4[stats.tlvl.skill], stats, \"skill\"),\r\n\r\n  },\r\n  burst: Object.fromEntries(Object.entries(data.burst).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.burst], stats, \"burst\")])),\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [58.34, 62.72, 67.09, 72.93, 77.3, 81.68, 87.51, 93.35, 99.18, 105.01, 110.85, 116.68, 123.98, 131.27, 138.56],\r\n      [52.13, 56.04, 59.94, 65.16, 69.07, 72.98, 78.19, 83.4, 88.61, 93.83, 99.04, 104.25, 110.77, 117.28, 123.8],\r\n      [76.01, 81.71, 87.41, 95.02, 100.72, 106.42, 114.02, 121.62, 129.22, 136.82, 144.42, 152.03, 161.53, 171.03, 180.53]\r\n    ],\r\n  },\r\n  charged: {\r\n    hitArr: [\r\n      [98.23, 104.11, 109.99, 117.64, 123.52, 129.4, 137.05, 144.7, 152.34, 159.99, 167.64, 175.28, 182.93, 190.58, 198.22],\r\n      [115.56, 122.48, 129.4, 138.4, 145.32, 152.24, 161.24, 170.23, 179.23, 188.22, 197.22, 206.22, 215.21, 224.21, 233.2],\r\n      [132.9, 140.86, 148.81, 159.16, 167.12, 175.08, 185.42, 195.77, 206.11, 216.46, 226.8, 237.15, 247.49, 257.84, 268.18],\r\n      [150.23, 159.23, 168.23, 179.92, 188.92, 197.91, 209.61, 221.3, 233, 244.69, 256.39, 268.08, 279.78, 291.47, 303.17],\r\n      [167.57, 177.6, 187.64, 200.68, 210.71, 220.75, 233.79, 246.84, 259.88, 272.92, 285.97, 299.01, 312.06, 325.1, 338.15],\r\n    ],\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59]\r\n  },\r\n  skill: {\r\n    dmg: [169.6, 182.32, 195.04, 212, 224.72, 237.44, 254.4, 271.36, 288.32, 305.28, 322.24, 339.2, 360.4, 381.6, 402.8],\r\n  },\r\n  burst: {\r\n    dmg: [182.4, 196.08, 209.76, 228, 241.68, 255.36, 273.6, 291.84, 310.08, 328.32, 346.56, 364.8, 387.6, 410.4, 433.2],\r\n    dmg_: [33.4, 35.4, 37.4, 40, 42, 44, 46.6, 49.2, 51.8, 54.4, 57, 59.6, 62.2, 64.8, 67.4]\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(data.charged.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n  passive2: {\r\n    dmg: stats => basicDMGFormula(80, stats, \"charged\"),\r\n  },\r\n  constellation4: {\r\n    shield: stats => [s => 0.45 * s.finalHP * (1 + s.shield_ / 100), [\"finalHP\", \"shield_\"]],\r\n    shieldCryo: stats => [s => 0.45 * s.finalHP * (1 + s.shield_ / 100) * 2.5, [\"finalHP\", \"shield_\"]],\r\n  },\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { singleToTalentPercent, toTalentPercent } from \"../../../Util/DataminedUtil\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\nimport skillParam_gen_pre from './skillParam_gen.json'\r\nconst skillParam_gen = skillParam_gen_pre as any\r\nlet a = 0, p1 = 0\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      toTalentPercent(skillParam_gen.auto[a++]),//x2\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n      toTalentPercent(skillParam_gen.auto[a++]),//x2\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n    ]\r\n  },\r\n  charged: {\r\n    hit: toTalentPercent(skillParam_gen.auto[a++]),\r\n    full: toTalentPercent(skillParam_gen.auto[a++]),\r\n    kindling: toTalentPercent(skillParam_gen.auto[a++]),\r\n  },\r\n  plunging: {\r\n    dmg: toTalentPercent(skillParam_gen.auto[a++]),\r\n    low: toTalentPercent(skillParam_gen.auto[a++]),\r\n    high: toTalentPercent(skillParam_gen.auto[a++]),\r\n  },\r\n  skill: {\r\n    dmg_: toTalentPercent(skillParam_gen.skill[3]),\r\n  },\r\n  burst: {\r\n    dmg: toTalentPercent(skillParam_gen.burst[0]),\r\n    exp: toTalentPercent(skillParam_gen.burst[1]),\r\n  },\r\n  passive2: {\r\n    fixed_atk_: singleToTalentPercent(skillParam_gen.passive2[p1++][0]),\r\n    var_atk_: singleToTalentPercent(skillParam_gen.passive2[p1++][0]),\r\n    duration: skillParam_gen.passive2[p1++][0],\r\n  }\r\n} as const\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\", name === \"hit\" ? undefined : \"pyro\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula((data.skill.dmg_[stats.tlvl.skill] / 100) * arr[stats.tlvl.auto], stats, \"normal\", \"pyro\")])),\r\n  burst: Object.fromEntries(Object.entries(data.burst).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.burst], stats, \"burst\")])),\r\n  c6: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(0.6 * (data.skill.dmg_[stats.tlvl.skill] / 100) * arr[stats.tlvl.auto], stats, \"normal\", \"pyro\")])),\r\n}\r\nexport default formula","import { getTalentStatKey } from \"../../../Build/Build\"\r\nimport { FormulaItem, IFormulaSheet } from \"../../../Types/character\"\r\nimport { BasicStats } from \"../../../Types/stats\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [30.77, 33.27, 35.78, 39.36, 41.86, 44.72, 48.66, 52.59, 56.53, 60.82, 65.74, 71.53, 77.31, 83.1, 89.41],//1\r\n      [31.15, 33.69, 36.22, 39.85, 42.38, 45.28, 49.26, 53.25, 57.23, 61.58, 66.56, 72.42, 78.27, 84.13, 90.52],//2\r\n      [38.58, 41.72, 44.86, 49.34, 52.48, 56.07, 61, 65.94, 70.87, 76.26, 82.42, 89.68, 96.93, 104.18, 112.1],//3\r\n      [42.94, 46.43, 49.93, 54.92, 58.42, 62.41, 67.9, 73.4, 78.89, 84.88, 91.74, 99.82, 107.89, 115.97, 124.77],//4\r\n      [10.75, 11.63, 12.5, 13.75, 14.63, 15.63, 17, 18.38, 19.75, 21.25, 22.97, 24.99, 27.01, 29.03, 31.24],//5 ×4\r\n      [54.5, 58.93, 63.37, 69.7, 74.14, 79.21, 86.18, 93.15, 100.12, 107.73, 116.44, 126.69, 136.93, 147.18, 158.36]\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: [111.03, 120.06, 129.1, 142.01, 151.05, 161.38, 175.58, 189.78, 203.98, 219.47, 237.22, 258.1, 278.97, 299.85, 322.62],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04]\r\n  },\r\n  skill: {\r\n    steeleDMG: [16, 17.2, 18.4, 20, 21.2, 22.4, 24, 25.6, 27.2, 28.8, 30.4, 32, 34, 36, 38],\r\n    resonanceDMG: [32, 34.4, 36.8, 40, 42.4, 44.8, 48, 51.2, 54.4, 57.6, 60.8, 64, 68, 72, 76],\r\n    holdDMG: [80, 86, 92, 100, 106, 112, 120, 128, 136, 144, 152, 160, 170, 180, 190],\r\n    shieldBase: [1232, 1356, 1489, 1633, 1787, 1951, 2126, 2311, 2506, 2712, 2927, 3153, 3389, 3636, 3893],\r\n    shieldMaxHP: [12.8, 13.76, 14.72, 16, 16.96, 17.92, 19.2, 20.48, 21.76, 23.04, 24.32, 25.6, 27.2, 28.8, 30.4]\r\n  },\r\n  burst: {\r\n    dmg: [401.08, 444.44, 487.8, 542, 590.78, 639.56, 704.6, 769.64, 834.68, 899.72, 964.76, 1029.8, 1084, 1138.2, 1192.4],\r\n    petriDur: [3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4, 4, 4, 4, 4]\r\n  }\r\n}\r\nfunction hpDMGFormula(percent: number, hpPercent: number, stats: BasicStats, skillKey: string): FormulaItem {\r\n  const val = percent / 100\r\n  const hpMulti = hpPercent / 100\r\n  const statKey = getTalentStatKey(skillKey, stats) + \"_multi\"\r\n  return [s => (val * s.finalATK + hpMulti * s.finalHP) * s[statKey], [\"finalATK\", \"finalHP\", statKey]]\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: {\r\n    ...Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n      basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n    ...Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [`${i}HP`, stats =>\r\n      hpDMGFormula(percentArr[stats.tlvl.auto], 1.39, stats, \"normal\")])),\r\n  },\r\n  charged: {\r\n    dmg: stats => basicDMGFormula(data.charged.dmg[stats.tlvl.auto], stats, \"charged\"),\r\n    dmgHP: stats => hpDMGFormula(data.charged.dmg[stats.tlvl.auto], 1.39, stats, \"charged\")\r\n  },\r\n  plunging: {\r\n    dmg: stats => basicDMGFormula(data.plunging.dmg[stats.tlvl.auto], stats, \"plunging\"),\r\n    dmgHP: stats => hpDMGFormula(data.plunging.dmg[stats.tlvl.auto], 1.39, stats, \"plunging\"),\r\n    low: stats => basicDMGFormula(data.plunging.low[stats.tlvl.auto], stats, \"plunging\"),\r\n    lowHP: stats => hpDMGFormula(data.plunging.low[stats.tlvl.auto], 1.39, stats, \"plunging\"),\r\n    high: stats => basicDMGFormula(data.plunging.high[stats.tlvl.auto], stats, \"plunging\"),\r\n    highHP: stats => hpDMGFormula(data.plunging.high[stats.tlvl.auto], 1.39, stats, \"plunging\"),\r\n  },\r\n  skill: {\r\n    steeleDMG: stats => basicDMGFormula(data.skill.steeleDMG[stats.tlvl.skill], stats, \"skill\"),\r\n    steeleDMGHP: stats => hpDMGFormula(data.skill.steeleDMG[stats.tlvl.skill], 1.9, stats, \"skill\"),\r\n    resonanceDMG: stats => basicDMGFormula(data.skill.resonanceDMG[stats.tlvl.skill], stats, \"skill\"),\r\n    resonanceDMGHP: stats => hpDMGFormula(data.skill.resonanceDMG[stats.tlvl.skill], 1.9, stats, \"skill\"),\r\n    holdDMG: stats => basicDMGFormula(data.skill.holdDMG[stats.tlvl.skill], stats, \"skill\"),\r\n    holdDMGHP: stats => hpDMGFormula(data.skill.holdDMG[stats.tlvl.skill], 1.9, stats, \"skill\"),\r\n    shield: stats => {\r\n      const base = data.skill.shieldBase[stats.tlvl.skill]\r\n      const hpMulti = data.skill.shieldMaxHP[stats.tlvl.skill] / 100\r\n      return [s => (hpMulti * s.finalHP + base) * (1 + s.shield_ / 100) * 1.5, [\"finalHP\", \"shield_\"]]\r\n    }\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    dmgHP: stats => hpDMGFormula(data.burst.dmg[stats.tlvl.burst], 33, stats, \"burst\"),\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  heal: [100, 115, 130, 145, 160],\r\n  dmg: [200, 230, 260, 290, 320]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\"),\r\n  heal: stats => {\r\n    const hp = data.heal[stats.weapon.refineIndex] / 100\r\n    return [s => (hp * s.finalATK) * s.heal_multi, [\"finalATK\", \"heal_multi\"]]\r\n  },\r\n}\r\nexport default formula","import { getTalentStatKey } from \"../../../../Build/Build\";\r\nimport { ISubFormula } from \"../../../../Types/character\";\r\nexport const data = {\r\n  defConv: [40, 50, 60, 70, 80],\r\n} as const\r\n\r\nconst formula: ISubFormula = {\r\n  skill: stats => {\r\n    const val = data.defConv[stats.weapon.refineIndex] / 100\r\n    const statKey = getTalentStatKey(\"skill\", stats) + \"_multi\"\r\n    return [s => val * s.finalDEF * s[statKey], ['finalDEF', statKey]]\r\n  },\r\n} as const\r\nexport default formula\r\n","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [240, 280, 320, 360, 400]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nexport const data = {\r\n  hp_atk: [1.2, 1.5, 1.8, 2.1, 2.4]\r\n}\r\n\r\nconst formula: ISubFormula = {\r\n  bonus: stats => [s => (s.modStats?.finalHP ?? s.finalHP) * data.hp_atk[stats.weapon.refineIndex] / 100, ['finalHP']],\r\n}\r\nexport default formula\r\n","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [20, 25, 30, 35, 40]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\n\r\nexport const data = {\r\n  dmg_: [20, 25, 30, 35, 40],\r\n  heal: [60, 70, 80, 90, 100]\r\n}\r\nconst formula: ISubFormula = {\r\n  regen: stats => {\r\n    const hp = data.heal[stats.weapon.refineIndex] / 100\r\n    return [s => (hp * s.finalATK) * s.heal_multi, [\"finalATK\", \"heal_multi\"]]\r\n  },\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  vals: [100, 125, 150, 175, 200]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.vals[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\n\r\nexport const data = {\r\n  heal: [1, 1.25, 1.5, 1.75, 2]\r\n}\r\nconst formula: ISubFormula = {\r\n  heal: stats => {\r\n    const hp = data.heal[stats.weapon.refineIndex] / 100\r\n    return [s => (hp * s.finalHP) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n  },\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [20, 25, 30, 35, 40]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [80, 95, 110, 125, 140],\r\n  dmgc: [200, 240, 280, 320, 360]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\"),\r\n  dmgc: stats => basicDMGFormula(data.dmgc[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nexport const data = {\r\n  enerRechConv: [28, 35, 42, 49, 56],\r\n  enerRechMax: [80, 90, 100, 110, 120]\r\n} as const\r\n\r\nconst formula: ISubFormula = {\r\n  conv: stats => [s => Math.min(((s.premod?.enerRech_ ?? s.enerRech_) - 100) * data.enerRechConv[stats.weapon.refineIndex] / 100, data.enerRechMax[stats.weapon.refineIndex]), ['enerRech_']],\r\n} as const\r\nexport default formula\r\n","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [160, 200, 240, 280, 320]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg:  [40, 55, 70, 85, 100]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nexport const data = {\r\n  hp_atk: [0.8, 1, 1.2, 1.4, 1.6],\r\n  hp_atk_add: [1, 1.2, 1.4, 1.6, 1.8]\r\n}\r\n\r\nconst formula: ISubFormula = {\r\n  esj: stats => [s => (s.modStats?.finalHP ?? s.finalHP) * data.hp_atk[stats.weapon.refineIndex] / 100, ['finalHP']],\r\n  esjadd: stats => [s => (s.modStats?.finalHP ?? s.finalHP) * data.hp_atk_add[stats.weapon.refineIndex] / 100, ['finalHP']],\r\n}\r\nexport default formula\r\n","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [60, 75, 90, 105, 120]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [100, 125, 150, 175, 200],\r\n} as const\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\"),\r\n} as const\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [240, 300, 360, 420, 480]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { getTalentStatKey } from \"../../../../Build/Build\";\r\nimport { ISubFormula } from \"../../../../Types/character\";\r\nexport const data = {\r\n  defConv: [40, 50, 60, 70, 80],\r\n} as const\r\n\r\nconst formula: ISubFormula = {\r\n  normal: stats => {\r\n    const val = data.defConv[stats.weapon.refineIndex] / 100\r\n    const statKey = getTalentStatKey(\"normal\", stats) + \"_multi\"\r\n    return [s => val * s.finalDEF * s[statKey], ['finalDEF', statKey]]\r\n  },\r\n  charged: stats => {\r\n    const val = data.defConv[stats.weapon.refineIndex] / 100\r\n    const statKey = getTalentStatKey(\"charged\", stats) + \"_multi\"\r\n    return [s => val * s.finalDEF * s[statKey], ['finalDEF', statKey]]\r\n  },\r\n} as const\r\nexport default formula\r\n","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [80, 100, 120, 140, 160]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [80, 95, 110, 125, 140],\r\n  dmgc: [200, 240, 280, 320, 360]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\"),\r\n  dmgc: stats => basicDMGFormula(data.dmgc[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\n\r\nexport const data = {\r\n  shield: [20, 23, 26, 29, 32]\r\n}\r\nconst formula: ISubFormula = {\r\n  shield: stats => {\r\n    const hpMulti = data.shield[stats.weapon.refineIndex] / 100\r\n    return [s => hpMulti * s.finalHP * (1 + s.shield_ / 100) * 1.5, [\"finalHP\", \"shield_\"]]\r\n  }\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\n\r\nexport const data = {\r\n  heal: [8, 10, 12, 14, 16]\r\n}\r\nconst formula: ISubFormula = {\r\n  heal: stats => {\r\n    const hp = data.heal[stats.weapon.refineIndex] / 100\r\n    return [s => (hp * s.finalHP) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n  },\r\n}\r\nexport default formula","import { getTalentStatKey } from \"../../../../Build/Build\";\r\nimport { ISubFormula } from \"../../../../Types/character\";\r\nexport const data = {\r\n  hp_conv: [1, 1.5, 2, 2.5, 3]\r\n} as const\r\n\r\nconst formula: ISubFormula = {\r\n  norm: stats => {\r\n    const val = data.hp_conv[stats.weapon.refineIndex] / 100\r\n    const statKey = getTalentStatKey(\"elemental\", stats) + \"_multi\"\r\n    return [s => val * s.finalHP * s[statKey], ['finalHP', statKey]]\r\n  },\r\n} as const\r\nexport default formula\r\n","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [240, 270, 300, 330, 360]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [80, 95, 110, 125, 140],\r\n  dmgc: [200, 240, 280, 320, 360]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\"),\r\n  dmgc: stats => basicDMGFormula(data.dmgc[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\n\r\nexport const data = {\r\n  heal: [1, 1.25, 1.5, 1.75, 2]\r\n}\r\nconst formula: ISubFormula = {\r\n  heal: stats => {\r\n    const hp = data.heal[stats.weapon.refineIndex] / 100\r\n    return [s => (hp * s.finalHP) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n  },\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\n\r\nexport const data = {\r\n  heal: [4, 4.5, 5, 5.5, 6]\r\n}\r\nconst formula: ISubFormula = {\r\n  heal: stats => {\r\n    const hp = data.heal[stats.weapon.refineIndex] / 100\r\n    return [s => (hp * s.finalHP) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n  },\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [160, 200, 240, 280, 320]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  dmg: [100, 125, 150, 175, 200]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.dmg[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\n\r\nexport const data = {\r\n  heal: [8, 10, 12, 14, 16]\r\n}\r\nconst formula: ISubFormula = {\r\n  heal: stats => {\r\n    const hp = data.heal[stats.weapon.refineIndex] / 100\r\n    return [s => (hp * s.finalHP) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n  },\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  vals: [40, 50, 60, 70, 80]\r\n}\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(data.vals[stats.weapon.refineIndex], stats, \"physical\")\r\n}\r\nexport default formula","import AquilaFavonia from './Sword/AquilaFavonia/data'\r\n// import BlackcliffLongsword from './Sword/BlackcliffLongsword/data'\r\nimport CinnabarSpindle from './Sword/CinnabarSpindle/data'\r\n// import CoolSteel from './Sword/CoolSteel/data'\r\n// import DarkIronSword from './Sword/DarkIronSword/data'\r\n// import DullBlade from './Sword/DullBlade/data'\r\n// import FavoniusSword from './Sword/FavoniusSword/data'\r\n// import FesteringDesire from './Sword/FesteringDesire/data'\r\nimport FilletBlade from './Sword/FilletBlade/data'\r\n// import FreedomSworn from './Sword/FreedomSworn/data'\r\n// import HarbingerOfDawn from './Sword/HarbingerOfDawn/data'\r\n// import IronSting from './Sword/IronSting/data'\r\n// import LionsRoar from './Sword/LionsRoar/data'\r\nimport PrimordialJadeCutter from './Sword/PrimordialJadeCutter/data'\r\n// import PrototypeRancour from './Sword/PrototypeRancour/data'\r\n// import RoyalLongsword from './Sword/RoyalLongsword/data'\r\n// import SacrificialSword from './Sword/SacrificialSword/data'\r\n// import SilverSword from './Sword/SilverSword/data'\r\n// import SkyriderSword from './Sword/SkyriderSword/data'\r\nimport SkywardBlade from './Sword/SkywardBlade/data'\r\n// import SummitShaper from './Sword/SummitShaper/data'\r\nimport SwordOfDescension from './Sword/SwordOfDescension/data'\r\n// import TheAlleyFlash from './Sword/TheAlleyFlash/data'\r\nimport TheBlackSword from './Sword/TheBlackSword/data'\r\nimport TheFlute from './Sword/TheFlute/data'\r\nimport TravelersHandySword from './Sword/TravelersHandySword/data'\r\n\r\n// import BeginnersProtector from './Polearm/BeginnersProtector/data'\r\n// import BlackcliffPole from './Polearm/BlackcliffPole/data'\r\n// import BlackTassel from './Polearm/BlackTassel/data'\r\nimport CrescentPike from './Polearm/CrescentPike/data'\r\n// import Deathmatch from './Polearm/Deathmatch/data'\r\n// import DragonsBane from './Polearm/DragonsBane/data'\r\nimport DragonspineSpear from './Polearm/DragonspineSpear/data'\r\nimport EngulfingLightning from './Polearm/EngulfingLightning/data'\r\n// import FavoniusLance from './Polearm/FavoniusLance/data'\r\nimport Halberd from './Polearm/Halberd/data'\r\n// import IronPoint from './Polearm/IronPoint/data'\r\n// import LithicSpear from './Polearm/LithicSpear/data'\r\n// import PrimordialJadeWingedSpear from './Polearm/PrimordialJadeWingedSpear/data'\r\n// import PrototypeStarglitter from './Polearm/PrototypeStarglitter/data'\r\n// import RoyalSpear from './Polearm/RoyalSpear/data'\r\nimport SkywardSpine from './Polearm/SkywardSpine/data'\r\nimport StaffOfHoma from './Polearm/StaffOfHoma/data'\r\n// import VortexVanquisher from './Polearm/VortexVanquisher/data'\r\n// import WhiteTassel from './Polearm/WhiteTassel/data'\r\n\r\n// import BlackcliffSlasher from './Claymore/BlackcliffSlasher/data'\r\n// import BloodtaintedGreatsword from './Claymore/BloodtaintedGreatsword/data'\r\nimport DebateClub from './Claymore/DebateClub/data'\r\n// import FavoniusGreatsword from './Claymore/FavoniusGreatsword/data'\r\n// import FerrousShadow from './Claymore/FerrousShadow/data'\r\n// import LithicBlade from './Claymore/LithicBlade/data'\r\nimport LuxuriousSeaLord from './Claymore/LuxuriousSeaLord/data'\r\n// import OldMercsPal from './Claymore/OldMercsPal/data'\r\nimport PrototypeArchaic from './Claymore/PrototypeArchaic/data'\r\n// import Quartz from './Claymore/Quartz/data'\r\n// import Rainslasher from './Claymore/Rainslasher/data'\r\nimport RedhornStonethresher from './Claymore/RedhornStonethresher/data'\r\n// import RoyalGreatsword from './Claymore/RoyalGreatsword/data'\r\n// import SacrificialGreatsword from './Claymore/SacrificialGreatsword/data'\r\n// import SerpentSpine from './Claymore/SerpentSpine/data'\r\n// import SkyriderGreatsword from './Claymore/SkyriderGreatsword/data'\r\nimport SkywardPride from './Claymore/SkywardPride/data'\r\nimport SnowTombedStarsilver from './Claymore/SnowTombedStarsilver/data'\r\n// import SongOfBrokenPines from './Claymore/SongOfBrokenPines/data'\r\nimport TheBell from './Claymore/TheBell/data'\r\n// import TheUnforged from './Claymore/TheUnforged/data'\r\n// import WasterGreatsword from './Claymore/WasterGreatsword/data'\r\n// import Whiteblind from './Claymore/Whiteblind/data'\r\nimport WhiteIronGreatsword from './Claymore/WhiteIronGreatsword/data'\r\n// import WolfsGravestone from './Claymore/WolfsGravestone/data'\r\n\r\n// import ApprenticesNotes from './Catalyst/ApprenticesNotes/data'\r\n// import BlackcliffAgate from './Catalyst/BlackcliffAgate/data'\r\n// import DodocoTales from './Catalyst/DodocoTales/data'\r\n// import EmeraldOrb from './Catalyst/EmeraldOrb/data'\r\nimport EverlastingMoonglow from './Catalyst/EverlastingMoonglow/data'\r\nimport EyeOfPerception from './Catalyst/EyeOfPerception/data'\r\n// import FavoniusCodex from './Catalyst/FavoniusCodex/data'\r\nimport Frostbearer from './Catalyst/Frostbearer/data'\r\n// import LostPrayerToTheSacredWinds from './Catalyst/LostPrayerToTheSacredWinds/data'\r\n// import MagicGuide from './Catalyst/MagicGuide/data'\r\n// import MappaMare from './Catalyst/MappaMare/data'\r\n// import MemoryOfDust from './Catalyst/MemoryOfDust/data'\r\nimport OtherworldlyStory from './Catalyst/OtherworldlyStory/data'\r\n// import PocketGrimoire from './Catalyst/PocketGrimoire/data'\r\nimport PrototypeAmber from './Catalyst/PrototypeAmber/data'\r\n// import RoyalGrimoire from './Catalyst/RoyalGrimoire/data'\r\n// import SacrificialFragments from './Catalyst/SacrificialFragments/data'\r\nimport SkywardAtlas from './Catalyst/SkywardAtlas/data'\r\n// import SolarPearl from './Catalyst/SolarPearl/data'\r\n// import TheWidsith from './Catalyst/TheWidsith/data'\r\n// import ThrillingTalesOfDragonSlayers from './Catalyst/ThrillingTalesOfDragonSlayers/data'\r\n// import TwinNephrite from './Catalyst/TwinNephrite/data'\r\n// import WineAndSong from './Catalyst/WineAndSong/data'\r\n\r\n// import AlleyHunter from './Bow/AlleyHunter/data'\r\n// import AmosBow from './Bow/AmosBow/data'\r\n// import BlackcliffWarbow from './Bow/BlackcliffWarbow/data'\r\n// import CompoundBow from './Bow/CompoundBow/data'\r\n// import EbonyBow from './Bow/EbonyBow/data'\r\n// import ElegyForTheEnd from './Bow/ElegyForTheEnd/data'\r\n// import FavoniusWarbow from './Bow/FavoniusWarbow/data'\r\n// import HuntersBow from './Bow/HuntersBow/data'\r\nimport Messenger from './Bow/Messenger/data'\r\n// import MitternachtsWaltz from './Bow/MitternachtsWaltz/data'\r\n// import PrototypeCrescent from './Bow/PrototypeCrescent/data'\r\n// import RavenBow from './Bow/RavenBow/data'\r\nimport RecurveBow from './Bow/RecurveBow/data'\r\n// import RoyalBow from './Bow/RoyalBow/data'\r\n// import Rust from './Bow/Rust/data'\r\n// import SacrificialBow from './Bow/SacrificialBow/data'\r\n// import SeasonedHuntersBow from './Bow/SeasonedHuntersBow/data'\r\n// import SharpshootersOath from './Bow/SharpshootersOath/data'\r\nimport SkywardHarp from './Bow/SkywardHarp/data'\r\n// import Slingshot from './Bow/Slingshot/data'\r\n// import TheStringless from './Bow/TheStringless/data'\r\nimport TheViridescentHunt from './Bow/TheViridescentHunt/data'\r\n// import WindblumeOde from './Bow/WindblumeOde/data'\r\n\r\nconst sword = {\r\n  AquilaFavonia,\r\n  // BlackcliffLongsword,\r\n  CinnabarSpindle,\r\n  // CoolSteel,\r\n  // DarkIronSword,\r\n  // DullBlade,\r\n  // FavoniusSword,\r\n  // FesteringDesire,\r\n  FilletBlade,\r\n  // FreedomSworn,\r\n  // HarbingerOfDawn,\r\n  // IronSting,\r\n  // LionsRoar,\r\n  PrimordialJadeCutter,\r\n  // PrototypeRancour,\r\n  // RoyalLongsword,\r\n  // SacrificialSword,\r\n  // SilverSword,\r\n  // SkyriderSword,\r\n  SkywardBlade,\r\n  // SummitShaper,\r\n  SwordOfDescension,\r\n  // TheAlleyFlash,\r\n  TheBlackSword,\r\n  TheFlute,\r\n  TravelersHandySword,\r\n}\r\n\r\nconst polearm = {\r\n  // BeginnersProtector,\r\n  // BlackcliffPole,\r\n  // BlackTassel,\r\n  CrescentPike,\r\n  // Deathmatch,\r\n  // DragonsBane,\r\n  DragonspineSpear,\r\n  EngulfingLightning,\r\n  // FavoniusLance,\r\n  Halberd,\r\n  // IronPoint,\r\n  // LithicSpear,\r\n  // PrimordialJadeWingedSpear,\r\n  // PrototypeStarglitter,\r\n  // RoyalSpear,\r\n  SkywardSpine,\r\n  StaffOfHoma,\r\n  // VortexVanquisher,\r\n  // WhiteTassel,\r\n}\r\n\r\nconst catalyst = {\r\n  // ApprenticesNotes,\r\n  // BlackcliffAgate,\r\n  // DodocoTales,\r\n  // EmeraldOrb,\r\n  EverlastingMoonglow,\r\n  EyeOfPerception,\r\n  // FavoniusCodex,\r\n  Frostbearer,\r\n  // LostPrayerToTheSacredWinds,\r\n  // MagicGuide,\r\n  // MappaMare,\r\n  // MemoryOfDust,\r\n  OtherworldlyStory,\r\n  // PocketGrimoire,\r\n  PrototypeAmber,\r\n  // RoyalGrimoire,\r\n  // SacrificialFragments,\r\n  SkywardAtlas,\r\n  // SolarPearl,\r\n  // TheWidsith,\r\n  // ThrillingTalesOfDragonSlayers,\r\n  // TwinNephrite,\r\n  // WineAndSong,\r\n}\r\n\r\nconst claymore = {\r\n  // BlackcliffSlasher,\r\n  // BloodtaintedGreatsword,\r\n  DebateClub,\r\n  // FavoniusGreatsword,\r\n  // FerrousShadow,\r\n  // LithicBlade,\r\n  LuxuriousSeaLord,\r\n  // OldMercsPal,\r\n  PrototypeArchaic,\r\n  // Quartz,\r\n  // Rainslasher,\r\n  RedhornStonethresher,\r\n  // RoyalGreatsword,\r\n  // SacrificialGreatsword,\r\n  // SerpentSpine,\r\n  // SkyriderGreatsword,\r\n  SkywardPride,\r\n  SnowTombedStarsilver,\r\n  // SongOfBrokenPines,\r\n  TheBell,\r\n  // TheUnforged,\r\n  // WasterGreatsword,\r\n  // Whiteblind,\r\n  WhiteIronGreatsword,\r\n  // WolfsGravestone,\r\n}\r\n\r\nconst bow = {\r\n  // AlleyHunter,\r\n  // AmosBow,\r\n  // BlackcliffWarbow,\r\n  // CompoundBow,\r\n  // EbonyBow,\r\n  // ElegyForTheEnd,\r\n  // FavoniusWarbow,\r\n  // HuntersBow,\r\n  Messenger,\r\n  // MitternachtsWaltz,\r\n  // PrototypeCrescent,\r\n  // RavenBow,\r\n  RecurveBow,\r\n  // RoyalBow,\r\n  // Rust,\r\n  // SacrificialBow,\r\n  // SeasonedHuntersBow,\r\n  // SharpshootersOath,\r\n  SkywardHarp,\r\n  // Slingshot,\r\n  // TheStringless,\r\n  TheViridescentHunt,\r\n  // WindblumeOde,\r\n}\r\n\r\nconst formula = {\r\n  ...sword,\r\n  ...bow,\r\n  ...polearm,\r\n  ...catalyst,\r\n  ...claymore,\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(200, stats, \"physical\")\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\";\r\n\r\nconst formula: ISubFormula = {\r\n  dmg: stats => basicDMGFormula(125, stats, \"physical\")\r\n}\r\nexport default formula","import { FormulaItem } from '../Types/character'\r\nimport { Path } from '../Util/KeyPathUtil'\r\nimport { crawlObject } from '../Util/Util'\r\nimport character from './Characters/formula'\r\nimport weapon from './Weapons/formula'\r\nimport artifact from './Artifacts/formula'\r\nconst formula = {\r\n  character,\r\n  weapon,\r\n  artifact,\r\n}\r\n\r\ncrawlObject(formula, [], f => typeof f === \"function\", (formula, keys) => formula.keys = keys)\r\n\r\nexport default formula\r\nexport type FormulaPath = Path<typeof formula, FormulaItem>\r\nexport type FormulaPathBase = typeof formula","import Albedo from './Albedo/data'\r\nimport Aloy from './Aloy/data'\r\nimport Amber from './Amber/data'\r\nimport AratakiItto from './AratakiItto/data'\r\nimport Barbara from './Barbara/data'\r\nimport Beidou from './Beidou/data'\r\nimport Bennett from './Bennett/data'\r\nimport Chongyun from './Chongyun/data'\r\nimport Diluc from './Diluc/data'\r\nimport Diona from './Diona/data'\r\nimport Eula from './Eula/data'\r\nimport Fischl from './Fischl/data'\r\nimport Ganyu from './Ganyu/data'\r\nimport Gorou from './Gorou/data'\r\nimport HuTao from './HuTao/data'\r\nimport Jean from './Jean/data'\r\nimport KaedeharaKazuha from './KaedeharaKazuha/data'\r\nimport Kaeya from './Kaeya/data'\r\nimport KamisatoAyaka from './KamisatoAyaka/data'\r\nimport Keqing from './Keqing/data'\r\nimport Klee from './Klee/data'\r\nimport KujouSara from './KujouSara/data'\r\nimport Lisa from './Lisa/data'\r\nimport Mona from './Mona/data'\r\nimport Ningguang from './Ningguang/data'\r\nimport Noelle from './Noelle/data'\r\nimport Qiqi from './Qiqi/data'\r\nimport RaidenShogun from './RaidenShogun/data'\r\nimport Razor from './Razor/data'\r\nimport Rosaria from './Rosaria/data'\r\nimport SangonomiyaKokomi from './SangonomiyaKokomi/data'\r\nimport Sayu from './Sayu/data'\r\nimport Sucrose from './Sucrose/data'\r\nimport Tartaglia from './Tartaglia/data'\r\nimport Thoma from './Thoma/data'\r\nimport Traveler from './Traveler/data'\r\nimport Venti from './Venti/data'\r\nimport Xiao from './Xiao/data'\r\nimport Xiangling from './Xiangling/data'\r\nimport Xingqiu from './Xingqiu/data'\r\nimport Xinyan from './Xinyan/data'\r\nimport YaeMiko from './YaeMiko/data'\r\nimport Yanfei from './Yanfei/data'\r\nimport Yoimiya from './Yoimiya/data'\r\nimport Zhongli from './Zhongli/data'\r\nimport { IFormulaSheet } from '../../Types/character'\r\nimport { CharacterKey, ElementKey } from '../../Types/consts'\r\ntype IFormulaSheets = StrictDict<CharacterKey, IFormulaSheet | Dict<ElementKey, IFormulaSheet>>\r\nconst formula: IFormulaSheets = {\r\n  Albedo,\r\n  Aloy,\r\n  Amber,\r\n  AratakiItto,\r\n  Barbara,\r\n  Beidou,\r\n  Bennett,\r\n  Chongyun,\r\n  Diluc,\r\n  Diona,\r\n  Eula,\r\n  Fischl,\r\n  Ganyu,\r\n  Gorou,\r\n  HuTao,\r\n  Jean,\r\n  KaedeharaKazuha,\r\n  Kaeya,\r\n  KamisatoAyaka,\r\n  Keqing,\r\n  Klee,\r\n  KujouSara,\r\n  Lisa,\r\n  Mona,\r\n  Ningguang,\r\n  Noelle,\r\n  Qiqi,\r\n  RaidenShogun,\r\n  Razor,\r\n  Rosaria,\r\n  SangonomiyaKokomi,\r\n  Sayu,\r\n  Sucrose,\r\n  Tartaglia,\r\n  Thoma,\r\n  Traveler,\r\n  Venti,\r\n  Xiao,\r\n  Xiangling,\r\n  Xingqiu,\r\n  Xinyan,\r\n  YaeMiko,\r\n  Yanfei,\r\n  Yoimiya,\r\n  Zhongli\r\n};\r\nexport default formula\r\n","import Adventurer from './Adventurer/data'\r\n// import ArchaicPetra from './ArchaicPetra/data'\r\n// import Berserker from './Berserker/data'\r\n// import BlizzardStrayer from './BlizzardStrayer/data'\r\n// import BloodstainedChivalry from './BloodstainedChivalry/data'\r\n// import BraveHeart from './BraveHeart/data'\r\n// import CrimsonWitchOfFlames from './CrimsonWitchOfFlames/data'\r\n// import DefendersWill from './DefendersWill/data'\r\nimport EmblemOfSeveredFate from './EmblemOfSeveredFate/data'\r\n// import Gambler from './Gambler/data'\r\n// import GladiatorsFinale from './GladiatorsFinale/data'\r\n// import HeartOfDepth from './HeartOfDepth/data'\r\n// import Instructor from './Instructor/data'\r\n// import Lavawalker from './Lavawalker/data'\r\n// import LuckyDog from './LuckyDog/data'\r\n// import MaidenBeloved from './MaidenBeloved/data'\r\n// import MartialArtist from './MartialArtist/data'\r\n// import NoblesseOblige from './NoblesseOblige/data'\r\nimport OceanHuedClam from './OceanHuedClam/data'\r\n// import PaleFlame from './PaleFlame/data'\r\n// import PrayersForDestiny from './PrayersForDestiny/data'\r\n// import PrayersForIllumination from './PrayersForIllumination/data'\r\n// import PrayersForWisdom from './PrayersForWisdom/data'\r\n// import PrayersToSpringtime from './PrayersToSpringtime/data'\r\n// import ResolutionOfSojourner from './ResolutionOfSojourner/data'\r\n// import RetracingBolide from './RetracingBolide/data'\r\n// import Scholar from './Scholar/data'\r\n// import ShimenawasReminiscence from './ShimenawasReminiscence/data'\r\n// import TenacityOfTheMillelith from './TenacityOfTheMillelith/data'\r\n// import TheExile from './TheExile/data'\r\n// import ThunderingFury from './ThunderingFury/data'\r\n// import Thundersoother from './Thundersoother/data'\r\n// import TinyMiracle from './TinyMiracle/data'\r\nimport TravelingDoctor from './TravelingDoctor/data'\r\n// import ViridescentVenerer from './ViridescentVenerer/data'\r\n// import WanderersTroupe from './WanderersTroupe/data'\r\n// import { IArtifactSheets } from '../../Types/artifact/data'\r\nconst artifacts = {\r\n  Adventurer,\r\n  // ArchaicPetra,\r\n  // Berserker,\r\n  // BlizzardStrayer,\r\n  // BloodstainedChivalry,\r\n  // BraveHeart,\r\n  // CrimsonWitchOfFlames,\r\n  // DefendersWill,\r\n  EmblemOfSeveredFate,\r\n  // Gambler,\r\n  // GladiatorsFinale,\r\n  // HeartOfDepth,\r\n  // Instructor,\r\n  // Lavawalker,\r\n  // LuckyDog,\r\n  // MaidenBeloved,\r\n  // MartialArtist,\r\n  // NoblesseOblige,\r\n  OceanHuedClam,\r\n  // PaleFlame,\r\n  // PrayersForDestiny,\r\n  // PrayersForIllumination,\r\n  // PrayersForWisdom,\r\n  // PrayersToSpringtime,\r\n  // ResolutionOfSojourner,\r\n  // RetracingBolide,\r\n  // Scholar,\r\n  // ShimenawasReminiscence,\r\n  // TenacityOfTheMillelith,\r\n  // TheExile,\r\n  // ThunderingFury,\r\n  // Thundersoother,\r\n  // TinyMiracle,\r\n  TravelingDoctor,\r\n  // ViridescentVenerer,\r\n  // WanderersTroupe,\r\n} as const\r\nexport default artifacts","import { ISubFormula } from \"../../../Types/character\"\r\nimport { basicHealingFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst formula: ISubFormula = {\r\n  regen: stats => basicHealingFormula(30, \"finalHP\")\r\n} as const\r\nexport default formula","import { ISubFormula } from \"../../../Types/character\"\r\n\r\nconst formula: ISubFormula = {\r\n  s4: stats => [s => Math.min((s.premod?.enerRech_ ?? s.enerRech_), 300) * 0.25, [\"enerRech_\"]]\r\n}\r\nexport default formula","import { ISubFormula } from \"../../../Types/character\"\r\n\r\nconst formula: ISubFormula = {\r\n  dmg: stats => [s => 30000 * 0.9 * s.physical_enemyRes_multi, [\"physical_enemyRes_multi\"]]\r\n} as const\r\nexport default formula","import { ISubFormula } from \"../../../Types/character\"\r\nimport { basicHealingFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst formula: ISubFormula = {\r\n  regen: stats => basicHealingFormula(30, \"finalHP\")\r\n}\r\nexport default formula"],"sourceRoot":""}